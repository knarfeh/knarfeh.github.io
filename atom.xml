<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://knarfeh.github.io/"/>
  <updated>2018-08-11T09:19:56.108Z</updated>
  <id>http://knarfeh.github.io/</id>
  
  <author>
    <name>Frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Telegram Bot 的长轮询 VS Webhook</title>
    <link href="http://knarfeh.github.io/2018/03/20/Telegram%20Bot%20%E7%9A%84%E9%95%BF%E8%BD%AE%E8%AF%A2%20VS%20Webhook/"/>
    <id>http://knarfeh.github.io/2018/03/20/Telegram Bot 的长轮询 VS Webhook/</id>
    <published>2018-03-20T01:42:59.000Z</published>
    <updated>2018-08-11T09:19:56.108Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>长轮询（long polling）</th>
<th>Webhook</th>
</tr>
</thead>
<tbody>
<tr>
<td>简述</td>
<td>API 中的 getUpdates 方法， 如果 Bot <strong>上次标记完成后</strong> 没有收到信息，或消息已保存超过24小时，该方法会保持等待直到超时，在等待期间收到信息将会立刻返回结果；反之，该方法会返回一组包含了24小时内所有未标记信息的 Updates。利用 offset 参数可以将部分消息标记为已处理。</td>
<td>利用  setWebhook 方法告知服务器一个 url， 服务器将会在收到新消息时，通过 POST 方法将 json 格式的 Update 对象发送到指定的 url 地址。如果发送失败，Telegram 会重试一定次数。这个 url 必须是 https 的。</td>
</tr>
<tr>
<td>性能</td>
<td>没法做负载均衡，数据量比较大的情况话，性能瓶颈可能出现在 worker 上。</td>
<td>与传统服务器没有太大差异，可以做负载均衡（高可用），可以横向扩展。未来可以对接 Serverless，可扩展性更强</td>
</tr>
<tr>
<td>开发效率</td>
<td>不需要搭建服务器，处理 https 证书，有一个机器人的 token 就可以在本地开发</td>
<td>在不搭建服务器的情况下，可以用 google script 开发，但只能用类 Javascript 语言。如果要用其他语言开发，需搭建服务器，需 https</td>
</tr>
<tr>
<td>交互体验</td>
<td>响应速度较 Webhook 慢</td>
<td>响应速度取决于网络延迟，体验一般比长轮询好</td>
</tr>
</tbody>
</table>
<p>结论：如果追求开发速度，并且不需要考虑服务的高可用性，在可预知用户量不会增长过快的情况下，建议使用长轮询的方式，未来用户增长比较多再改也来得及，否则用 Webhook 的方式。如果对交互体验要求高的话，最好采用 webhook 的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;长轮询（long polling）&lt;/th&gt;
&lt;th&gt;Webhook&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;简述&lt;/td&gt;
&lt;td&gt;API 中的 getUpdates 方法，
    
    </summary>
    
    
      <category term="Telegram" scheme="http://knarfeh.github.io/tags/Telegram/"/>
    
      <category term="robot" scheme="http://knarfeh.github.io/tags/robot/"/>
    
  </entry>
  
  <entry>
    <title>go-ethereum 源码笔记（core 模块-区块链操作）</title>
    <link href="http://knarfeh.github.io/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88core%20%E6%A8%A1%E5%9D%97-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%93%8D%E4%BD%9C%EF%BC%89/"/>
    <id>http://knarfeh.github.io/2018/03/10/go-ethereum 源码笔记（core 模块-区块链操作）/</id>
    <published>2018-03-10T14:34:56.000Z</published>
    <updated>2018-08-18T07:16:33.161Z</updated>
    
    <content type="html"><![CDATA[<p>区块链区块链，即区块组成的链，不妨先从区块谈起。这一篇我们将着眼于区块链的一些基本操作。在区块链中，区块存储有效信息，在阅读源代码之前，我们应该对区块头，区块体，区块链这些基本的数据结构有所了解。</p>
<a id="more"></a>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><code>Block</code>, <code>Header</code>, <code>BlockChain</code> 的数据结构请查阅 <a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88%E6%A6%82%E8%A7%88%EF%BC%89/" target="_blank" rel="external">go-ethereum 源码笔记（概览）</a></p>
<h2 id="区块链基本操作"><a href="#区块链基本操作" class="headerlink" title="区块链基本操作"></a>区块链基本操作</h2><h3 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h3><p>在 <a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88cmd%20%E6%A8%A1%E5%9D%97-geth%20%E5%91%BD%E4%BB%A4%EF%BC%89/" target="_blank" rel="external">go-ethereum 源码笔记（cmd 模块-geth 命令）</a> 这一篇，我们提到有一个 <code>geth init</code> 命令，它可以用来创建创世区块。如果我们将本地的 geth 节点连接测试网络或主网的话，我们不会再进行创世区块的创建，因为区块链已经存在了，这时候应该是从其他节点进行同步。而如果我们需要运行一个私有链的话，这时候就需要一个创建一个创世区块。这部分代码在 <code>core/genesis.go</code> 中。</p>
<h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p><code>genesis.go</code> 会定义创世区块的数据结构，提供创建，查询创世区块的方法。</p>
<p>首先看 Genesis 结构体，它定义了创世区块应包含的数据。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">type Genesis struct &#123;</div><div class="line">	Config     *params.ChainConfig `<span class="string">json:</span><span class="string">"config"</span>`</div><div class="line">	Nonce      uint64              `<span class="string">json:</span><span class="string">"nonce"</span>`</div><div class="line">	Timestamp  uint64              `<span class="string">json:</span><span class="string">"timestamp"</span>`</div><div class="line">	ExtraData  []<span class="keyword">byte</span>              `<span class="string">json:</span><span class="string">"extraData"</span>`</div><div class="line">	GasLimit   uint64              `<span class="string">json:</span><span class="string">"gasLimit"</span>   <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Difficulty *big.Int            `<span class="string">json:</span><span class="string">"difficulty"</span> <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Mixhash    common.Hash         `<span class="string">json:</span><span class="string">"mixHash"</span>`</div><div class="line">	Coinbase   common.Address      `<span class="string">json:</span><span class="string">"coinbase"</span>`</div><div class="line">	Alloc      GenesisAlloc        `<span class="string">json:</span><span class="string">"alloc"</span>      <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line"></div><div class="line">	Number     uint64      `<span class="string">json:</span><span class="string">"number"</span>`</div><div class="line">	GasUsed    uint64      `<span class="string">json:</span><span class="string">"gasUsed"</span>`</div><div class="line">	ParentHash common.Hash `<span class="string">json:</span><span class="string">"parentHash"</span>`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>伴随创世区块的还有创世账户。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">type</span> GenesisAlloc <span class="meta">map</span>[<span class="meta">common</span>.<span class="keyword">Address]GenesisAccount</span></div><div class="line"></div><div class="line"><span class="symbol">type</span> GenesisAccount <span class="keyword">struct </span>&#123;</div><div class="line">	<span class="meta">Code</span>       []<span class="keyword">byte </span>                     `json:<span class="string">"code,omitempty"</span>`</div><div class="line">	Storage    <span class="meta">map</span>[<span class="meta">common</span>.Hash]<span class="meta">common</span>.Hash `json:<span class="string">"storage,omitempty"</span>`</div><div class="line">	<span class="keyword">Balance </span>   *<span class="keyword">big.Int </span>                   `json:<span class="string">"balance"</span> gencodec:<span class="string">"required"</span>`</div><div class="line">	Nonce      uint64                      `json:<span class="string">"nonce,omitempty"</span>`</div><div class="line">	PrivateKey []<span class="keyword">byte </span>                     `json:<span class="string">"secretKey,omitempty"</span>`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建创世区块"><a href="#创建创世区块" class="headerlink" title="创建创世区块"></a>创建创世区块</h4><p><code>SetupGenesisBlock</code> 函数用来在数据库中写入创世区块。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupGenesisBlock</span><span class="params">(db ethdb.Database, genesis *Genesis)</span> <span class="params">(*params.ChainConfig, common.Hash, error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> genesis != <span class="literal">nil</span> &amp;&amp; genesis.Config == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> params.AllEthashProtocolChanges, common.Hash&#123;&#125;, errGenesisNoConfig</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	stored := rawdb.ReadCanonicalHash(db, <span class="number">0</span>)</div><div class="line">	<span class="keyword">if</span> (stored == common.Hash&#123;&#125;) &#123;</div><div class="line">		<span class="keyword">if</span> genesis == <span class="literal">nil</span> &#123;</div><div class="line">			log.Info(<span class="string">"Writing default main-net genesis block"</span>)</div><div class="line">			genesis = DefaultGenesisBlock()</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			log.Info(<span class="string">"Writing custom genesis block"</span>)</div><div class="line">		&#125;</div><div class="line">		block, err := genesis.Commit(db)</div><div class="line">		<span class="keyword">return</span> genesis.Config, block.Hash(), err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> genesis != <span class="literal">nil</span> &#123;</div><div class="line">		hash := genesis.ToBlock(<span class="literal">nil</span>).Hash()</div><div class="line">		<span class="keyword">if</span> hash != stored &#123;</div><div class="line">			<span class="keyword">return</span> genesis.Config, hash, &amp;GenesisMismatchError&#123;stored, hash&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	newcfg := genesis.configOrDefault(stored)</div><div class="line">	storedcfg := rawdb.ReadChainConfig(db, stored)</div><div class="line">	<span class="keyword">if</span> storedcfg == <span class="literal">nil</span> &#123;</div><div class="line">		log.Warn(<span class="string">"Found genesis block without chain config"</span>)</div><div class="line">		rawdb.WriteChainConfig(db, stored, newcfg)</div><div class="line">		<span class="keyword">return</span> newcfg, stored, <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> genesis == <span class="literal">nil</span> &amp;&amp; stored != params.MainnetGenesisHash &#123;</div><div class="line">		<span class="keyword">return</span> storedcfg, stored, <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	height := rawdb.ReadHeaderNumber(db, rawdb.ReadHeadHeaderHash(db))</div><div class="line">	<span class="keyword">if</span> height == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> newcfg, stored, fmt.Errorf(<span class="string">"missing block number for head header hash"</span>)</div><div class="line">	&#125;</div><div class="line">	compatErr := storedcfg.CheckCompatible(newcfg, *height)</div><div class="line">	<span class="keyword">if</span> compatErr != <span class="literal">nil</span> &amp;&amp; *height != <span class="number">0</span> &amp;&amp; compatErr.RewindTo != <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">return</span> newcfg, stored, compatErr</div><div class="line">	&#125;</div><div class="line">	rawdb.WriteChainConfig(db, stored, newcfg)</div><div class="line">	<span class="keyword">return</span> newcfg, stored, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>SetupGenesisBlock</code> 会根据创世区块返回一个区块链的配置。从 db 参数中拿到的区块里如果没有创世区块的话，首先提交一个新区块。接着通过调用 <code>genesis.configOrDefault(stored)</code> 拿到当前链的配置，测试兼容性后将配置写回 DB 中。最后返回区块链的配置信息。</p>
<p><code>Genesis</code> 有一个 <code>ToBlock</code> 方法，它会根据 <code>Genesis</code> 的数据，使用基于内存的数据库，创建一个区块并返回（通过 <code>types.NewBlock</code>）。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">func (<span class="name">g</span> *Genesis) ToBlock(db ethdb.Database) *types.Block &#123;</div><div class="line">	if db == <span class="literal">nil</span> &#123;</div><div class="line">		db, _ = ethdb.NewMemDatabase()</div><div class="line">	&#125;</div><div class="line">	statedb, _ <span class="symbol">:=</span> state.New(<span class="name">common</span>.Hash&#123;&#125;, state.NewDatabase(<span class="name">db</span>))</div><div class="line">	for addr, account <span class="symbol">:=</span> range g.Alloc &#123;</div><div class="line">		statedb.AddBalance(<span class="name">addr</span>, account.Balance)</div><div class="line">		statedb.SetCode(<span class="name">addr</span>, account.Code)</div><div class="line">		statedb.SetNonce(<span class="name">addr</span>, account.Nonce)</div><div class="line">		for key, value <span class="symbol">:=</span> range account.Storage &#123;</div><div class="line">			statedb.SetState(<span class="name">addr</span>, key, value)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	root <span class="symbol">:=</span> statedb.IntermediateRoot(<span class="name">false</span>)</div><div class="line">	head <span class="symbol">:=</span> <span class="symbol">&amp;types</span>.Header&#123;</div><div class="line">		Number:     new(<span class="name">big</span>.Int).SetUint64(<span class="name">g</span>.Number),</div><div class="line">		Nonce:      types.EncodeNonce(<span class="name">g</span>.Nonce),</div><div class="line">		Time:       new(<span class="name">big</span>.Int).SetUint64(<span class="name">g</span>.Timestamp),</div><div class="line">		ParentHash: g.ParentHash,</div><div class="line">		Extra:      g.ExtraData,</div><div class="line">		GasLimit:   g.GasLimit,</div><div class="line">		GasUsed:    g.GasUsed,</div><div class="line">		Difficulty: g.Difficulty,</div><div class="line">		MixDigest:  g.Mixhash,</div><div class="line">		Coinbase:   g.Coinbase,</div><div class="line">		Root:       root,</div><div class="line">	&#125;</div><div class="line">	if g.GasLimit == <span class="number">0</span> &#123;</div><div class="line">		head.GasLimit = params.GenesisGasLimit</div><div class="line">	&#125;</div><div class="line">	if g.Difficulty == <span class="literal">nil</span> &#123;</div><div class="line">		head.Difficulty = params.GenesisDifficulty</div><div class="line">	&#125;</div><div class="line">	statedb.Commit(<span class="name">false</span>)</div><div class="line">	statedb.Database().TrieDB().Commit(<span class="name">root</span>, true)</div><div class="line"></div><div class="line">	return types.NewBlock(<span class="name">head</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Commit 方法将给定的 <code>genesis</code> 的区块和 <code>state</code> 写入数据库。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">func (<span class="keyword">g</span> *Genesis) Commit(<span class="keyword">db</span> ethdb.Database) (*types.Block, <span class="keyword">error</span>) &#123;</div><div class="line">	block := <span class="keyword">g</span>.ToBlock(<span class="keyword">db</span>)</div><div class="line">	<span class="keyword">if</span> block.Number().<span class="built_in">Sign</span>() != 0 &#123;</div><div class="line">		<span class="keyword">return</span> nil, fmt.Errorf(<span class="string">"can't commit genesis block with number &gt; 0"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := WriteTd(<span class="keyword">db</span>, block.Hash(), block.NumberU64(), <span class="keyword">g</span>.Difficulty); <span class="keyword">err</span> != nil &#123;</div><div class="line">		<span class="keyword">return</span> nil, <span class="keyword">err</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := WriteBlock(<span class="keyword">db</span>, block); <span class="keyword">err</span> != nil &#123;</div><div class="line">		<span class="keyword">return</span> nil, <span class="keyword">err</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := WriteBlockReceipts(<span class="keyword">db</span>, block.Hash(), block.NumberU64(), nil); <span class="keyword">err</span> != nil &#123;</div><div class="line">		<span class="keyword">return</span> nil, <span class="keyword">err</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := WriteCanonicalHash(<span class="keyword">db</span>, block.Hash(), block.NumberU64()); <span class="keyword">err</span> != nil &#123;</div><div class="line">		<span class="keyword">return</span> nil, <span class="keyword">err</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := WriteHeadBlockHash(<span class="keyword">db</span>, block.Hash()); <span class="keyword">err</span> != nil &#123;</div><div class="line">		<span class="keyword">return</span> nil, <span class="keyword">err</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := WriteHeadHeaderHash(<span class="keyword">db</span>, block.Hash()); <span class="keyword">err</span> != nil &#123;</div><div class="line">		<span class="keyword">return</span> nil, <span class="keyword">err</span></div><div class="line">	&#125;</div><div class="line">	config := <span class="keyword">g</span>.Config</div><div class="line">	<span class="keyword">if</span> config == nil &#123;</div><div class="line">		config = params.AllEthashProtocolChanges</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> block, WriteChainConfig(<span class="keyword">db</span>, block.Hash(), config)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-NewBlockChain-初始化区块链"><a href="#使用-NewBlockChain-初始化区块链" class="headerlink" title="使用 NewBlockChain 初始化区块链"></a>使用 <code>NewBlockChain</code> 初始化区块链</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockChain</span><span class="params">(db ethdb.Database, cacheConfig *CacheConfig, chainConfig *params.ChainConfig, engine consensus.Engine, vmConfig vm.Config)</span> <span class="params">(*BlockChain, error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> cacheConfig == <span class="literal">nil</span> &#123;</div><div class="line">		cacheConfig = &amp;CacheConfig&#123;</div><div class="line">			TrieNodeLimit: <span class="number">256</span> * <span class="number">1024</span> * <span class="number">1024</span>,</div><div class="line">			TrieTimeLimit: <span class="number">5</span> * time.Minute,</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	bodyCache, _ := lru.New(bodyCacheLimit)</div><div class="line">	bodyRLPCache, _ := lru.New(bodyCacheLimit)</div><div class="line">	blockCache, _ := lru.New(blockCacheLimit)</div><div class="line">	futureBlocks, _ := lru.New(maxFutureBlocks)</div><div class="line">	badBlocks, _ := lru.New(badBlockLimit)</div><div class="line"></div><div class="line">	bc := &amp;BlockChain&#123;</div><div class="line">		chainConfig:  chainConfig,</div><div class="line">		cacheConfig:  cacheConfig,</div><div class="line">		db:           db,</div><div class="line">		triegc:       prque.New(),</div><div class="line">		stateCache:   state.NewDatabase(db),</div><div class="line">		quit:         <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</div><div class="line">		bodyCache:    bodyCache,</div><div class="line">		bodyRLPCache: bodyRLPCache,</div><div class="line">		blockCache:   blockCache,</div><div class="line">		futureBlocks: futureBlocks,</div><div class="line">		engine:       engine,</div><div class="line">		vmConfig:     vmConfig,</div><div class="line">		badBlocks:    badBlocks,</div><div class="line">	&#125;</div><div class="line">	bc.SetValidator(NewBlockValidator(chainConfig, bc, engine))</div><div class="line">	bc.SetProcessor(NewStateProcessor(chainConfig, bc, engine))</div><div class="line"></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	bc.hc, err = NewHeaderChain(db, chainConfig, engine, bc.getProcInterrupt)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line">	bc.genesisBlock = bc.GetBlockByNumber(<span class="number">0</span>)</div><div class="line">	<span class="keyword">if</span> bc.genesisBlock == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, ErrNoGenesis</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> err := bc.loadLastState(); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> hash := <span class="keyword">range</span> BadHashes &#123;</div><div class="line">		<span class="keyword">if</span> header := bc.GetHeaderByHash(hash); header != <span class="literal">nil</span> &#123;</div><div class="line">			headerByNumber := bc.GetHeaderByNumber(header.Number.Uint64())</div><div class="line">			<span class="keyword">if</span> headerByNumber != <span class="literal">nil</span> &amp;&amp; headerByNumber.Hash() == header.Hash() &#123;</div><div class="line">				log.Error(<span class="string">"Found bad hash, rewinding chain"</span>, <span class="string">"number"</span>, header.Number, <span class="string">"hash"</span>, header.ParentHash)</div><div class="line">				bc.SetHead(header.Number.Uint64() - <span class="number">1</span>)</div><div class="line">				log.Error(<span class="string">"Chain rewind was successful, resuming normal operation"</span>)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">go</span> bc.update()</div><div class="line">	<span class="keyword">return</span> bc, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>BlockChain</code> 的初始化需要 <code>ethdb.Database</code>,  <code>*CacheConfig</code>, <code>params.ChainConfig</code>， <code>consensus.Engine</code>，<code>vm.Config</code> 参数。它们分别表示 db 对象；缓存配置（在 <code>core/blockchain.go</code> 中定义）；区块链配置（可通过 <code>core/genesis.go</code> 中的 <code>SetupGenesisBlock</code> 拿到）；一致性引擎（可通过 <code>core/blockchain.go</code> 中的 <code>CreateConsensusEngine</code> 得到）；虚拟机配置（通过 <code>core/vm</code> 定义）这些实参需要提前定义，以 eth 的 <code>backend.go</code> 为例，你可以在初始化 Ethereum 对象时看到这些参数是怎么初始化的，当然你也可以查看对应的测试代码学习 <code>NewBlockChain</code> 如何使用。</p>
<p>回到 <code>NewBlockChain</code> 的具体代码，首先判断是否有默认 <code>cacheConfig</code>，如果没有根据默认配置创建 <code>cacheConfig</code>，再通过 hashicorp 公司的 lru 模块创建 <code>bodyCache</code>, <code>bodyRLPCache</code> 等缓存对象（lru 是 last recently used 的缩写，常见数据结构，不了解的朋友请自行查阅相关资料），根据这些信息创建 <code>BlockChain</code> 对象，然后通过调用 <code>BlockChain</code> 的 <code>SetValidator</code> 和 <code>SetProcessor</code> 方法创建验证器和处理器，接下来通过 <code>NewHeaderChain</code> 获得区块头，尝试判断创始区块是否存在，<code>bc.loadLastState()</code> 加载区块最新状态，最后检查当前状态，确保本地运行的区块链上没有非法的区块。接下来我们深入到 <code>loadLastState</code> 方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span> <span class="title">loadLastState</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">	head := GetHeadBlockHash(bc.db)</div><div class="line">	<span class="keyword">if</span> head == (common.Hash&#123;&#125;) &#123;</div><div class="line">		log.Warn(<span class="string">"Empty database, resetting chain"</span>)</div><div class="line">		<span class="keyword">return</span> bc.Reset()</div><div class="line">	&#125;</div><div class="line">	currentBlock := bc.GetBlockByHash(head)</div><div class="line">	<span class="keyword">if</span> currentBlock == <span class="literal">nil</span> &#123;</div><div class="line">		log.Warn(<span class="string">"Head block missing, resetting chain"</span>, <span class="string">"hash"</span>, head)</div><div class="line">		<span class="keyword">return</span> bc.Reset()</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> _, err := state.New(currentBlock.Root(), bc.stateCache); err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Warn(<span class="string">"Head state missing, repairing chain"</span>, <span class="string">"number"</span>, currentBlock.Number(), <span class="string">"hash"</span>, currentBlock.Hash())</div><div class="line">		<span class="keyword">if</span> err := bc.repair(&amp;currentBlock); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> err</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	bc.currentBlock.Store(currentBlock)</div><div class="line"></div><div class="line">	currentHeader := currentBlock.Header()</div><div class="line">	<span class="keyword">if</span> head := GetHeadHeaderHash(bc.db); head != (common.Hash&#123;&#125;) &#123;</div><div class="line">		<span class="keyword">if</span> header := bc.GetHeaderByHash(head); header != <span class="literal">nil</span> &#123;</div><div class="line">			currentHeader = header</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	bc.hc.SetCurrentHeader(currentHeader)</div><div class="line">	</div><div class="line">	bc.currentFastBlock.Store(currentBlock)</div><div class="line">	<span class="keyword">if</span> head := GetHeadFastBlockHash(bc.db); head != (common.Hash&#123;&#125;) &#123;</div><div class="line">		<span class="keyword">if</span> block := bc.GetBlockByHash(head); block != <span class="literal">nil</span> &#123;</div><div class="line">			bc.currentFastBlock.Store(block)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Issue a status log for the user</span></div><div class="line">	<span class="comment">// ... </span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>loadLastState</code> 会从数据库中加载区块链状态，首先通过 <code>GetHeadBlockHash</code> 从数据库中取得当前区块头，如果当前区块不存在，即数据库为空的话，通过 <code>Reset</code> 将创始区块写入数据库以达到重置目的。如果当前区块不存在，同样通过 <code>Reset</code> 重置。接下来确认当前区块的世界状态是否正确，世界状态这是一个稍特别的概念，这个过程我们将在之后的文章中描述。如果有问题，则通过 <code>repair</code> 进行修复，<code>repair</code> 中是一个死循环，它会一直回溯当前区块，直到找到对应的世界状态。然后通过 <code>bc.hc.SetCurrentHeader</code> 设置当前区块头，并恢复快速同步区块。</p>
<p>在 <code>NewBlockChain</code> 调用 <code>loadLastState</code> 之后，会判断是否需要硬分叉，<code>BadHashes</code> 是手工配置的区块 hash 值，根据这些值我们可以决定是否以及如何进行硬分叉。最后以 goroutine 的方式调用 <code>bc.update()</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">func</span> (<span class="selector-tag">bc</span> *<span class="selector-tag">BlockChain</span>) <span class="selector-tag">update</span>() &#123;</div><div class="line">	<span class="attribute">futureTimer </span>:= time.<span class="built_in">Tick</span>(5 * time.Second)</div><div class="line">	for &#123;</div><div class="line">		select &#123;</div><div class="line">		case &lt;-futureTimer:</div><div class="line">			bc.<span class="built_in">procFutureBlocks</span>()</div><div class="line">		case &lt;-bc.quit:</div><div class="line">			return</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>update()</code> 的作用是定时处理 Future 区块，简单地来说就是定时调用 <code>procFutureBlocks</code>。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">func</span> (<span class="keyword">bc </span>*<span class="keyword">BlockChain) </span>procFutureBlocks() &#123;</div><div class="line">	<span class="keyword">blocks </span>:= make([]*types.<span class="keyword">Block, </span><span class="number">0</span>, <span class="keyword">bc.futureBlocks.Len())</span></div><div class="line">	for _, hash := range <span class="keyword">bc.futureBlocks.Keys() </span>&#123;</div><div class="line">		<span class="meta">if</span> <span class="keyword">block, </span>exist := <span class="keyword">bc.futureBlocks.Peek(hash); </span>exist &#123;</div><div class="line">			<span class="keyword">blocks </span>= append(<span class="keyword">blocks, </span><span class="keyword">block.(*types.Block))</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">if</span> len(<span class="keyword">blocks) </span>&gt; <span class="number">0</span> &#123;</div><div class="line">		types.<span class="keyword">BlockBy(types.Number).Sort(blocks)</span></div><div class="line">		for i := range <span class="keyword">blocks </span>&#123;</div><div class="line">			<span class="keyword">bc.InsertChain(blocks[i </span>: i+<span class="number">1</span>])</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>procFutureBlocks</code> 可以从 <code>futureBlocks</code> 拿到需要插入的区块，最终会调用 <code>InsertChain</code> 将区块插入到区块链中。</p>
<h3 id="插入区块"><a href="#插入区块" class="headerlink" title="插入区块"></a>插入区块</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span> <span class="title">InsertChain</span><span class="params">(chain types.Blocks)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</div><div class="line">	n, events, logs, err := bc.insertChain(chain)</div><div class="line">	bc.PostChainEvents(events, logs)</div><div class="line">	<span class="keyword">return</span> n, err</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>InsertChain</code> 将尝试将给定的区块插入到规范的区块链中，或者创建一个分支，插入后，会通过 <code>PostChainEvents</code> 触发所有事件。下面我们看看 <code>insertChain</code> 的实现。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span> <span class="title">insertChain</span><span class="params">(chain types.Blocks)</span> <span class="params">(<span class="keyword">int</span>, []<span class="keyword">interface</span>&#123;&#125;, []*types.Log, error)</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(chain); i++ &#123;</div><div class="line">		<span class="keyword">if</span> chain[i].NumberU64() != chain[i<span class="number">-1</span>].NumberU64()+<span class="number">1</span> || chain[i].ParentHash() != chain[i<span class="number">-1</span>].Hash() &#123;</div><div class="line">			log.Error(<span class="string">"Non contiguous block insert"</span>, <span class="string">"number"</span>, chain[i].Number(), <span class="string">"hash"</span>, chain[i].Hash(),</div><div class="line">				<span class="string">"parent"</span>, chain[i].ParentHash(), <span class="string">"prevnumber"</span>, chain[i<span class="number">-1</span>].Number(), <span class="string">"prevhash"</span>, chain[i<span class="number">-1</span>].Hash())</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"non contiguous insert: item %d is #%d [%x…], item %d is #%d [%x…] (parent [%x…])"</span>, i<span class="number">-1</span>, chain[i<span class="number">-1</span>].NumberU64(),</div><div class="line">				chain[i<span class="number">-1</span>].Hash().Bytes()[:<span class="number">4</span>], i, chain[i].NumberU64(), chain[i].Hash().Bytes()[:<span class="number">4</span>], chain[i].ParentHash().Bytes()[:<span class="number">4</span>])</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//...</span></div><div class="line">	<span class="keyword">var</span> (</div><div class="line">		stats         = insertStats&#123;startTime: mclock.Now()&#125;</div><div class="line">		events        = <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>, <span class="built_in">len</span>(chain))</div><div class="line">		lastCanon     *types.Block</div><div class="line">		coalescedLogs []*types.Log</div><div class="line">	)</div><div class="line">	headers := <span class="built_in">make</span>([]*types.Header, <span class="built_in">len</span>(chain))</div><div class="line">	seals := <span class="built_in">make</span>([]<span class="keyword">bool</span>, <span class="built_in">len</span>(chain))</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i, block := <span class="keyword">range</span> chain &#123;</div><div class="line">		headers[i] = block.Header()</div><div class="line">		seals[i] = <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">	abort, results := bc.engine.VerifyHeaders(bc, headers, seals)</div><div class="line">	<span class="keyword">defer</span> <span class="built_in">close</span>(abort)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i, block := <span class="keyword">range</span> chain &#123;</div><div class="line">		<span class="comment">// ...</span></div><div class="line">		<span class="comment">// Wait for the block's verification to complete ...</span></div><div class="line">		bstart := time.Now()</div><div class="line"></div><div class="line">		err := &lt;-results</div><div class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">			err = bc.Validator().ValidateBody(block)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">switch</span> &#123;</div><div class="line">		<span class="keyword">case</span> err == ErrKnownBlock:</div><div class="line">			<span class="keyword">if</span> bc.CurrentBlock().NumberU64() &gt;= block.NumberU64() &#123;</div><div class="line">				stats.ignored++</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> err == consensus.ErrFutureBlock:</div><div class="line">			max := big.NewInt(time.Now().Unix() + maxTimeFutureBlocks)</div><div class="line">			<span class="keyword">if</span> block.Time().Cmp(max) &gt; <span class="number">0</span> &#123;</div><div class="line">				<span class="keyword">return</span> i, events, coalescedLogs, fmt.Errorf(<span class="string">"future block: %v &gt; %v"</span>, block.Time(), max)</div><div class="line">			&#125;</div><div class="line">			bc.futureBlocks.Add(block.Hash(), block)</div><div class="line">			stats.queued++</div><div class="line">			<span class="keyword">continue</span></div><div class="line"></div><div class="line">		<span class="keyword">case</span> err == consensus.ErrUnknownAncestor &amp;&amp; bc.futureBlocks.Contains(block.ParentHash()):</div><div class="line">			bc.futureBlocks.Add(block.Hash(), block)</div><div class="line">			stats.queued++</div><div class="line">			<span class="keyword">continue</span></div><div class="line"></div><div class="line">		<span class="keyword">case</span> err == consensus.ErrPrunedAncestor:</div><div class="line">			currentBlock := bc.CurrentBlock()</div><div class="line">			localTd := bc.GetTd(currentBlock.Hash(), currentBlock.NumberU64())</div><div class="line">			externTd := <span class="built_in">new</span>(big.Int).Add(bc.GetTd(block.ParentHash(), block.NumberU64()<span class="number">-1</span>), block.Difficulty())</div><div class="line">			<span class="keyword">if</span> localTd.Cmp(externTd) &gt; <span class="number">0</span> &#123;</div><div class="line">				<span class="keyword">if</span> err = bc.WriteBlockWithoutState(block, externTd); err != <span class="literal">nil</span> &#123;</div><div class="line">					<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">var</span> winner []*types.Block</div><div class="line"></div><div class="line">			parent := bc.GetBlock(block.ParentHash(), block.NumberU64()<span class="number">-1</span>)</div><div class="line">			<span class="keyword">for</span> !bc.HasState(parent.Root()) &#123;</div><div class="line">				winner = <span class="built_in">append</span>(winner, parent)</div><div class="line">				parent = bc.GetBlock(parent.ParentHash(), parent.NumberU64()<span class="number">-1</span>)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(winner)/<span class="number">2</span>; j++ &#123;</div><div class="line">				winner[j], winner[<span class="built_in">len</span>(winner)<span class="number">-1</span>-j] = winner[<span class="built_in">len</span>(winner)<span class="number">-1</span>-j], winner[j]</div><div class="line">			&#125;</div><div class="line">			bc.chainmu.Unlock()</div><div class="line">			_, evs, logs, err := bc.insertChain(winner)</div><div class="line">			bc.chainmu.Lock()</div><div class="line">			events, coalescedLogs = evs, logs</div><div class="line"></div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="keyword">case</span> err != <span class="literal">nil</span>:</div><div class="line">			bc.reportBlock(block, <span class="literal">nil</span>, err)</div><div class="line">			<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> parent *types.Block</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			parent = bc.GetBlock(block.ParentHash(), block.NumberU64()<span class="number">-1</span>)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			parent = chain[i<span class="number">-1</span>]</div><div class="line">		&#125;</div><div class="line">		state, err := state.New(parent.Root(), bc.stateCache)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">		&#125;</div><div class="line">		receipts, logs, usedGas, err := bc.processor.Process(block, state, bc.vmConfig)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			bc.reportBlock(block, receipts, err)</div><div class="line">			<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">		&#125;</div><div class="line">		err = bc.Validator().ValidateState(block, parent, state, receipts, usedGas)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			bc.reportBlock(block, receipts, err)</div><div class="line">			<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">		&#125;</div><div class="line">		proctime := time.Since(bstart)</div><div class="line"></div><div class="line">		status, err := bc.WriteBlockWithState(block, receipts, state)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> i, events, coalescedLogs, err</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">switch</span> status &#123;</div><div class="line">		<span class="keyword">case</span> CanonStatTy:</div><div class="line">			log.Debug(<span class="string">"Inserted new block"</span>, <span class="string">"number"</span>, block.Number(), <span class="string">"hash"</span>, block.Hash(), <span class="string">"uncles"</span>, <span class="built_in">len</span>(block.Uncles()),</div><div class="line">				<span class="string">"txs"</span>, <span class="built_in">len</span>(block.Transactions()), <span class="string">"gas"</span>, block.GasUsed(), <span class="string">"elapsed"</span>, common.PrettyDuration(time.Since(bstart)))</div><div class="line"></div><div class="line">			coalescedLogs = <span class="built_in">append</span>(coalescedLogs, logs...)</div><div class="line">			blockInsertTimer.UpdateSince(bstart)</div><div class="line">			events = <span class="built_in">append</span>(events, ChainEvent&#123;block, block.Hash(), logs&#125;)</div><div class="line">			lastCanon = block</div><div class="line"></div><div class="line">			bc.gcproc += proctime</div><div class="line"></div><div class="line">		<span class="keyword">case</span> SideStatTy:</div><div class="line">			log.Debug(<span class="string">"Inserted forked block"</span>, <span class="string">"number"</span>, block.Number(), <span class="string">"hash"</span>, block.Hash(), <span class="string">"diff"</span>, block.Difficulty(), <span class="string">"elapsed"</span>,</div><div class="line">				common.PrettyDuration(time.Since(bstart)), <span class="string">"txs"</span>, <span class="built_in">len</span>(block.Transactions()), <span class="string">"gas"</span>, block.GasUsed(), <span class="string">"uncles"</span>, <span class="built_in">len</span>(block.Uncles()))</div><div class="line"></div><div class="line">			blockInsertTimer.UpdateSince(bstart)</div><div class="line">			events = <span class="built_in">append</span>(events, ChainSideEvent&#123;block&#125;)</div><div class="line">		&#125;</div><div class="line">		stats.processed++</div><div class="line">		stats.usedGas += usedGas</div><div class="line">		stats.report(chain, i, bc.stateCache.TrieDB().Size())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> lastCanon != <span class="literal">nil</span> &amp;&amp; bc.CurrentBlock().Hash() == lastCanon.Hash() &#123;</div><div class="line">		events = <span class="built_in">append</span>(events, ChainHeadEvent&#123;lastCanon&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>, events, coalescedLogs, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先做一个健康检查，确保要插入的链是有序且相互连接的。接下来通过 <code>bc.engine.VerifyHeaders</code> 调用一致性引擎来验证区块头是有效的。进入 <code>for i, block := range chain</code> 循环后，接收 <code>results</code> 这个 chan，可以获得一致性引擎获得区块头的结果，如果是已经插入的区块，跳过；如果是未来的区块，时间距离不是很长，加入到 <code>futureBlocks</code> 中，否则返回一条错误信息；如果没能找到该区块祖先，但在 <code>futureBlocks</code> 能找到，也加入到 <code>futureBlocks</code> 中。</p>
<p>加入 <code>futureBlocks</code> 的过程结束后，通过 <code>core/state_processor.go</code> 中的 Process 改变世界状态。在返回收据，日志，使用的 Gas 后。通过 <code>bc.Validator().ValidateState</code> 再次验证，通过后，通过 <code>WriteBlockAndState</code> 写入区块以及相关状态到区块链，<code>WriteBlockAndState</code> 我们接下来会详谈。最后，如果我们生成了一个新的区块头，最新的区块头等于 <code>lastCanon</code> 的哈希值，发布一个 <code>ChainHeadEvent</code> 的事件。</p>
<p>现在我们来看看 <code>WriteBlockAndState</code> 是如何写入区块及相关状态到区块链的。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">func (bc *BlockChain) WriteBlockWithState(block *types.Block, receipts []*types.Receipt, state *state.StateDB) (status WriteStatus, err <span class="keyword">error</span>) &#123;</div><div class="line">	ptd := bc.GetTd(block.ParentHash(), block.NumberU64()-1)</div><div class="line">	<span class="keyword">if</span> ptd == nil &#123;</div><div class="line">		<span class="keyword">return</span> NonStatTy, consensus.ErrUnknownAncestor</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">	currentBlock := bc.CurrentBlock()</div><div class="line">	localTd := bc.GetTd(currentBlock.Hash(), currentBlock.NumberU64())</div><div class="line">	externTd := <span class="keyword">new</span>(big.Int).Add(block.Difficulty(), ptd)</div><div class="line">	<span class="keyword">if</span> err := bc.hc.WriteTd(block.Hash(), block.NumberU64(), externTd); err != nil &#123;</div><div class="line">		<span class="keyword">return</span> NonStatTy, err</div><div class="line">	&#125;</div><div class="line">	batch := bc.db.NewBatch()</div><div class="line">	<span class="keyword">if</span> err := WriteBlock(batch, block); err != nil &#123;</div><div class="line">		<span class="keyword">return</span> NonStatTy, err</div><div class="line">	&#125;</div><div class="line">	root, err := state.Commit(bc.chainConfig.IsEIP158(block.Number()))</div><div class="line">	<span class="keyword">if</span> err != nil &#123;</div><div class="line">		<span class="keyword">return</span> NonStatTy, err</div><div class="line">	&#125;</div><div class="line">	triedb := bc.stateCache.TrieDB()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> bc.cacheConfig.Disabled &#123;</div><div class="line">		<span class="keyword">if</span> err := triedb.Commit(root, <span class="keyword">false</span>); err != nil &#123;</div><div class="line">			<span class="keyword">return</span> NonStatTy, err</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		triedb.Reference(root, common.Hash&#123;&#125;)</div><div class="line">		bc.triegc.Push(root, -float32(block.NumberU64()))</div><div class="line"></div><div class="line">		<span class="keyword">if</span> current := block.NumberU64(); current &gt; triesInMemory &#123;</div><div class="line">			header := bc.GetHeaderByNumber(current - triesInMemory)</div><div class="line">			chosen := header.Number.Uint64()</div><div class="line"></div><div class="line">			var (</div><div class="line">				size  = triedb.Size()</div><div class="line">				limit = common.StorageSize(bc.cacheConfig.TrieNodeLimit) * 1024 * 1024</div><div class="line">			)</div><div class="line">			<span class="keyword">if</span> size &gt; limit || bc.gcproc &gt; bc.cacheConfig.TrieTimeLimit &#123;</div><div class="line">				<span class="keyword">if</span> chosen &lt; lastWrite+triesInMemory &#123;</div><div class="line">					<span class="keyword">switch</span> &#123;</div><div class="line">					<span class="keyword">case</span> size &gt;= <span class="number">2</span>*limit:</div><div class="line">						log.Warn(<span class="string">"State memory usage too high, committing"</span>, <span class="string">"size"</span>, size, <span class="string">"limit"</span>, limit, <span class="string">"optimum"</span>, float64(chosen-lastWrite)/triesInMemory)</div><div class="line">					<span class="keyword">case</span> bc.gcproc &gt;= 2*bc.cacheConfig.TrieTimeLimit:</div><div class="line">						log.Info(<span class="string">"State in memory for too long, committing"</span>, <span class="string">"time"</span>, bc.gcproc, <span class="string">"allowance"</span>, bc.cacheConfig.TrieTimeLimit, <span class="string">"optimum"</span>, float64(chosen-lastWrite)/triesInMemory)</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> chosen &gt;= lastWrite+triesInMemory || size &gt;= 2*limit || bc.gcproc &gt;= 2*bc.cacheConfig.TrieTimeLimit &#123;</div><div class="line">					triedb.Commit(header.Root, <span class="keyword">true</span>)</div><div class="line">					lastWrite = chosen</div><div class="line">					bc.gcproc = <span class="number">0</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> !bc.triegc.Empty() &#123;</div><div class="line">				root, number := bc.triegc.Pop()</div><div class="line">				<span class="keyword">if</span> uint64(-number) &gt; chosen &#123;</div><div class="line">					bc.triegc.Push(root, number)</div><div class="line">					<span class="keyword">break</span></div><div class="line">				&#125;</div><div class="line">				triedb.Dereference(root.(common.Hash), common.Hash&#123;&#125;)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> err := WriteBlockReceipts(batch, block.Hash(), block.NumberU64(), receipts); err != nil &#123;</div><div class="line">		<span class="keyword">return</span> NonStatTy, err</div><div class="line">	&#125;</div><div class="line">	reorg := externTd.Cmp(localTd) &gt; 0</div><div class="line">	currentBlock = bc.CurrentBlock()</div><div class="line">	<span class="keyword">if</span> !reorg &amp;&amp; externTd.Cmp(localTd) == 0 &#123;</div><div class="line">		reorg = block.NumberU64() &lt; currentBlock.NumberU64() || (block.NumberU64() == currentBlock.NumberU64() &amp;&amp; mrand.Float64() &lt; <span class="number">0.5</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> reorg &#123;</div><div class="line">		<span class="keyword">if</span> block.ParentHash() != currentBlock.Hash() &#123;</div><div class="line">			<span class="keyword">if</span> err := bc.reorg(currentBlock, block); err != nil &#123;</div><div class="line">				<span class="keyword">return</span> NonStatTy, err</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> err := WriteTxLookupEntries(batch, block); err != nil &#123;</div><div class="line">			<span class="keyword">return</span> NonStatTy, err</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> err := WritePreimages(bc.db, block.NumberU64(), state.Preimages()); err != nil &#123;</div><div class="line">			<span class="keyword">return</span> NonStatTy, err</div><div class="line">		&#125;</div><div class="line">		status = CanonStatTy</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		status = SideStatTy</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> err := batch.Write(); err != nil &#123;</div><div class="line">		<span class="keyword">return</span> NonStatTy, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> status == CanonStatTy &#123;</div><div class="line">		bc.insert(block)</div><div class="line">	&#125;</div><div class="line">	bc.futureBlocks.Remove(block.Hash())</div><div class="line">	<span class="keyword">return</span> status, nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>WriteBlockWithState</code> 将区块以及相关所有的状态写入数据库。首先通过 <code>bc.GetTd(block.ParentHash(), block.NumberU64()-1)</code> 获取待插入区块的总难度，<code>bc.GetTd(bc.currentBlock.Hash(), bc.currentBlock.NumberU64())</code> 计算当前区块的区块链的总难度，<code>externTd := new(big.Int).Add(block.Difficulty(), ptd)</code> 获得新的区块链的总难度。通过 <code>bc.hc.WriteTd(block.Hash(), block.NumberU64(), externTd)</code> 写入区块 hash，高度，对应总难度。然后使用 <code>batch</code> 的方式写入区块的其他数据。插入数据后，判断这个区块的父区块是否为当前区块，如果不是，说明存在分叉，调用 <code>reorg</code> 重新组织区块链。插入成功后，调用 <code>bc.futureBlocks.Remove(block.Hash())</code> 从 <code>futureBlocks</code> 中移除区块。</p>
<p>下面我们来看看 <code>reorg</code> 方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span> <span class="title">reorg</span><span class="params">(oldBlock, newBlock *types.Block)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> oldBlock.NumberU64() &gt; newBlock.NumberU64() &#123;</div><div class="line">		<span class="keyword">for</span> ; oldBlock != <span class="literal">nil</span> &amp;&amp; oldBlock.NumberU64() != newBlock.NumberU64(); oldBlock = bc.GetBlock(oldBlock.ParentHash(), oldBlock.NumberU64()<span class="number">-1</span>) &#123;</div><div class="line">			oldChain = <span class="built_in">append</span>(oldChain, oldBlock)</div><div class="line">			deletedTxs = <span class="built_in">append</span>(deletedTxs, oldBlock.Transactions()...)</div><div class="line"></div><div class="line">			collectLogs(oldBlock.Hash())</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> ; newBlock != <span class="literal">nil</span> &amp;&amp; newBlock.NumberU64() != oldBlock.NumberU64(); newBlock = bc.GetBlock(newBlock.ParentHash(), newBlock.NumberU64()<span class="number">-1</span>) &#123;</div><div class="line">			newChain = <span class="built_in">append</span>(newChain, newBlock)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> oldBlock == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">"Invalid old chain"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> newBlock == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">"Invalid new chain"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">if</span> oldBlock.Hash() == newBlock.Hash() &#123;</div><div class="line">			commonBlock = oldBlock</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		oldChain = <span class="built_in">append</span>(oldChain, oldBlock)</div><div class="line">		newChain = <span class="built_in">append</span>(newChain, newBlock)</div><div class="line">		deletedTxs = <span class="built_in">append</span>(deletedTxs, oldBlock.Transactions()...)</div><div class="line">		collectLogs(oldBlock.Hash())</div><div class="line"></div><div class="line">		oldBlock, newBlock = bc.GetBlock(oldBlock.ParentHash(), oldBlock.NumberU64()<span class="number">-1</span>), bc.GetBlock(newBlock.ParentHash(), newBlock.NumberU64()<span class="number">-1</span>)</div><div class="line">		<span class="keyword">if</span> oldBlock == <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> fmt.Errorf(<span class="string">"Invalid old chain"</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> newBlock == <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> fmt.Errorf(<span class="string">"Invalid new chain"</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(oldChain) &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(newChain) &gt; <span class="number">0</span> &#123;</div><div class="line">		logFn := log.Debug</div><div class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(oldChain) &gt; <span class="number">63</span> &#123;</div><div class="line">			logFn = log.Warn</div><div class="line">		&#125;</div><div class="line">		logFn(<span class="string">"Chain split detected"</span>, <span class="string">"number"</span>, commonBlock.Number(), <span class="string">"hash"</span>, commonBlock.Hash(),</div><div class="line">			<span class="string">"drop"</span>, <span class="built_in">len</span>(oldChain), <span class="string">"dropfrom"</span>, oldChain[<span class="number">0</span>].Hash(), <span class="string">"add"</span>, <span class="built_in">len</span>(newChain), <span class="string">"addfrom"</span>, newChain[<span class="number">0</span>].Hash())</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		log.Error(<span class="string">"Impossible reorg, please file an issue"</span>, <span class="string">"oldnum"</span>, oldBlock.Number(), <span class="string">"oldhash"</span>, oldBlock.Hash(), <span class="string">"newnum"</span>, newBlock.Number(), <span class="string">"newhash"</span>, newBlock.Hash())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> addedTxs types.Transactions</div><div class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(newChain) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</div><div class="line">		<span class="keyword">if</span> err := WriteTxLookupEntries(bc.db, newChain[i]); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> err</div><div class="line">		&#125;</div><div class="line">		addedTxs = <span class="built_in">append</span>(addedTxs, newChain[i].Transactions()...)</div><div class="line">	&#125;</div><div class="line">	diff := types.TxDifference(deletedTxs, addedTxs)</div><div class="line">	<span class="keyword">for</span> _, tx := <span class="keyword">range</span> diff &#123;</div><div class="line">		DeleteTxLookupEntry(bc.db, tx.Hash())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(deletedLogs) &gt; <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">go</span> bc.rmLogsFeed.Send(RemovedLogsEvent&#123;deletedLogs&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(oldChain) &gt; <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">			<span class="keyword">for</span> _, block := <span class="keyword">range</span> oldChain &#123;</div><div class="line">				bc.chainSideFeed.Send(ChainSideEvent&#123;Block: block&#125;)</div><div class="line">			&#125;</div><div class="line">		&#125;()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面提到，<code>reorg</code> 方法用来将新区块链替换本地区块链为规范链。对于老链比新链高的情况，减少老链，让它和新链一样高；否则的话减少新链，待后续插入。潜在的会丢失的交易会被当做事件发布。接着进入一个 for 循环，找到两条链共同的祖先。再将上述减少新链阶段保存的 <code>newChain</code> 一块块插入到链中，更新规范区块链的 key，并且写入交易的查询信息。最后是清理工作，删除交易查询信息，删除日志，并通过 <code>bc.rmLogsFeed.Send</code> 发送消息通知，删除了哪些旧链则通过 <code>bc.chainSideFeed.Send</code> 进行消息通知。</p>
<p>至此，插入区块的操作就完成了。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/core-blockchain%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md" target="_blank" rel="external">core-blockchain源码分析</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区块链区块链，即区块组成的链，不妨先从区块谈起。这一篇我们将着眼于区块链的一些基本操作。在区块链中，区块存储有效信息，在阅读源代码之前，我们应该对区块头，区块体，区块链这些基本的数据结构有所了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cryptocurrency" scheme="http://knarfeh.github.io/tags/cryptocurrency/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="geth" scheme="http://knarfeh.github.io/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>go-ethereum 源码笔记（概览）</title>
    <link href="http://knarfeh.github.io/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88%E6%A6%82%E8%A7%88%EF%BC%89/"/>
    <id>http://knarfeh.github.io/2018/03/10/go-ethereum 源码笔记（概览）/</id>
    <published>2018-03-10T14:34:56.000Z</published>
    <updated>2018-08-18T06:33:37.332Z</updated>
    
    <content type="html"><![CDATA[<p>花了一点时间读以太坊的源代码，内容太多，所以一边看一边写，没想到越写越多，于是想着把笔记整理出来。</p>
<p>源码解读是一件费力不讨好的事情，因为看代码的时候我们看到的是最终解决方案，虽然可以看到 commit 的历史，但我们看不到作者的思路，踩过的坑，而且 geth 的设计文档，功能的相关讨论等信息不像 Kubernetes 那么规范透明，所以我看这些代码的时候很多地方也只是一知半解，欢迎有更多经验的朋友批评指正，不吝赐教，也欢迎有价值的讨论。看了一些书和文章，所以我这也算不上多原创，基本上所有看过的链接都记在 Reference 里面了。有的代码暂时看不懂就只能靠猜了，等待之后的实践中验证想法。尽管如此，对于同样想要阅读 geth 的源代码的人来说总还是有些作用，对于我个人来说整理出来这些文章也是一个总结知识，把点连成面的过程，希望同时能帮到其他人。</p>
<p>geth 版本：master 分支，a1eb9c7d13240fd250866219a502d0cdc9924e06</p>
<a id="more"></a>
<p>这是第一篇，可以作为索引，后续发布其他文章后会不断更新👇</p>
<ul>
<li>go-ethereum 源码笔记（概览）</li>
<li>go-ethereum 源码笔记（基础知识）</li>
<li>go-ethereum 源码笔记（cmd 模块-geth 命令）</li>
<li>go-ethereum 源码笔记（cmd 模块-其他命令）</li>
<li>go-ethereum 源码笔记（core 模块-区块链操作）</li>
</ul>
<h2 id="涉及到的计算机专业知识"><a href="#涉及到的计算机专业知识" class="headerlink" title="涉及到的计算机专业知识"></a>涉及到的计算机专业知识</h2><ul>
<li>网络知识，p2p 网络（Kad 算法） ，rpc 等等</li>
<li>加密学，暂时不需要很深入，除非是像 <a href="http://teahour.fm/2018/07/08/how-to-build-blockchain-from-scratch.html" target="_blank" rel="external">How to build blockchain from scratch?</a> 说的需要构建加密函数相关的库，在大多数的场景下只需要知道加密函数的使用。当然越深入越好，这一块也可以做出创新；安全对于很多行业是命脉，对于区块链来说更是如此。</li>
<li>编译原理，看 EVM 相关的实现时需要知道一些基本概念。</li>
<li>分布式系统原理(一致性算法)</li>
<li>智能合约</li>
<li>数据库(LevelDB)，了解 LSM 的特点，不需要太深入的了解，知道 API 调用即可。当然知道底层原理最好，这块也有改进的空间，微博上的<a href="https://weibo.com/1875401263/GtTacBjm2?filter=hot&amp;root_comment_id=0&amp;type=comment" target="_blank" rel="external">邓草原</a>同学在做这方面的工作，针对区块链的数据特点设计专门的存储引擎，TPS 有不小的提升，不过我还没有细看代码，从讨论来看应该是参考了 Kafka 的存储特点。</li>
<li>一些数据结构<ul>
<li>MPT</li>
<li>DAG</li>
<li>布隆过滤器</li>
<li>…</li>
</ul>
</li>
</ul>
<p>写完了这个系列可能会加个思维导图。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="总体架构图"><a href="#总体架构图" class="headerlink" title="总体架构图"></a>总体架构图</h3><p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/stackexchange-ethereum-block-architecture.jpg" alt="https://i.stack.imgur.com/afWDt.jpg"></p>
<h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p><a href="https://book.douban.com/subject/30199891/" target="_blank" rel="external">以太坊技术详解与实战</a>这本书里介绍了以太坊的分层架构，其中的图片还挺有参考价值的，网络上没有找到原图，所以我自己画了一下：</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/ethereum-leveld-architecture.png" alt="ethereum-leveld-architecture"></p>
<h4 id="底层服务"><a href="#底层服务" class="headerlink" title="底层服务"></a>底层服务</h4><p>底层服务包括 P2P 网络、LevelDB 数据库、密码学算法和分片优化等基础服务。</p>
<h4 id="核心层"><a href="#核心层" class="headerlink" title="核心层"></a>核心层</h4><p>核心层包括区块链、共识算法和以太坊虚拟机等。</p>
<h4 id="顶层应用"><a href="#顶层应用" class="headerlink" title="顶层应用"></a>顶层应用</h4><p>这一层包括 API 接口、智能合约以及去中心化应用。</p>
<h2 id="重要的数据结构"><a href="#重要的数据结构" class="headerlink" title="重要的数据结构"></a>重要的数据结构</h2><h3 id="core-types-block-go-区块的数据结构"><a href="#core-types-block-go-区块的数据结构" class="headerlink" title="/core/types/block.go 区块的数据结构"></a><code>/core/types/block.go</code> 区块的数据结构</h3><p>区块的数据结构在 <code>core/types/block.go</code> 中定义。先混个眼熟吧。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">type Block struct &#123;</div><div class="line">	<span class="selector-tag">header</span>       *Header</div><div class="line">	uncles       []*Header</div><div class="line">	transactions Transactions</div><div class="line">	hash atomic<span class="selector-class">.Value</span></div><div class="line">	size atomic<span class="selector-class">.Value</span></div><div class="line">	<span class="selector-tag">td</span> *big<span class="selector-class">.Int</span></div><div class="line">	ReceivedAt   <span class="selector-tag">time</span><span class="selector-class">.Time</span></div><div class="line">	ReceivedFrom interface&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>重要字段</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td>header 指向 Header 结构（之后会详细说明），header 存储一个区块的基本信息。</td>
</tr>
<tr>
<td>uncles</td>
<td>指向 Header 结构</td>
</tr>
<tr>
<td>transactions</td>
<td>一组 transaction 结构</td>
</tr>
<tr>
<td>hash</td>
<td>当前区块的哈希值</td>
</tr>
<tr>
<td>size</td>
<td>当前区块的大小</td>
</tr>
<tr>
<td>td</td>
<td>当前区块高度</td>
</tr>
<tr>
<td>ReceivedAt</td>
<td>接收时间</td>
</tr>
<tr>
<td>ReceivedFrom</td>
<td>来源</td>
</tr>
</tbody>
</table>
<p>交易组成区块，一个一个区块以单向链表的形式连在一起组成区块链，毋庸置疑，这是最基础的数据结构，在 geth 的源代码中大量用到。</p>
<p>其中 <code>Header</code> 的数据结构定义为：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">type Header struct &#123;</div><div class="line">	ParentHash  common.Hash    `<span class="string">json:</span><span class="string">"parentHash"</span>       <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	UncleHash   common.Hash    `<span class="string">json:</span><span class="string">"sha3Uncles"</span>       <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Coinbase    common.Address `<span class="string">json:</span><span class="string">"miner"</span>            <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Root        common.Hash    `<span class="string">json:</span><span class="string">"stateRoot"</span>        <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	TxHash      common.Hash    `<span class="string">json:</span><span class="string">"transactionsRoot"</span> <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	ReceiptHash common.Hash    `<span class="string">json:</span><span class="string">"receiptsRoot"</span>     <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Bloom       Bloom          `<span class="string">json:</span><span class="string">"logsBloom"</span>        <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Difficulty  *big.Int       `<span class="string">json:</span><span class="string">"difficulty"</span>       <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Number      *big.Int       `<span class="string">json:</span><span class="string">"number"</span>           <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	GasLimit    uint64         `<span class="string">json:</span><span class="string">"gasLimit"</span>         <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	GasUsed     uint64         `<span class="string">json:</span><span class="string">"gasUsed"</span>          <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Time        *big.Int       `<span class="string">json:</span><span class="string">"timestamp"</span>        <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Extra       []<span class="keyword">byte</span>         `<span class="string">json:</span><span class="string">"extraData"</span>        <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	MixDigest   common.Hash    `<span class="string">json:</span><span class="string">"mixHash"</span>          <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Nonce       BlockNonce     `<span class="string">json:</span><span class="string">"nonce"</span>            <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ParentHash</td>
<td>父区块的哈希值</td>
</tr>
<tr>
<td>UncleHash</td>
<td>叔区块的哈希值</td>
</tr>
<tr>
<td>Coinbase</td>
<td>矿工得到奖励的账户，一般是矿工本地第一个账户</td>
</tr>
<tr>
<td>Root</td>
<td>表示当前所有用户状态</td>
</tr>
<tr>
<td>TxHash</td>
<td>本区块所有交易 Hash，即摘要</td>
</tr>
<tr>
<td>ReceiptHash</td>
<td>本区块所有收据 Hash，即摘要</td>
</tr>
<tr>
<td>Bloom</td>
<td>布隆过滤器，用来搜索收据</td>
</tr>
<tr>
<td>Difficulty</td>
<td>该区块难度，动态调整，与父区块和本区块挖矿时间有关。可参考 <code>github.com/ethereum/go-ethereum/consensus/ethash/consensus.go</code> 的 <code>CalcDifficulty</code></td>
</tr>
<tr>
<td>Number</td>
<td>该区块高度</td>
</tr>
<tr>
<td>GasLimit</td>
<td>gas 用量上限，该数值根据父区块 gas 用量调节，如果 <code>parentGasUsed &gt; parentGasLimit * (2/3)</code> ，则增大该数值，反之则减小该数值。可参看 <code>github.com/ethereum/go-ethereum/core/block_validator.go</code> 的 <code>CalcGasLimit</code></td>
</tr>
<tr>
<td>GasUsed</td>
<td>实际花费的 gas</td>
</tr>
<tr>
<td>Time</td>
<td>新区块的出块时间，严格来说是开始挖矿的时间</td>
</tr>
<tr>
<td>Extra</td>
<td>额外数据</td>
</tr>
<tr>
<td>MixDigest</td>
<td>混合哈希，与 nonce 结合使用</td>
</tr>
<tr>
<td>Nonce</td>
<td>加密学中的概念，在基本概念章节中有介绍</td>
</tr>
</tbody>
</table>
<p>它包含区块的属性信息，<code>ParentHash</code> 表示该区块的父区块哈希，我们通过 <code>ParentHash</code> 这个字段将一个一个区块连接起来组成区块链，但实际上我们并不会直接将链整个的存起来，它是以一定的数据结构一块一块存放的，geth 的底层数据库用的是 LevelDB，这是一个 key-value 数据库，要得到父区块时，我们通过 <code>ParentHash</code> 以及其他字符串组成 key，在 LevelDB 中查询该 key 对应的值，就能拿到父区块。</p>
<h3 id="core-blockchain-go-区块链的数据结构"><a href="#core-blockchain-go-区块链的数据结构" class="headerlink" title="/core/blockchain.go 区块链的数据结构"></a>/core/blockchain.go 区块链的数据结构</h3><p><code>core/blockchain.go</code> 的 <code>BlockChain</code> 结构体定义了区块链的数据结构</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">type BlockChain struct &#123;</div><div class="line">	chainConfig *params<span class="selector-class">.ChainConfig</span></div><div class="line">	cacheConfig *CacheConfig</div><div class="line"></div><div class="line">	db     ethdb<span class="selector-class">.Database</span></div><div class="line">	triegc *prque<span class="selector-class">.Prque</span></div><div class="line">	gcproc <span class="selector-tag">time</span><span class="selector-class">.Duration</span></div><div class="line"></div><div class="line">	hc            *HeaderChain</div><div class="line">	rmLogsFeed    event<span class="selector-class">.Feed</span></div><div class="line">	chainFeed     event<span class="selector-class">.Feed</span></div><div class="line">	chainSideFeed event<span class="selector-class">.Feed</span></div><div class="line">	chainHeadFeed event<span class="selector-class">.Feed</span></div><div class="line">	logsFeed      event<span class="selector-class">.Feed</span></div><div class="line">	scope         event<span class="selector-class">.SubscriptionScope</span></div><div class="line">	genesisBlock  *types<span class="selector-class">.Block</span></div><div class="line"></div><div class="line">	mu      sync<span class="selector-class">.RWMutex</span></div><div class="line">	chainmu sync<span class="selector-class">.RWMutex</span></div><div class="line">	procmu  sync<span class="selector-class">.RWMutex</span></div><div class="line"></div><div class="line">	checkpoint       int</div><div class="line">	currentBlock     atomic<span class="selector-class">.Value</span></div><div class="line">	currentFastBlock atomic<span class="selector-class">.Value</span></div><div class="line"></div><div class="line">	stateCache   state<span class="selector-class">.Database</span></div><div class="line">	bodyCache    *lru<span class="selector-class">.Cache</span></div><div class="line">	bodyRLPCache *lru<span class="selector-class">.Cache</span></div><div class="line">	blockCache   *lru<span class="selector-class">.Cache</span></div><div class="line">	futureBlocks *lru<span class="selector-class">.Cache</span></div><div class="line"></div><div class="line">	quit    chan struct&#123;&#125;</div><div class="line">	running int32</div><div class="line">	procInterrupt int32</div><div class="line">	wg            sync<span class="selector-class">.WaitGroup</span></div><div class="line"></div><div class="line">	engine    consensus<span class="selector-class">.Engine</span></div><div class="line">	processor Processor</div><div class="line">	validator Validator</div><div class="line">	vmConfig  vm<span class="selector-class">.Config</span></div><div class="line"></div><div class="line">	badBlocks *lru<span class="selector-class">.Cache</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>UncleHash</code> 是 <code>Block</code> 结构体成员 <code>uncles</code> 的 RLP 哈希值，<code>uncles</code> 是一个 <code>Headers</code> 数组，关于叔区块，可以查阅以太坊的<a href="https://github.com/ethereum/wiki/wiki/Design-Rationale#uncle-incentivization" target="_blank" rel="external">设计原理</a>。在下一篇 <a href="#TODO">go-ethereum 源码笔记（基础知识）</a> 会详细介绍叔区块。</p>
<p>Block 对象中还有一个比较重要的数据结构，那就是 <code>Transaction</code>，它是交易相关逻辑的基础。</p>
<h3 id="core-types-transaction-go-交易的数据结构"><a href="#core-types-transaction-go-交易的数据结构" class="headerlink" title="/core/types/transaction.go 交易的数据结构"></a><code>/core/types/transaction.go</code> 交易的数据结构</h3><p>交易的数据结构</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">type Transaction struct &#123;</div><div class="line">	data txdata</div><div class="line">	<span class="comment">// caches</span></div><div class="line">	hash atomic.Value</div><div class="line">	size atomic.Value</div><div class="line">	from atomic.Value</div><div class="line">&#125;</div><div class="line"></div><div class="line">type txdata struct &#123;</div><div class="line">	AccountNonce uint64          `<span class="string">json:</span><span class="string">"nonce"</span>    <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Price        *big.Int        `<span class="string">json:</span><span class="string">"gasPrice"</span> <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	GasLimit     uint64          `<span class="string">json:</span><span class="string">"gas"</span>      <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Recipient    *common.Address `<span class="string">json:</span><span class="string">"to"</span>       <span class="string">rlp:</span><span class="string">"nil"</span>`</div><div class="line">	Amount       *big.Int        `<span class="string">json:</span><span class="string">"value"</span>    <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	Payload      []<span class="keyword">byte</span>          `<span class="string">json:</span><span class="string">"input"</span>    <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line"></div><div class="line">	V *big.Int `<span class="string">json:</span><span class="string">"v"</span> <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	R *big.Int `<span class="string">json:</span><span class="string">"r"</span> <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line">	S *big.Int `<span class="string">json:</span><span class="string">"s"</span> <span class="string">gencodec:</span><span class="string">"required"</span>`</div><div class="line"></div><div class="line">	Hash *common.Hash `<span class="string">json:</span><span class="string">"hash"</span> <span class="string">rlp:</span><span class="string">"-"</span>`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转账的定义中只有转入方，转出方的地址没有直接暴露。每一笔转账都有独立的 Price 和 GasLimit，这是 Ethereum 的安全保护策略，是一个值得称赞的设计，如果你对这个不熟悉，请查阅：<a href="https://github.com/ethereum/wiki/wiki/Glossary" target="_blank" rel="external">wiki/Glossary</a>，在之后的文章中也会有介绍。</p>
<h3 id="geth-目录结构简述"><a href="#geth-目录结构简述" class="headerlink" title="geth 目录结构简述"></a>geth 目录结构简述</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">accounts        实现以太坊账户管理</div><div class="line"><span class="keyword">build </span>          编译和构建的一些脚本和配置</div><div class="line">cmd             命令行工具，又分了很多的命令行工具，下面会一个一个介绍</div><div class="line">    abigen      将以太坊智能合约定义转换为类型安全的 Go 或 <span class="keyword">Java </span>包的源码转换器</div><div class="line">    <span class="keyword">bootnode	</span>启动一个用于网络发现的节点</div><div class="line">    evm         以太坊虚拟机的开发工具，用来提供一个可配置的，受隔离的代码调试环境</div><div class="line">    faucet		以太坊 faucet 测试网络</div><div class="line">    geth        以太坊命令行客户端，最重要的一个工具</div><div class="line">    p2psim      提供了一个工具来模拟 p2p 的 API</div><div class="line">    puppeth     创建一个新的以太坊网络的向导</div><div class="line">    rlpdump     提供了一个 RLP 数据的格式化输出</div><div class="line">    <span class="keyword">swarm </span>      <span class="keyword">swarm </span>网络的接入点</div><div class="line">    util        提供了一些公共的工具</div><div class="line">    wnode       这是一个简单的 Whisper 节点。它可以用作独立的引导节点。此外可以用于不同的测试和诊断目的</div><div class="line">common      	提供了一些公共的工具类</div><div class="line">consensus       提供了以太坊的一些共识算法，比如 ethhash, clique(proof-of-authority)</div><div class="line">console         与终端交互相关的代码</div><div class="line">containers		Docker 容器相关的代码</div><div class="line">contracts		以太坊域名服务，票据支付方案</div><div class="line">core            以太坊的核心数据结构和算法(虚拟机，状态，区块链，布隆过滤器)</div><div class="line">crypto          加密和 hash 算法</div><div class="line">dashboard		以太坊后台管理 UI</div><div class="line">eth             实现了以太坊的协议</div><div class="line">ethclient       提供了以太坊的 RPC 客户端</div><div class="line">ethdb           封装 geth 的数据库(包括实际使用的 Leveldb 和供测试使用的内存数据库)</div><div class="line">ethstats        提供网络状态的报告</div><div class="line">event           处理实时的事件</div><div class="line">les             实现了以太坊的轻量级协议子集</div><div class="line">light           为以太坊轻量级客户端提供按需检索的功能</div><div class="line">log             提供对人机都友好的日志信息</div><div class="line">metrics         提供磁盘计数器</div><div class="line">miner           提供以太坊的区块创建和挖矿</div><div class="line">mobile          移动端使用的一些 warpper</div><div class="line">node            以太坊的多种类型的节点</div><div class="line">p2p             以太坊 p2p 网络协议</div><div class="line">rlp             以太坊编码算法</div><div class="line">rpc             远程方法调用</div><div class="line"><span class="keyword">swarm </span>          <span class="keyword">swarm </span>网络</div><div class="line">tests           测试</div><div class="line">trie            实现以太坊中的默克尔帕特里夏树</div><div class="line">whisper         提供了 whisper 节点的协议</div></pre></td></tr></table></figure>
<h2 id="从编译源代码开始"><a href="#从编译源代码开始" class="headerlink" title="从编译源代码开始"></a>从编译源代码开始</h2><p>按照官方文档的建议设置好开发环境，在 go-ethereum 执行 <code>make build</code> 之后，我们可以在 build/bin 目录下找到 abigen, ethkey 等等可执行文件，实际上这些文件的入口函数都在 cmd 目录下，接下来的文章里我们会逐一介绍这些命令。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://bitcoin.org/en/developer-documentation" target="_blank" rel="external">bitcoin developer documentation</a></li>
<li><a href="lilymoana.github.io/ethereum_theory.html">以太坊工作原理概述</a></li>
<li><a href="http://ibloodline.com/articles/2018/02/05/go-ethereum.html" target="_blank" rel="external">go-ethereum 源码解读（一）</a></li>
<li><a href="https://ethereum.github.io/yellowpaper/paper.pdf" target="_blank" rel="external">ethereum 黄皮书</a></li>
<li><a href="https://ethereum.gitbooks.io/frontier-guide/content/index.html" target="_blank" rel="external">Ethereum Frontier Guide</a></li>
<li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis" target="_blank" rel="external">go-ethereum-code-analysis</a></li>
<li><a href="https://github.com/libp2p/specs" target="_blank" rel="external">libp2p/specs</a></li>
<li><a href="https://github.com/wugang33/go-ethereum-code-analysis/blob/master/go-ethereum%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md" target="_blank" rel="external">go ethereum 目录大概介绍</a></li>
<li><a href="https://book.douban.com/subject/30199891/" target="_blank" rel="external">以太坊技术详解与实战</a></li>
<li><a href="https://github.com/ethereum/wiki/wiki/Design-Rationale" target="_blank" rel="external">以太坊设计原理</a> ，非常重要，建议多读几遍</li>
<li><a href="https://github.com/ethereum/pydevp2p" target="_blank" rel="external">ethereum/pydevp2p</a></li>
<li><a href="https://github.com/Jeiwan/blockchain_go" target="_blank" rel="external">Jeiwan/blockchain_go</a></li>
<li><a href="https://ethereum.stackexchange.com/questions/268/ethereum-block-architecture/757" target="_blank" rel="external">Ethereum block architecture</a></li>
<li><a href="https://www.reddit.com/r/ethereum/" target="_blank" rel="external">Ethereum reddit</a></li>
<li><a href="https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369" target="_blank" rel="external">How does ethereum work anyway</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了一点时间读以太坊的源代码，内容太多，所以一边看一边写，没想到越写越多，于是想着把笔记整理出来。&lt;/p&gt;
&lt;p&gt;源码解读是一件费力不讨好的事情，因为看代码的时候我们看到的是最终解决方案，虽然可以看到 commit 的历史，但我们看不到作者的思路，踩过的坑，而且 geth 的设计文档，功能的相关讨论等信息不像 Kubernetes 那么规范透明，所以我看这些代码的时候很多地方也只是一知半解，欢迎有更多经验的朋友批评指正，不吝赐教，也欢迎有价值的讨论。看了一些书和文章，所以我这也算不上多原创，基本上所有看过的链接都记在 Reference 里面了。有的代码暂时看不懂就只能靠猜了，等待之后的实践中验证想法。尽管如此，对于同样想要阅读 geth 的源代码的人来说总还是有些作用，对于我个人来说整理出来这些文章也是一个总结知识，把点连成面的过程，希望同时能帮到其他人。&lt;/p&gt;
&lt;p&gt;geth 版本：master 分支，a1eb9c7d13240fd250866219a502d0cdc9924e06&lt;/p&gt;
    
    </summary>
    
    
      <category term="cryptocurrency" scheme="http://knarfeh.github.io/tags/cryptocurrency/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="geth" scheme="http://knarfeh.github.io/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>go-ethereum 源码笔记（基础知识）</title>
    <link href="http://knarfeh.github.io/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/"/>
    <id>http://knarfeh.github.io/2018/03/10/go-ethereum 源码笔记（基础知识）/</id>
    <published>2018-03-10T14:34:56.000Z</published>
    <updated>2018-08-18T07:14:03.552Z</updated>
    
    <content type="html"><![CDATA[<p>本篇将梳理以太坊的基本概念，说明一些值得注意的地方，这里不会讲解比特币的原理，代码，但会介绍以太坊与比特币的差异，所以最好看过比特币的论文，对比特币的基本原理、实现有所了解。这一篇将以太坊的白皮书作为重要参考，可以看做是以太坊白皮书的概述。以太坊的白皮书是一个非常好的学习资料，它在介绍以太坊前分析了比特币存在的问题，因此我们可以通过这份白皮书了解整个加密货币的生态。</p>
<a id="more"></a>
<h2 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h2><h3 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h3><ul>
<li>简单性</li>
<li>普遍性</li>
<li>模块化</li>
<li>敏捷性</li>
<li>不歧视，非审查</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>见上一篇 <a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88%E6%A6%82%E8%A7%88%EF%BC%89/" target="_blank" rel="external">go-ethereum 源码笔记（概览）</a></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><p>智能合约是以太坊与比特币最大的不同。智能合约是不可篡改的合同，它运行在由以太坊组成的分布式计算机上，由一段支持图灵完备的程序实现。</p>
<p><strong>初学</strong>智能合约的最佳资料：<a href="https://cryptozombies.io/" target="_blank" rel="external">cryptozombies</a></p>
<p>智能合约与一般的程序有些不同：</p>
<ul>
<li>Address 类型可以定位用户，定位合约的代码</li>
<li>语言内嵌框架支持支付，所以提供了一些如 payable 的关键字，在语言层面支持支付</li>
<li>使用区块链作为存储</li>
<li>运行环境是去中心化的网络，比较强调合约或函数执行的调用方式。</li>
<li>一旦出现异常，所有的执行都会回撤，合约的执行具有原子性</li>
</ul>
<p>有四种专用语言可以写智能合约，Solidity，Serpent，Mutan，LLL。</p>
<h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><h5 id="Solidity"><a href="#Solidity" class="headerlink" title="Solidity"></a>Solidity</h5><p>受 Javascript 启发。</p>
<p>是以太坊的首选语言，语法接近 Javascript，它是一种面向对象的语言，易于被掌握和使用，由于语法与 Javascript 相近，并且学习门栏相对较低，目前是使用人数最多的智能合约开发语言。编译器用 C++ 实现。</p>
<p>项目主页是：<a href="https://github.com/ethereum/solidity" target="_blank" rel="external">ethereum/solidity</a></p>
<h5 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h5><p>受 Python 启发。兼顾底层语言效率和良好编程风格的同时尽可能追求简洁，加入了一些针对合约编程的特性。编译器用 C++ 实现。</p>
<p>项目主页是：<a href="https://github.com/ethereum/serpent" target="_blank" rel="external">ethereum/serpent</a></p>
<h5 id="Mutan"><a href="#Mutan" class="headerlink" title="Mutan"></a>Mutan</h5><p>受 Golang 启发。Golang 实现，2015年就被废弃了。</p>
<p>项目主页是：<a href="https://github.com/obscuren/mutan" target="_blank" rel="external">obscuren/mutan</a></p>
<h5 id="LLL-Lisp-Like-Language"><a href="#LLL-Lisp-Like-Language" class="headerlink" title="LLL(Lisp Like Language)"></a>LLL(Lisp Like Language)</h5><p>受 Lisp 启发。</p>
<h4 id="特征-来自知识星球-区块链学习小组-的讨论"><a href="#特征-来自知识星球-区块链学习小组-的讨论" class="headerlink" title="特征 (来自知识星球 区块链学习小组 的讨论)"></a>特征 (来自知识星球 <a href="https://t.zsxq.com/fiauZZJ" target="_blank" rel="external">区块链学习小组</a> 的讨论)</h4><ul>
<li>自治 一旦启动，不受干预</li>
<li>自足 程序自主控制其计算涉及的资源，有权限调配参与者的资金，财产</li>
<li>去中心化 不依赖某个单独的服务器，由分布式网络的节点共同支持运行</li>
</ul>
<h4 id="DApp-的优势"><a href="#DApp-的优势" class="headerlink" title="DApp 的优势"></a>DApp 的优势</h4><ul>
<li>DApp 大多为开源项目，公开透明</li>
<li>去中心化</li>
<li>具有激励机制</li>
<li>具有共识协议</li>
</ul>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul>
<li>信用卡的定期扣款(按月订阅的自动扣款)</li>
<li>飞机延误险(各类保险)</li>
<li>ICO</li>
<li>…</li>
</ul>
<h3 id="EVM-高级语言"><a href="#EVM-高级语言" class="headerlink" title="EVM 高级语言"></a>EVM 高级语言</h3><p>以太坊实现了一个叫做 Ethereum Virtual Machine 的运行时环境，类似于 JVM，它的主要工作是执行智能合约的字节码。</p>
<h3 id="账户系统"><a href="#账户系统" class="headerlink" title="账户系统"></a>账户系统</h3><p>以太坊中有两类账户，外部账户和合约账户，两类账户对于 EVM 来说没有区别，每个账户都有一个与之关联的账户状态和一个20字节的地址，都可以存储以太币。</p>
<p>外部账户：由私钥控制，没有代码与之关联，地址由公钥决定。私钥可用于对交易签名从而主动向其他账户发起交易（transaction）进行消息传递。</p>
<p>合约账户：由合约代码控制，有代码与之关联，其地址由合约创建者的地址和该地址发出过的交易数量 nonce 共同决定。不能主动向其他账户发起交易，但可以『响应』其他账户进行消息调用（message call）。</p>
<p>外部账户之间的消息传递是价值转移的过程，外部账户到合约账户的交易或合约账户到合约账户的消息会激发合约账户代码的执行，允许它执行如转移代币，写入内部存储，执行运算，创建合约等各种操作。</p>
<p>不论账户类型，账户状态都包含以下四个字段：</p>
<ul>
<li>nonce：由账户发出的交易数及创建的合约数量决定。</li>
<li>Balance：余额，账户拥有以太币数量，单位为 Wei，1Ether=10^18Wei。</li>
<li>storageRoot：存储根节点，账户内容的 Merkle Patricia 树根节点的哈希编码。</li>
<li>codeHash：代码哈希，与账户关联的 EVM 代码的哈希值，外部账户的 codeHash 为一个空字符串的哈希，创建后不可更改。状态数据库中包含所有代码片段哈希, 以便后续使用。</li>
</ul>
<h3 id="Gas-的设计"><a href="#Gas-的设计" class="headerlink" title="Gas 的设计"></a>Gas 的设计</h3><p>以太坊是一个能够运行智能合约的去中心化平台，它提供了一个以太坊虚拟机，简称 EVM，开发者可以在上面开发各种应用，而且它是图灵完备的，这意味着我们写的智能合约是可以运行死循环的。要知道，『不存在这样一个程序，它能够检测任何程序在给定输入上是否会结束』，这称为图灵停机问题。以太坊用一个很精彩的设计来解决这个问题，这就是 Gas。Gas 的设计基于这样一个想法：执行程序应该是消耗资源的，每一步操作，ADD 也好，DIV 也好，都应该消耗不同程度的资源，资源提前消耗完了，就强行终止程序。总的来说，Gas 是以太坊中对所有活动进行消耗资源计量的单位，包括但不限于：转账，合约创建，合约指令执行，扩展内存。Gas 是一个浮动的量，每一笔交易可以自行指定 Gas 价格(以以太币计算)，价格越高，矿工将你的交易打包进区块的优先级就越高。最终，Gas 的消耗等于消耗的 Gas 数量乘以 Gas 价格，这笔钱将奖励给矿工。交易完成后，剩余的 Gas 以购买时的价格退回到交易发送者账户，若交易过程中发生 Gas 不足异常(out-of-gas, OOG)，交易会被当做无效交易，已消耗 Gas 不会退回，仍作为矿工贡献计算资源的奖励。</p>
<p>更多细节请查阅：<a href="https://github.com/ethereum/wiki/wiki/Design-Rationale#gas-and-fees" target="_blank" rel="external">wiki/Design-Rationale#gas-and-fees</a></p>
<h3 id="世界状态"><a href="#世界状态" class="headerlink" title="世界状态"></a>世界状态</h3><p>世界状态是地址(160位标示符)和账户状态(序列化为 RLP 的数据结构)间的映射，区块链不直接存储世界状态，而是在区块头中存储相关 Merkle Patricia 树根节点的哈希值。</p>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>日志是 EVM 提供的一项功能。开发者可以在合约代码里记录各种事件产生的日志，这些日志可以帮助开发者调试代码，或者作为在区块链上发生交易的证据。</p>
<h3 id="各版本特性"><a href="#各版本特性" class="headerlink" title="各版本特性"></a>各版本特性</h3><ul>
<li>Frontier（边境）2015年7月发布，以太坊的第一个版本，只有命令行界面，主要使用者是开发者</li>
<li>Homestead（家园）2016年3月发布，第一个生产环境版本，加快了交易速度，增加图形界面，让普通用户也可以使用以太坊的功能</li>
<li>Metropolis（大都会）2017年10月发布，这个阶段分两个版本，先是拜占庭，2017年10月发布，然后是君士坦丁堡，预计2018年发布，增加浏览器，应用商店的特性，使用更方便，可以安装插件实现更多功能。更轻量、更快速、更安全。</li>
<li>Serenity（宁静）时间待定，使用 PoS，使用 Casper 共识算法。</li>
</ul>
<h2 id="以太坊和比特币的差异"><a href="#以太坊和比特币的差异" class="headerlink" title="以太坊和比特币的差异"></a>以太坊和比特币的差异</h2><h3 id="理念不同"><a href="#理念不同" class="headerlink" title="理念不同"></a>理念不同</h3><p>比特币想要实现的是电子现金系统，而以太坊想要实现的是图灵完备的智能合约平台。</p>
<h3 id="智能合约-VS-Script"><a href="#智能合约-VS-Script" class="headerlink" title="智能合约 VS Script"></a>智能合约 VS Script</h3><p>比特币协议本身也是可以实现智能协议的。在比特币中，有一个交易脚本语言，它是一种基于栈的执行语言，包含基本算数计算、基本逻辑（if 等）、报错及返回结果和一些加密指令，但不支持循环。</p>
<p>根据比特币协议的实现，在花费 UTXO 前，必须满足脚本的要求，即满足解锁 UTXO脚本，用私钥匹配解锁脚本（Signature script），以保证交易只能花费自己的比特币，即交易的输入，交易的输入指向的是锁定脚本（PubKey script），它确保签名能匹配输出地址。显然我们可以应用更复杂的脚本实现智能合约，没有循环也可以用重复的代码实现，显然这样的方法太糟糕了。</p>
<p>比特币的脚本语言存在的几处限制在 Vitalik 最初发布的白皮书里也有描述：</p>
<ul>
<li>缺乏图灵完整性，不支持循环语句</li>
<li>价值盲区，无法对 UTXO 进行精细化控制</li>
<li>不能保存状态，UTXO 只有用完和没用两种状态，没法实现多阶段期权合约</li>
<li>区块链盲区，UTXO 中没有区块链数据(随机数，时间戳，前一个区块哈希)，不能挖掘随机性的潜在价值</li>
</ul>
<p>更具体的描述可以查看<a href="https://github.com/knarfeh/papers/blob/master/Blockchain/Ethereum/Ethereum_white_paper-a_next_generation_smart_contract_and_decentralized_application_platform-vitalik-buterin.pdf" target="_blank" rel="external">这个地址</a>。</p>
<p>我们知道区块链的本质是一个分布式的公共数据库，它最早用来包括数字交易记录，这也是它到目前为止最为广泛的应用，区块链的特别之处在于，它不需要任何中央权威机构来维护，它是一个不需要第三方的 p2p 的框架。以太坊的智能合约让它与比特币又有了本质的不同，把区块链看做分布式数据库，那么以太坊就是一个能够能够在数据库上运行分布式应用的超级计算机，是智能合约让以太坊和比特币有了本质的不同，它是代码和数据（状态）的集合。</p>
<p>比特币的脚本有诸多限制，能够编写的程序有限，而以太坊的智能合约是图灵完备的，它非常适合于对信任、安全和持久性要求较高的应用场景，如：数字货币、数字资产、投票，保险、金融应用、预测市场，产权所有权管理、物联网等等。目前来说，除了数字货币之外，真正落地的应用还不多，因为区块链还存在诸多问题，比如亟需解决的交易性能问题，因此隔离见证，闪电网络，侧链等技术飞速发展，各种公链也针对某些问题提出自己的方案，这些既是挑战，也是机遇。</p>
<h3 id="Accounts-VS-UTXO"><a href="#Accounts-VS-UTXO" class="headerlink" title="Accounts VS UTXO"></a>Accounts VS UTXO</h3><p>比特币用 UTXO 方法计算某账户的余额，UTXO 即 Unspent Transaction Outputs。这个概念稍稍有点复杂，这里只做简单介绍。比特币整个系统的状态由未花费交易输出组成。每个 UTXO 都有拥有者和自身的价值属性，一笔交易会消费若干个 UTXO，同时也会生成若干个新的 UTXO，UTXO 有下面几点约束：</p>
<ol>
<li>每个被引用的输入必须有效，且未被使用过</li>
<li>交易的签名必须与每笔输入的所有者签名匹配</li>
<li>输入的总值必须等于或大于输出的总值</li>
</ol>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/en-transaction-propagation.png" alt="transaction of bitcoin, https://bitcoin.org/img/dev/en-transaction-propagation.svg"></p>
<p>个人认为理解 UTXO 的最佳方式是读这个<a href="https://github.com/Jeiwan/blockchain_go" target="_blank" rel="external">仓库</a>的源代码，这个作者写了7篇文章，实现了一个比特币的原型，Bitcoin Core 的代码是 C++ 写的，且代码复杂，年代久远，这个仓库使用 Golang，简单易懂，UTXO 的实现在 <a href="https://github.com/Jeiwan/blockchain_go/compare/part_3...part_4#files_bucket" target="_blank" rel="external">Transactions 1</a>。感兴趣的朋友可以进一步阅读。</p>
<p>UTXO 的好处是（来自以太坊的维基）：</p>
<ol>
<li>匿名性更好，一个用户接收到一笔转账，这些转账的输入可以有多个私钥形成，但其实这些输入可以是同一个人的，这样能保证一定程度的匿名性。</li>
<li>UTXO 是无状态的，更具扩展性。</li>
</ol>
<p>以太坊没有采用 UTXO 的方式进行记账，而是采用了传统金融的记账方式–使用账户，每笔交易只有一个输入，一个输出，一个签名。使用单独的账户系统的好处是（来自以太坊维基）：</p>
<ol>
<li>节省大量存储空间。每笔交易只有一个输入和一个输出。</li>
<li>可替换性。可操控性可能更好一些，使用账户模型可以更轻松地实现黑名单这样的模式。</li>
<li>编码上更简单。获取账户余额时，只需要一个查询，而比特币需要整合指定地址所拥有的所有 UTXO 的总值。</li>
<li>可以更轻松地实现轻客户端。</li>
</ol>
<p>Vitalik 在一篇<a href="https://medium.com/@ConsenSys/thoughts-on-utxo-by-vitalik-buterin-2bb782c67e53" target="_blank" rel="external">博客</a>中还谈到 UTXO 可能引发拒绝服务漏洞。而且基于 UTXO 的模型与有状态的智能合约不太契合。以太坊最终选择使用账户模型。</p>
<p>以太坊使用状态（state）的概念来存储一系列账户，每个账户有自己的余额以及特定数据（代码或内部存储），如果交易发起方有足够余额支付交易费用，则交易有效，发起方账户扣除相应金额，接收账户增加余额。账户还用于智能合约的创建和执行，可以通过转账来触发接收账户对应的代码的执行，该账户的内部存储可能会发生变化，同时也可以创建额外信息发给其他账户，触发新的交易。从这一点可以看到，dapp 需要跟用户状态进行复杂的交互，通过 UTXO 实现会比较难满足需求。</p>
<h3 id="区块链设计的不同"><a href="#区块链设计的不同" class="headerlink" title="区块链设计的不同"></a>区块链设计的不同</h3><h4 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h4><p>比特币的区块包括区块头和区块体两部分，区块头封装了前一个区块的哈希值、时间戳，随机数，默克尔树根值和当前区块的哈希值，区块体中包括交易计数和交易详情。区块结构如下图（摘自 Bitcoin 白皮书）：</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/bitcoin_block_from_bitcoinpaper.png" alt="bitcoin_block"></p>
<h4 id="以太坊-1"><a href="#以太坊-1" class="headerlink" title="以太坊"></a>以太坊</h4><p>以太坊在比特币区块链基础上做了一些调整，区块主要由区块头、交易列表和叔区块头三部分组成。区块头包括父区块的哈希值、叔区块的哈希值、状态树根哈希值、交易树根哈希值、收据树根哈希值、时间戳、随机数。</p>
<h3 id="PoW-机制的不同"><a href="#PoW-机制的不同" class="headerlink" title="PoW 机制的不同"></a>PoW 机制的不同</h3><p>PoW，Proof of Work 的缩写，即工作量证明，又称挖矿，目前比特币，以太坊都基于 PoW 算法实现共识机制，即根据挖矿的贡献决定货币的分配。</p>
<h4 id="比特币-1"><a href="#比特币-1" class="headerlink" title="比特币"></a>比特币</h4><p>比特币的 PoW 的过程，需要不断调整 Nonce 值，对区块头做双重 SHA256 哈希运算，使得结果满足给定数量前导0的哈希值的过程。其中前导0的个数，取决于挖矿难度，前导 0 的个数越多，挖矿难度越大。</p>
<h4 id="以太坊-2"><a href="#以太坊-2" class="headerlink" title="以太坊"></a>以太坊</h4><p>以太坊的 PoW 算法可以表示为如下公式：$RAND(h, n) &lt;= M/d$<br>其中 $RAND()$ 表示一个概念函数，代表一系列的复杂运算，h 和 n 为输入，即区块 Header 的哈希、以及 Header 中的 Nonce。M 表示一个极大的数，此处使用 $2^{256}-1$。d 为区块难度，即Header 中的 Difficulty。在 h 和 n 确定的情况下，d 越大，挖矿难度越大。需不断变更 Nonce，使$RAND(h, n)$ 满足 $RAND(h, n) &lt;= M / d$ 完成 PoW。</p>
<p>需要注意的是以太坊目前的 PoW 只是临时的，未来将会是 PoS 的形式，到时候不会再需要耗费大量电力进行挖矿。</p>
<h3 id="挖矿难度更新"><a href="#挖矿难度更新" class="headerlink" title="挖矿难度更新"></a>挖矿难度更新</h3><h4 id="比特币-2"><a href="#比特币-2" class="headerlink" title="比特币"></a>比特币</h4><p>比特币每创建2016个块后将计算新的难度，此后的2016个块使用新的难度。计算步骤如下：</p>
<ol>
<li>找到前2016个块的第一个块，计算生成这2016个块花费的时间。<br>即最后一个块的时间与第一个块的时间差。时间差不小于3.5天，不大于56天。</li>
<li>计算前2016个块的难度总和，即单个块的难度x总时间。</li>
<li>计算新的难度，即2016个块的难度总和/14天的秒数，得到每秒的难度值。</li>
<li>要求新的难度，难度不低于参数定义的最小难度。</li>
</ol>
<h4 id="以太坊-3"><a href="#以太坊-3" class="headerlink" title="以太坊"></a>以太坊</h4><p>以太坊每次挖矿都需计算当前区块难度。按版本不同有三种计算难度的规则，分别为：<code>calcDifficultyByzantium</code>（Byzantium 版本）、<code>calcDifficultyHomestead</code>（Homestead 版本）、<code>calcDifficultyFrontier</code>（Frontier 版本）。以 <code>calcDifficultyHomestead</code> 为例。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">block_diff </span>= parent_diff + 难度调整 + 难度炸弹</div><div class="line">难度调整 = parent_diff // <span class="number">2048</span> * MAX(<span class="number">1</span> - (<span class="keyword">block_timestamp </span>- parent_timestamp) // <span class="number">10</span>, -<span class="number">99</span>)</div><div class="line">难度炸弹 = INT(<span class="number">2</span>**((<span class="keyword">block_number </span>// <span class="number">100000</span>) - <span class="number">2</span>))</div></pre></td></tr></table></figure>
<p>以太坊的区块难度以单个区块为单位进行调整，所以可以比较快地适应算力变化，难度炸弹也是一个很有意思的设计，难度炸弹是指数级增长的，到某个阶段矿工会因为无利可图自动退场，这时 PoS 也应该成熟了，这对于矿工来说是一个预防针。</p>
<h3 id="奖励机制"><a href="#奖励机制" class="headerlink" title="奖励机制"></a>奖励机制</h3><h4 id="比特币-3"><a href="#比特币-3" class="headerlink" title="比特币"></a>比特币</h4><p>在比特币的设计中，最初每挖出一个区块会奖励50个 BTC，每挖出21万个，奖励就会减半，第1-210000个区块，每块奖励50btc，第210001-420000个区块，每块奖励25btc……以此类推。</p>
<p>因此 BTC 的总量为：210000×50(1+0.5+0.25+0.125+……)=2100万</p>
<h4 id="以太坊-4"><a href="#以太坊-4" class="headerlink" title="以太坊"></a>以太坊</h4><p>以太坊提出了一个叔块的概念。叔块是指没能成为主链的，但在后面的区块放入了 uncles 字段中的区块。</p>
<p>相比于比特币，以太坊对叔块也有奖励，为什么这么做呢，我们知道以太坊的出块时间是15秒左右，相比于比特币，以太坊更容易出现临时分叉和孤块，因为出块时间比较短，区块在整个网络中也比较难传播，对于网速比较慢的矿工就不占优势了，因此挖矿的时候，对于叔块也是有奖励的。</p>
<p>我们知道以太坊是一个运行智能合约的去中心化的平台，它有一个以太坊虚拟机（Ethereum Virtual Machine，常用缩写 EVM）的概念，EVM 是就像一个超级计算机，它是图灵完备的，写程序的时候可能会出现死循环，而智能合约应该避免这种情况，这引出一个<a href="https://zh.wikipedia.org/zh-hans/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98" target="_blank" rel="external">停机问题</a>，简单来说就是不存在能够检测程序进入了死循环的方法，以太坊提出了一种设计解决这个问题，EVM 规定了每条指令都会消耗一定的 Gas，指令越复杂，消耗的 Gas 越多，程序运行前是有一个消耗 Gas 的上限的，运行过程中 Gas 消耗完了，无论程序有没有执行完都会被强行终止。智能合约运行时花费的 Gas 最终会奖励给矿工。</p>
<p>综上，以太坊的挖矿奖励包括两部分：</p>
<h5 id="普通区块奖励"><a href="#普通区块奖励" class="headerlink" title="普通区块奖励"></a>普通区块奖励</h5><ul>
<li>固定奖励5ETH</li>
<li>花费的 Gas</li>
<li>如果区块中包括叔块，每包含一个可以得到5ETH的1/32</li>
</ul>
<h5 id="叔块奖励"><a href="#叔块奖励" class="headerlink" title="叔块奖励"></a>叔块奖励</h5><p>叔块奖励 = ( 叔块高度 + 8 - 包含叔块的区块的高度 ) * 普通区块奖励 / 8</p>
<h3 id="其他一些细节上的差异"><a href="#其他一些细节上的差异" class="headerlink" title="其他一些细节上的差异"></a>其他一些细节上的差异</h3><ul>
<li>出块时间，比特币的出块时间是平均10分钟，以太坊的平均出块时间是15秒。以太坊相对于比特币有更大的系统吞吐量和更小的交易确认间隔，尽管从长远来看，这远远不够。</li>
<li>区块奖励，比特币诞生于2009年1月，刚开始时区块奖励是50 BTC，每四年减半一次，2012年11月到2016年7月是25 BTC，目前是12.5 BTC，到2020年的2月将变成6.25 BTC；以太坊的挖矿奖励5个以太币，大都会版本后改成3个以太币。</li>
<li>以太币最多可以显示小数点后18位，比特币最多是小数点后8位。</li>
<li>…</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://en.bitcoin.it/wiki/Script" target="_blank" rel="external">Script</a></li>
<li><a href="https://github.com/ethereum/wiki/wiki/White-Paper" target="_blank" rel="external">ethereum white paper</a></li>
<li><a href="https://github.com/ethereum/wiki/wiki/Design-Rationale#gas-and-fees" target="_blank" rel="external">wiki/Design-Rationale#gas-and-fees</a></li>
<li><a href="https://medium.com/@ConsenSys/thoughts-on-utxo-by-vitalik-buterin-2bb782c67e53" target="_blank" rel="external">Thoughts on UTXOs by Vitalik Buterin, Co-Founder of Ethereum</a></li>
<li><a href="https://ethfans.org/posts/thoughts-on-utxo" target="_blank" rel="external">关于 UTXO 的思考</a></li>
<li><a href="https://steemit.com/ethereum/@alexma/2-utxo-vs" target="_blank" rel="external">浅谈以太坊（2）——以太坊的不同之处之UTXO vs 账户余额</a></li>
<li><a href="https://learnblockchain.cn/2017/11/10/bitcoin-script/" target="_blank" rel="external">比特币脚本及交易分析 - 智能合约雏形</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28830859" target="_blank" rel="external">以太坊(Ethereum ETH)是如何计算难度的</a></li>
<li><a href="https://cryptozombies.io/" target="_blank" rel="external">cryptozombies</a></li>
<li><a href="https://eips.ethereum.org/EIPS" target="_blank" rel="external">EIPs</a></li>
<li><a href="https://github.com/EthFans/wiki/wiki/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6" target="_blank" rel="external">EthFans/wiki/智能合约</a></li>
<li><a href="https://dbarobin.com/2018/01/24/blockchain-smart-contract/" target="_blank" rel="external">理解智能合约</a></li>
<li><a href="http://www.8btc.com/the-beginners-guide-to-ethereum-s-2020-roadmap" target="_blank" rel="external">以太坊路线图入门指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/ethereum" target="_blank" rel="external">以太坊技术专栏</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇将梳理以太坊的基本概念，说明一些值得注意的地方，这里不会讲解比特币的原理，代码，但会介绍以太坊与比特币的差异，所以最好看过比特币的论文，对比特币的基本原理、实现有所了解。这一篇将以太坊的白皮书作为重要参考，可以看做是以太坊白皮书的概述。以太坊的白皮书是一个非常好的学习资料，它在介绍以太坊前分析了比特币存在的问题，因此我们可以通过这份白皮书了解整个加密货币的生态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cryptocurrency" scheme="http://knarfeh.github.io/tags/cryptocurrency/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="geth" scheme="http://knarfeh.github.io/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>go-ethereum 源码笔记（cmd 模块-geth 命令）</title>
    <link href="http://knarfeh.github.io/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88cmd%20%E6%A8%A1%E5%9D%97-geth%20%E5%91%BD%E4%BB%A4%EF%BC%89/"/>
    <id>http://knarfeh.github.io/2018/03/10/go-ethereum 源码笔记（cmd 模块-geth 命令）/</id>
    <published>2018-03-10T14:34:56.000Z</published>
    <updated>2018-08-18T07:14:47.300Z</updated>
    
    <content type="html"><![CDATA[<p>cmd 模块包含了很多子模块，基本上每个子模块表示一个可执行的命令，其中最重要的是 geth 命令，它是以太坊的命令行客户端。</p>
<p>geth 命令是以太坊提供的一个强大的命令行工具，它是使用以太坊的入口。它包括了很多子命令，你可以通过 <code>geth --help</code> 获得更多帮助信息。其运行方法是：<code>geth [选项] 命令 [命令选项][参数…]</code>。</p>
<a id="more"></a>
<p>以下是 geth 包含的子命令以及对应的简单描述。</p>
<table>
<thead>
<tr>
<th style="text-align:center">子命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">account</td>
<td style="text-align:center">管理账户</td>
</tr>
<tr>
<td style="text-align:center">attach</td>
<td style="text-align:center">启动交互式JavaScript环境（连接到节点）</td>
</tr>
<tr>
<td style="text-align:center">bug</td>
<td style="text-align:center">给 github 源代码仓库提 issue</td>
</tr>
<tr>
<td style="text-align:center">console</td>
<td style="text-align:center">启动交互式 JavaScript 环境</td>
</tr>
<tr>
<td style="text-align:center">copydb</td>
<td style="text-align:center">从文件夹创建本地链</td>
</tr>
<tr>
<td style="text-align:center">dump</td>
<td style="text-align:center">取出一个特定的区块</td>
</tr>
<tr>
<td style="text-align:center">dumpconfig</td>
<td style="text-align:center">显示配置值</td>
</tr>
<tr>
<td style="text-align:center">export</td>
<td style="text-align:center">导出区块链到文件</td>
</tr>
<tr>
<td style="text-align:center">import</td>
<td style="text-align:center">导入一个区块链文件</td>
</tr>
<tr>
<td style="text-align:center">init</td>
<td style="text-align:center">启动并初始化一个新的创世纪块</td>
</tr>
<tr>
<td style="text-align:center">js</td>
<td style="text-align:center">执行指定的JavaScript文件(多个)</td>
</tr>
<tr>
<td style="text-align:center">license</td>
<td style="text-align:center">显示许可信息</td>
</tr>
<tr>
<td style="text-align:center">makecache</td>
<td style="text-align:center">生成ethash验证缓存(用于测试)</td>
</tr>
<tr>
<td style="text-align:center">makedag</td>
<td style="text-align:center">生成ethash 挖矿DAG(用于测试)</td>
</tr>
<tr>
<td style="text-align:center">monitor</td>
<td style="text-align:center">监控和可视化节点指标</td>
</tr>
<tr>
<td style="text-align:center">removedb</td>
<td style="text-align:center">删除区块链和状态数据库</td>
</tr>
<tr>
<td style="text-align:center">version</td>
<td style="text-align:center">打印版本号</td>
</tr>
<tr>
<td style="text-align:center">wallet</td>
<td style="text-align:center">管理Ethereum预售钱包</td>
</tr>
<tr>
<td style="text-align:center">help</td>
<td style="text-align:center">显示一个命令或帮助一个命令列表</td>
</tr>
</tbody>
</table>
<p>本文将逐一分析 geth 模块的源码，了解 geth 命令的实现原理。需要注意的是，这里我们不会深入分析每一个模块，因为这些模块的实现实际上是以太坊每个功能模块的实现，在后续的文章我们会一一分析。这里只分析 geth 命令的实现。</p>
<p>将涉及到 cmd, node 目录。</p>
<p>geth 的命令行是通过 <a href="https://github.com/urfave/cli" target="_blank" rel="external">github.com/urfave/cli</a> 这个库实现的，通过这个库，我们可以轻松定义命令行程序的子命令，命令选项，命令参数，描述信息等等，如果想要进一步了解，可以查看该库文档。</p>
<p>geth 模块的入口在 <code>cmd/geth/main.go</code> 中，它会调用 <code>urfave/cli</code> 的中 app 的 <code>run</code> 方法，而 app 在 <code>init</code> 函数中初始化，在 Golang 中，如果有 <code>init</code> 方法，那么会在 <code>main</code> 函数之前执行 <code>init</code> 函数，它用于程序执行前的初始化工作。在 geth 模块中，<code>init()</code> 函数定义了命令行的入口是 <code>geth</code>，并且定义了 geth 的子命令、全局的命令选项、子命令的命令选项，按照 <code>urfave/cli</code> 的做法，不输入子命令会默认调用 geth，而 geth 方法其实就6行：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">geth</span>(<span class="selector-tag">ctx</span> *<span class="selector-tag">cli</span><span class="selector-class">.Context</span>) <span class="selector-tag">error</span> &#123;</div><div class="line">	<span class="attribute">node </span>:= <span class="built_in">makeFullNode</span>(ctx)</div><div class="line">	<span class="built_in">startNode</span>(ctx, node)</div><div class="line">	node.<span class="built_in">Wait</span>()</div><div class="line">	return nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它会调用 <code>makeFullNode</code> 函数初始化一个全节点，该方法在 <code>geth/config.go</code> 中，接着通过 <code>startNode</code> 函数启动一个全节点，以阻塞的方式运行，等待着节点被终止。</p>
<p>我们先深入到 <code>makeFullNode</code> 函数中。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">func makeFullNode(<span class="name">ctx</span> *cli.Context) *node.Node &#123;</div><div class="line">	stack, cfg <span class="symbol">:=</span> makeConfigNode(<span class="name">ctx</span>)</div><div class="line">	utils.RegisterEthService(<span class="name">stack</span>, <span class="symbol">&amp;cfg</span>.Eth)</div><div class="line">	if ctx.GlobalBool(<span class="name">utils</span>.DashboardEnabledFlag.Name) &#123;</div><div class="line">		utils.RegisterDashboardService(<span class="name">stack</span>, <span class="symbol">&amp;cfg</span>.Dashboard, gitCommit)</div><div class="line">	&#125;</div><div class="line">	// whether enable whisper ...</div><div class="line">	// whether register eth stats ...</div><div class="line">	return stack</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>核心的逻辑是首先通过配置文件和 flag 生成系统级的配置，然后将服务注入到节点。<br>先说 <code>makeConfigNode</code> 方法。</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">func makeConfigNode(ctx *cli.Context) (*node.Node, gethConfig) &#123;</div><div class="line">	<span class="attribute">cfg</span> := gethConfig&#123;</div><div class="line">		Eth:       eth<span class="variable">.DefaultConfig</span>,</div><div class="line">		Shh:       whisper<span class="variable">.DefaultConfig</span>,</div><div class="line">		Node:      defaultNodeConfig(),</div><div class="line">		Dashboard: dashboard<span class="variable">.DefaultConfig</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if file := ctx<span class="variable">.GlobalString</span>(configFileFlag<span class="variable">.Name</span>); <span class="attribute">file != "" &#123;</span></div><div class="line">		if err := loadConfig(file, &amp;cfg); <span class="attribute">err != nil &#123;</span></div><div class="line">			utils.Fatalf("%v", err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	utils.SetNodeConfig(ctx, &amp;cfg.Node)</div><div class="line">	stack, err := node<span class="variable">.New</span>(&amp;cfg<span class="variable">.Node</span>)</div><div class="line">	if err != nil &#123;</div><div class="line">		utils<span class="variable">.Fatalf</span>("Failed to create the protocol stack: %v", err)</div><div class="line">	&#125;</div><div class="line">	utils<span class="variable">.SetEthConfig</span>(ctx, stack, &amp;cfg<span class="variable">.Eth</span>)</div><div class="line">	if ctx<span class="variable">.GlobalIsSet</span>(utils<span class="variable">.EthStatsURLFlag</span><span class="variable">.Name</span>) &#123;</div><div class="line">		cfg<span class="variable">.Ethstats</span><span class="variable">.URL</span> = ctx<span class="variable">.GlobalString</span>(utils<span class="variable">.EthStatsURLFlag</span><span class="variable">.Name</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	utils<span class="variable">.SetShhConfig</span>(ctx, stack, &amp;cfg<span class="variable">.Shh</span>)</div><div class="line">	utils<span class="variable">.SetDashboardConfig</span>(ctx, &amp;cfg<span class="variable">.Dashboard</span>)</div><div class="line"></div><div class="line">	return stack, cfg</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>makeConfigNode</code> 会先载入默认配置，再载入配置文件中的配置，然后通过上下文的配置(在 <code>cmd/geth/main.go</code> 中的 <code>init</code> 方法中定义)进行设置。我们深入到 <code>RegisterEthService</code> 方法来查看服务是如何注入到节点中的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterEthService</span><span class="params">(stack *node.Node, cfg *eth.Config)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	<span class="keyword">if</span> cfg.SyncMode == downloader.LightSync &#123;</div><div class="line">		err = stack.Register(<span class="function"><span class="keyword">func</span><span class="params">(ctx *node.ServiceContext)</span> <span class="params">(node.Service, error)</span></span> &#123;</div><div class="line">			<span class="keyword">return</span> les.New(ctx, cfg)</div><div class="line">		&#125;)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		err = stack.Register(<span class="function"><span class="keyword">func</span><span class="params">(ctx *node.ServiceContext)</span> <span class="params">(node.Service, error)</span></span> &#123;</div><div class="line">			fullNode, err := eth.New(ctx, cfg)</div><div class="line">			<span class="keyword">if</span> fullNode != <span class="literal">nil</span> &amp;&amp; cfg.LightServ &gt; <span class="number">0</span> &#123;</div><div class="line">				ls, _ := les.NewLesServer(fullNode, cfg)</div><div class="line">				fullNode.AddLesServer(ls)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> fullNode, err</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		Fatalf(<span class="string">"Failed to register the Ethereum service: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>RegisterEthService</code> 的代码在 <code>cmd/utils/flags.go</code> 中，如果同步模式是轻量级同步模式，启动轻量级客户端，否则启动全节点，实际的注册方法是 <code>stack.Register</code>。注入服务其实就是将新的服务注入到 <code>node</code> 对象的 <code>serviceFuncs</code> 数组中。这些内容将<a href="#TODO">go-ethereum 源码笔记（node 模块）</a> 描述。</p>
<p>接下来我们继续看 <code>geth/main.go</code> 的 <code>startNode</code> 函数，看看如何启动节点，这个方法在 <code>cmd/geth/main.go</code> 中。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startNode</span><span class="params">(ctx *cli.Context, stack *node.Node)</span></span> &#123;</div><div class="line">	debug.Memsize.Add(<span class="string">"node"</span>, stack)</div><div class="line">	utils.StartNode(stack)</div><div class="line"></div><div class="line">	ks := stack.AccountManager().Backends(keystore.KeyStoreType)[<span class="number">0</span>].(*keystore.KeyStore)</div><div class="line"></div><div class="line">	passwords := utils.MakePasswordList(ctx)</div><div class="line">	unlocks := strings.Split(ctx.GlobalString(utils.UnlockedAccountFlag.Name), <span class="string">","</span>)</div><div class="line">	<span class="keyword">for</span> i, account := <span class="keyword">range</span> unlocks &#123;</div><div class="line">		<span class="keyword">if</span> trimmed := strings.TrimSpace(account); trimmed != <span class="string">""</span> &#123;</div><div class="line">			unlockAccount(ctx, ks, trimmed, i, passwords)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	events := <span class="built_in">make</span>(<span class="keyword">chan</span> accounts.WalletEvent, <span class="number">16</span>)</div><div class="line">	stack.AccountManager().Subscribe(events)</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		rpcClient, err := stack.Attach()</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Failed to attach to self: %v"</span>, err)</div><div class="line">		&#125;</div><div class="line">		stateReader := ethclient.NewClient(rpcClient)</div><div class="line"></div><div class="line">		<span class="keyword">for</span> _, wallet := <span class="keyword">range</span> stack.AccountManager().Wallets() &#123;</div><div class="line">			<span class="keyword">if</span> err := wallet.Open(<span class="string">""</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">				log.Warn(<span class="string">"Failed to open wallet"</span>, <span class="string">"url"</span>, wallet.URL(), <span class="string">"err"</span>, err)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> event := <span class="keyword">range</span> events &#123;</div><div class="line">			<span class="keyword">switch</span> event.Kind &#123;</div><div class="line">			<span class="keyword">case</span> accounts.WalletArrived:</div><div class="line">				<span class="keyword">if</span> err := event.Wallet.Open(<span class="string">""</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">					log.Warn(<span class="string">"New wallet appeared, failed to open"</span>, <span class="string">"url"</span>, event.Wallet.URL(), <span class="string">"err"</span>, err)</div><div class="line">				&#125;</div><div class="line">			<span class="keyword">case</span> accounts.WalletOpened:</div><div class="line">				status, _ := event.Wallet.Status()</div><div class="line">				log.Info(<span class="string">"New wallet appeared"</span>, <span class="string">"url"</span>, event.Wallet.URL(), <span class="string">"status"</span>, status)</div><div class="line"></div><div class="line">				<span class="keyword">if</span> event.Wallet.URL().Scheme == <span class="string">"ledger"</span> &#123;</div><div class="line">					event.Wallet.SelfDerive(accounts.DefaultLedgerBaseDerivationPath, stateReader)</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					event.Wallet.SelfDerive(accounts.DefaultBaseDerivationPath, stateReader)</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			<span class="keyword">case</span> accounts.WalletDropped:</div><div class="line">				log.Info(<span class="string">"Old wallet dropped"</span>, <span class="string">"url"</span>, event.Wallet.URL())</div><div class="line">				event.Wallet.Close()</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">if</span> ctx.GlobalBool(utils.MiningEnabledFlag.Name) || ctx.GlobalBool(utils.DeveloperFlag.Name) &#123;</div><div class="line">		<span class="keyword">if</span> ctx.GlobalBool(utils.LightModeFlag.Name) || ctx.GlobalString(utils.SyncModeFlag.Name) == <span class="string">"light"</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Light clients do not support mining"</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> ethereum *eth.Ethereum</div><div class="line">		<span class="keyword">if</span> err := stack.Service(&amp;ethereum); err != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Ethereum service not running: %v"</span>, err)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> threads := ctx.GlobalInt(utils.MinerThreadsFlag.Name); threads &gt; <span class="number">0</span> &#123;</div><div class="line">			<span class="keyword">type</span> threaded <span class="keyword">interface</span> &#123;</div><div class="line">				SetThreads(threads <span class="keyword">int</span>)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> th, ok := ethereum.Engine().(threaded); ok &#123;</div><div class="line">				th.SetThreads(threads)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		ethereum.TxPool().SetGasPrice(utils.GlobalBig(ctx, utils.GasPriceFlag.Name))</div><div class="line">		<span class="keyword">if</span> err := ethereum.StartMining(<span class="literal">true</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Failed to start mining: %v"</span>, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>startNode</code> 方法启动节点，会开启所有已经注册的协议，解锁请求的账户，开启 RPC/IPC 接口，并开始挖矿。这里我们不再深入。</p>
<p>上述就是直接运行 geth，不输入其他子命令的情况。geth 还有很多子命令，这些子命令在 <code>init()</code> 的 <code>app.Commands</code> 赋值语句中可以看到，接下来会概述这些子命令。</p>
<h2 id="chaincmd-go"><a href="#chaincmd-go" class="headerlink" title="chaincmd.go"></a>chaincmd.go</h2><h3 id="initCommand-geth-init"><a href="#initCommand-geth-init" class="headerlink" title="initCommand: geth init"></a>initCommand: geth init</h3><p>这个命令会进行初始化，生成创始区块。对应调用的方法是 <code>initGenesis</code>。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">func initGenesis(ctx *<span class="keyword">cli</span>.Context) <span class="keyword">error</span> &#123;</div><div class="line">	genesisPath := ctx.<span class="keyword">Args</span>().First()</div><div class="line">	<span class="keyword">if</span> len(genesisPath) == 0 &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Must supply path to genesis JSON file"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">file</span>, <span class="keyword">err</span> := os.<span class="keyword">Open</span>(genesisPath)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to read genesis file: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	defer <span class="keyword">file</span>.<span class="keyword">Close</span>()</div><div class="line"></div><div class="line">	genesis := new(core.Genesis)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := json.NewDecoder(<span class="keyword">file</span>).<span class="keyword">Decode</span>(genesis); <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"invalid genesis file: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">stack</span> := makeFullNode(ctx)</div><div class="line">	<span class="keyword">for</span> _, name := <span class="keyword">range</span> []string&#123;<span class="string">"chaindata"</span>, <span class="string">"lightchaindata"</span>&#125; &#123;</div><div class="line">		chaindb, <span class="keyword">err</span> := <span class="keyword">stack</span>.OpenDatabase(name, 0, 0)</div><div class="line">		<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Failed to open database: %v"</span>, <span class="keyword">err</span>)</div><div class="line">		&#125;</div><div class="line">		_, hash, <span class="keyword">err</span> := core.SetupGenesisBlock(chaindb, genesis)</div><div class="line">		<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Failed to write genesis block: %v"</span>, <span class="keyword">err</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">log</span>.Info(<span class="string">"Successfully wrote genesis state"</span>, <span class="string">"database"</span>, name, <span class="string">"hash"</span>, hash)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终会调用 <code>core/geth/chaincmd</code> 的 <code>SetupGenesisBlock</code>，这里具体的实现细节我们将在<a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88core%20%E6%A8%A1%E5%9D%97-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%93%8D%E4%BD%9C%EF%BC%89/" target="_blank" rel="external">go-ethereum 源码笔记（core 模块-区块链操作）</a> 介绍。</p>
<h3 id="importCommand-geth-import"><a href="#importCommand-geth-import" class="headerlink" title="importCommand: geth import"></a>importCommand: geth import</h3><p>导入一个区块链文件</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">func importChain(ctx *<span class="keyword">cli</span>.Context) <span class="keyword">error</span> &#123;</div><div class="line">	<span class="keyword">if</span> len(ctx.<span class="keyword">Args</span>()) &lt; 1 &#123;</div><div class="line">		utils.Fatalf(<span class="string">"This command requires an argument."</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">stack</span> := makeFullNode(ctx)</div><div class="line">	chain, chainDb := utils.MakeChain(ctx, <span class="keyword">stack</span>)</div><div class="line">	defer chainDb.<span class="keyword">Close</span>()</div><div class="line"></div><div class="line">	<span class="keyword">var</span> peakMemAlloc, peakMemSys uint64</div><div class="line">	go func() &#123;</div><div class="line">		stats := new(runtime.MemStats)</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			runtime.ReadMemStats(stats)</div><div class="line">			<span class="keyword">if</span> atomic.LoadUint64(&amp;peakMemAlloc) &lt; stats.Alloc &#123;</div><div class="line">				atomic.StoreUint64(&amp;peakMemAlloc, stats.Alloc)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> atomic.LoadUint64(&amp;peakMemSys) &lt; stats.Sys &#123;</div><div class="line">				atomic.StoreUint64(&amp;peakMemSys, stats.Sys)</div><div class="line">			&#125;</div><div class="line">			time.<span class="keyword">Sleep</span>(5 * time.Second)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> len(ctx.<span class="keyword">Args</span>()) == 1 &#123;</div><div class="line">		<span class="keyword">if</span> <span class="keyword">err</span> := utils.ImportChain(chain, ctx.<span class="keyword">Args</span>().First()); <span class="keyword">err</span> != nil &#123;</div><div class="line">			<span class="keyword">log</span>.<span class="keyword">Error</span>(<span class="string">"Import error"</span>, <span class="string">"err"</span>, <span class="keyword">err</span>)</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> _, arg := <span class="keyword">range</span> ctx.<span class="keyword">Args</span>() &#123;</div><div class="line">			<span class="keyword">if</span> <span class="keyword">err</span> := utils.ImportChain(chain, arg); <span class="keyword">err</span> != nil &#123;</div><div class="line">				<span class="keyword">log</span>.<span class="keyword">Error</span>(<span class="string">"Import error"</span>, <span class="string">"file"</span>, arg, <span class="string">"err"</span>, <span class="keyword">err</span>)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	chain.Stop()</div><div class="line">	fmt.Printf(<span class="string">"Import done in %v.\n\n"</span>, time.Since(start))</div><div class="line"></div><div class="line">	<span class="keyword">db</span> := chainDb.(*ethdb.LDBDatabase)</div><div class="line"></div><div class="line">	stats, <span class="keyword">err</span> := <span class="keyword">db</span>.LDB().GetProperty(<span class="string">"leveldb.stats"</span>)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to read database stats: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(stats)</div><div class="line"></div><div class="line">	ioStats, <span class="keyword">err</span> := <span class="keyword">db</span>.LDB().GetProperty(<span class="string">"leveldb.iostats"</span>)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to read database iostats: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(ioStats)</div><div class="line"></div><div class="line">	fmt.Printf(<span class="string">"Trie cache misses:  %d\n"</span>, trie.CacheMisses())</div><div class="line">	fmt.Printf(<span class="string">"Trie cache unloads: %d\n\n"</span>, trie.CacheUnloads())</div><div class="line"></div><div class="line">	mem := new(runtime.MemStats)</div><div class="line">	runtime.ReadMemStats(mem)</div><div class="line"></div><div class="line">	fmt.Printf(<span class="string">"Object memory: %.3f MB current, %.3f MB peak\n"</span>, float64(mem.Alloc)/1024/1024, float64(atomic.LoadUint64(&amp;peakMemAlloc))/1024/1024)</div><div class="line">	fmt.Printf(<span class="string">"System memory: %.3f MB current, %.3f MB peak\n"</span>, float64(mem.Sys)/1024/1024, float64(atomic.LoadUint64(&amp;peakMemSys))/1024/1024)</div><div class="line">	fmt.Printf(<span class="string">"Allocations:   %.3f million\n"</span>, float64(mem.Mallocs)/1000000)</div><div class="line">	fmt.Printf(<span class="string">"GC pause:      %v\n\n"</span>, time.Duration(mem.PauseTotalNs))</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ctx.GlobalIsSet(utils.NoCompactionFlag.Name) &#123;</div><div class="line">		<span class="keyword">return</span> nil</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	start = time.Now()</div><div class="line">	fmt.Println(<span class="string">"Compacting entire database..."</span>)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> = <span class="keyword">db</span>.LDB().CompactRange(util.<span class="keyword">Range</span>&#123;&#125;); <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Compaction failed: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Compaction done in %v.\n\n"</span>, time.Since(start))</div><div class="line"></div><div class="line">	stats, <span class="keyword">err</span> = <span class="keyword">db</span>.LDB().GetProperty(<span class="string">"leveldb.stats"</span>)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to read database stats: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(stats)</div><div class="line"></div><div class="line">	ioStats, <span class="keyword">err</span> = <span class="keyword">db</span>.LDB().GetProperty(<span class="string">"leveldb.iostats"</span>)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to read database iostats: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(ioStats)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真正的逻辑在 <code>utils/cmd.go</code> 中的 <code>ImportChain</code>。</p>
<h3 id="exportCommand-geth-export"><a href="#exportCommand-geth-export" class="headerlink" title="exportCommand: geth export"></a>exportCommand: geth export</h3><p>导出一个区块链文件</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">exportChain</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ctx.Args()) &lt; <span class="number">1</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"This command requires an argument."</span>)</div><div class="line">	&#125;</div><div class="line">	stack := makeFullNode(ctx)</div><div class="line">	chain, _ := utils.MakeChain(ctx, stack)</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	fp := ctx.Args().First()</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ctx.Args()) &lt; <span class="number">3</span> &#123;</div><div class="line">		err = utils.ExportChain(chain, fp)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		first, ferr := strconv.ParseInt(ctx.Args().Get(<span class="number">1</span>), <span class="number">10</span>, <span class="number">64</span>)</div><div class="line">		last, lerr := strconv.ParseInt(ctx.Args().Get(<span class="number">2</span>), <span class="number">10</span>, <span class="number">64</span>)</div><div class="line">		<span class="keyword">if</span> ferr != <span class="literal">nil</span> || lerr != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Export error in parsing parameters: block number not an integer\n"</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> first &lt; <span class="number">0</span> || last &lt; <span class="number">0</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Export error: block number must be greater than 0\n"</span>)</div><div class="line">		&#125;</div><div class="line">		err = utils.ExportAppendChain(chain, fp, <span class="keyword">uint64</span>(first), <span class="keyword">uint64</span>(last))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Export error: %v\n"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Export done in %v\n"</span>, time.Since(start))</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导出区块链的真正逻辑在 <code>utils/cmd.go</code> 中的 <code>ExportChain</code> 里。将导出一个 gz 文件。</p>
<h3 id="importPreimagesCommand-geth-import-preimages"><a href="#importPreimagesCommand-geth-import-preimages" class="headerlink" title="importPreimagesCommand: geth import-preimages"></a>importPreimagesCommand: geth import-preimages</h3><p>将一个 preimages 导入当前节点。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">importPreimages</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ctx.Args()) &lt; <span class="number">1</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"This command requires an argument."</span>)</div><div class="line">	&#125;</div><div class="line">	stack := makeFullNode(ctx)</div><div class="line">	diskdb := utils.MakeChainDatabase(ctx, stack).(*ethdb.LDBDatabase)</div><div class="line"></div><div class="line">	start := time.Now()</div><div class="line">	<span class="keyword">if</span> err := utils.ImportPreimages(diskdb, ctx.Args().First()); err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Export error: %v\n"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Export done in %v\n"</span>, time.Since(start))</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="exportPreimagesCommand-geth-export-preimages"><a href="#exportPreimagesCommand-geth-export-preimages" class="headerlink" title="exportPreimagesCommand: geth export-preimages"></a>exportPreimagesCommand: geth export-preimages</h3><p>从当前节点导出一个 image</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">exportPreimages</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ctx.Args()) &lt; <span class="number">1</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"This command requires an argument."</span>)</div><div class="line">	&#125;</div><div class="line">	stack := makeFullNode(ctx)</div><div class="line">	diskdb := utils.MakeChainDatabase(ctx, stack).(*ethdb.LDBDatabase)</div><div class="line"></div><div class="line">	start := time.Now()</div><div class="line">	<span class="keyword">if</span> err := utils.ExportPreimages(diskdb, ctx.Args().First()); err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Export error: %v\n"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Export done in %v\n"</span>, time.Since(start))</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="copydbCommand-geth-copydb"><a href="#copydbCommand-geth-copydb" class="headerlink" title="copydbCommand: geth copydb"></a>copydbCommand: <code>geth copydb</code></h3><p>复制一个本地区块文件到文件夹</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">func copyDb(<span class="name">ctx</span> *cli.Context) error &#123;</div><div class="line">	if len(ctx.Args()) != 1 &#123;</div><div class="line">		utils.Fatalf("Source chaindata directory path argument missing")</div><div class="line">	&#125;</div><div class="line">	stack := makeFullNode(ctx)</div><div class="line">	chain, chainDb := utils.MakeChain(ctx, stack)</div><div class="line"></div><div class="line">	syncmode := *utils.GlobalTextMarshaler(<span class="name">ctx</span>, utils.SyncModeFlag.Name).(<span class="name">*downloader</span>.SyncMode)</div><div class="line">	dl <span class="symbol">:=</span> downloader.New(<span class="name">syncmode</span>, chainDb, new(<span class="name">event</span>.TypeMux), chain, <span class="literal">nil</span>, <span class="literal">nil</span>)</div><div class="line"></div><div class="line">	db, err <span class="symbol">:=</span> ethdb.NewLDBDatabase(<span class="name">ctx</span>.Args().First(), ctx.GlobalInt(<span class="name">utils</span>.CacheFlag.Name), <span class="number">256</span>)</div><div class="line">	if err != <span class="literal">nil</span> &#123;</div><div class="line">		return err</div><div class="line">	&#125;</div><div class="line">	hc, err <span class="symbol">:=</span> core.NewHeaderChain(<span class="name">db</span>, chain.Config(), chain.Engine(), func() bool &#123; return false &#125;)</div><div class="line">	if err != <span class="literal">nil</span> &#123;</div><div class="line">		return err</div><div class="line">	&#125;</div><div class="line">	peer <span class="symbol">:=</span> downloader.NewFakePeer(<span class="string">"local"</span>, db, hc, dl)</div><div class="line">	if err = dl.RegisterPeer(<span class="string">"local"</span>, <span class="number">63</span>, peer)<span class="comment">; err != nil &#123;</span></div><div class="line">		return err</div><div class="line">	&#125;</div><div class="line">	start <span class="symbol">:=</span> time.Now()</div><div class="line"></div><div class="line">	currentHeader <span class="symbol">:=</span> hc.CurrentHeader()</div><div class="line">	if err = dl.Synchronise(<span class="string">"local"</span>, currentHeader.Hash(), hc.GetTd(<span class="name">currentHeader</span>.Hash(), currentHeader.Number.Uint64()), syncmode)<span class="comment">; err != nil &#123;</span></div><div class="line">		return err</div><div class="line">	&#125;</div><div class="line">	for dl.Synchronising() &#123;</div><div class="line">		time.Sleep(<span class="number">10</span> * time.Millisecond)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf("Database copy done in %v\n", time.Since(start))</div><div class="line"></div><div class="line">	start = time.Now()</div><div class="line">	fmt.Println("Compacting entire database...")</div><div class="line">	if err = chainDb.(*ethdb.LDBDatabase).LDB().CompactRange(<span class="name">util</span>.Range&#123;&#125;)<span class="comment">; err != nil &#123;</span></div><div class="line">		utils.Fatalf(<span class="string">"Compaction failed: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Compaction done in %v.\n\n"</span>, time.Since(<span class="name">start</span>))</div><div class="line"></div><div class="line">	return <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在一个文件夹中创建一个本地区块链。有意思的是这个过程并不是直接复制过去的，而是通过 <code>downloader</code> 模块里的 <code>NewFakePeer</code> 创建一个虚拟对等节点，然后再进行数据同步完成的。</p>
<h3 id="removedbCommand-geth-removedb"><a href="#removedbCommand-geth-removedb" class="headerlink" title="removedbCommand: geth removedb"></a>removedbCommand: <code>geth removedb</code></h3><p>在当前数据库中移除区块链。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDB</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	stack, _ := makeConfigNode(ctx)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> _, name := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;<span class="string">"chaindata"</span>, <span class="string">"lightchaindata"</span>&#125; &#123;</div><div class="line">		logger := log.New(<span class="string">"database"</span>, name)</div><div class="line"></div><div class="line">		dbdir := stack.ResolvePath(name)</div><div class="line">		<span class="keyword">if</span> !common.FileExist(dbdir) &#123;</div><div class="line">			logger.Info(<span class="string">"Database doesn't exist, skipping"</span>, <span class="string">"path"</span>, dbdir)</div><div class="line">			<span class="keyword">continue</span></div><div class="line">		&#125;</div><div class="line">		fmt.Println(dbdir)</div><div class="line">		confirm, err := console.Stdin.PromptConfirm(<span class="string">"Remove this database?"</span>)</div><div class="line">		<span class="keyword">switch</span> &#123;</div><div class="line">		<span class="keyword">case</span> err != <span class="literal">nil</span>:</div><div class="line">			utils.Fatalf(<span class="string">"%v"</span>, err)</div><div class="line">		<span class="keyword">case</span> !confirm:</div><div class="line">			logger.Warn(<span class="string">"Database deletion aborted"</span>)</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			start := time.Now()</div><div class="line">			os.RemoveAll(dbdir)</div><div class="line">			logger.Info(<span class="string">"Database successfully deleted"</span>, <span class="string">"elapsed"</span>, common.PrettyDuration(time.Since(start)))</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>删除数据库的过程倒是比较干脆，直接通过 <code>os</code> 模块移除这个文件夹。</p>
<h3 id="dumpCommand-geth-dump-lt-blockHash-gt-lt-blockNum-gt"><a href="#dumpCommand-geth-dump-lt-blockHash-gt-lt-blockNum-gt" class="headerlink" title="dumpCommand: geth dump [&lt;blockHash&gt; | &lt;blockNum&gt;]..."></a>dumpCommand: <code>geth dump [&lt;blockHash&gt; | &lt;blockNum&gt;]...</code></h3><p>dump 子命令可以移除一个或多个特定的区块</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">func dump(<span class="name">ctx</span> *cli.Context) error &#123;</div><div class="line">	stack := makeFullNode(ctx)</div><div class="line">	chain, chainDb := utils.MakeChain(ctx, stack)</div><div class="line">	for _, arg := range ctx.Args() &#123;</div><div class="line">		var block *types.Block</div><div class="line">		if hashish(<span class="name">arg</span>) &#123;</div><div class="line">			block = chain.GetBlockByHash(<span class="name">common</span>.HexToHash(<span class="name">arg</span>))</div><div class="line">		&#125; else &#123;</div><div class="line">			num, _ <span class="symbol">:=</span> strconv.Atoi(<span class="name">arg</span>)</div><div class="line">			block = chain.GetBlockByNumber(<span class="name">uint64</span>(<span class="name">num</span>))</div><div class="line">		&#125;</div><div class="line">		if block == <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(<span class="string">"&#123;&#125;"</span>)</div><div class="line">			utils.Fatalf(<span class="string">"block not found"</span>)</div><div class="line">		&#125; else &#123;</div><div class="line">			state, err <span class="symbol">:=</span> state.New(<span class="name">block</span>.Root(), state.NewDatabase(<span class="name">chainDb</span>))</div><div class="line">			if err != <span class="literal">nil</span> &#123;</div><div class="line">				utils.Fatalf(<span class="string">"could not create new state: %v"</span>, err)</div><div class="line">			&#125;</div><div class="line">			fmt.Printf(<span class="string">"%s\n"</span>, state.Dump())</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	chainDb.Close()</div><div class="line">	return <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先根据区块号获取区块，然后调用 state 的 <code>Dump</code> 移除即可，这部分的实现在之后<a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88core%20%E6%A8%A1%E5%9D%97-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%93%8D%E4%BD%9C%EF%BC%89/" target="_blank" rel="external">go-ethereum 源码笔记（core 模块-区块链操作）</a>会有描述。</p>
<h2 id="monitorcmd-go"><a href="#monitorcmd-go" class="headerlink" title="monitorcmd.go"></a>monitorcmd.go</h2><p>这部分代码不是核心内容，只是粗略的看了一下。</p>
<h3 id="monitorComand-geth-monitor"><a href="#monitorComand-geth-monitor" class="headerlink" title="monitorComand: geth monitor"></a>monitorComand: <code>geth monitor</code></h3><p>监控，图像化节点 metrics 数据</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">monitor</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> (</div><div class="line">		client *rpc.Client</div><div class="line">		err    error</div><div class="line">	)</div><div class="line">	endpoint := ctx.String(monitorCommandAttachFlag.Name)</div><div class="line">	<span class="keyword">if</span> client, err = dialRPC(endpoint); err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Unable to attach to geth node: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> client.Close()</div><div class="line"></div><div class="line">	metrics, err := retrieveMetrics(client)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to retrieve system metrics: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	monitored := resolveMetrics(metrics, ctx.Args())</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(monitored) == <span class="number">0</span> &#123;</div><div class="line">		list := expandMetrics(metrics, <span class="string">""</span>)</div><div class="line">		sort.Strings(list)</div><div class="line"></div><div class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(list) &gt; <span class="number">0</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"No metrics specified.\n\nAvailable:\n - %s"</span>, strings.Join(list, <span class="string">"\n - "</span>))</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"No metrics collected by geth (--%s).\n"</span>, utils.MetricsEnabledFlag.Name)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	sort.Strings(monitored)</div><div class="line">	<span class="keyword">if</span> cols := <span class="built_in">len</span>(monitored) / ctx.Int(monitorCommandRowsFlag.Name); cols &gt; <span class="number">6</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Requested metrics (%d) spans more that 6 columns:\n - %s"</span>, <span class="built_in">len</span>(monitored), strings.Join(monitored, <span class="string">"\n - "</span>))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err := termui.Init(); err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Unable to initialize terminal UI: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> termui.Close()</div><div class="line"></div><div class="line">	rows := <span class="built_in">len</span>(monitored)</div><div class="line">	<span class="keyword">if</span> max := ctx.Int(monitorCommandRowsFlag.Name); rows &gt; max &#123;</div><div class="line">		rows = max</div><div class="line">	&#125;</div><div class="line">	cols := (<span class="built_in">len</span>(monitored) + rows - <span class="number">1</span>) / rows</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rows; i++ &#123;</div><div class="line">		termui.Body.AddRows(termui.NewRow())</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	footer := termui.NewPar(<span class="string">""</span>)</div><div class="line">	footer.Block.Border = <span class="literal">true</span></div><div class="line">	footer.Height = <span class="number">3</span></div><div class="line"></div><div class="line">	charts := <span class="built_in">make</span>([]*termui.LineChart, <span class="built_in">len</span>(monitored))</div><div class="line">	units := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(monitored))</div><div class="line">	data := <span class="built_in">make</span>([][]<span class="keyword">float64</span>, <span class="built_in">len</span>(monitored))</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(monitored); i++ &#123;</div><div class="line">		charts[i] = createChart((termui.TermHeight() - footer.Height) / rows)</div><div class="line">		row := termui.Body.Rows[i%rows]</div><div class="line">		row.Cols = <span class="built_in">append</span>(row.Cols, termui.NewCol(<span class="number">12</span>/cols, <span class="number">0</span>, charts[i]))</div><div class="line">	&#125;</div><div class="line">	termui.Body.AddRows(termui.NewRow(termui.NewCol(<span class="number">12</span>, <span class="number">0</span>, footer)))</div><div class="line"></div><div class="line">	refreshCharts(client, monitored, data, units, charts, ctx, footer)</div><div class="line">	termui.Body.Align()</div><div class="line">	termui.Render(termui.Body)</div><div class="line"></div><div class="line">	termui.Handle(<span class="string">"/sys/kbd/C-c"</span>, <span class="function"><span class="keyword">func</span><span class="params">(termui.Event)</span></span> &#123;</div><div class="line">		termui.StopLoop()</div><div class="line">	&#125;)</div><div class="line">	termui.Handle(<span class="string">"/sys/wnd/resize"</span>, <span class="function"><span class="keyword">func</span><span class="params">(termui.Event)</span></span> &#123;</div><div class="line">		termui.Body.Width = termui.TermWidth()</div><div class="line">		<span class="keyword">for</span> _, chart := <span class="keyword">range</span> charts &#123;</div><div class="line">			chart.Height = (termui.TermHeight() - footer.Height) / rows</div><div class="line">		&#125;</div><div class="line">		termui.Body.Align()</div><div class="line">		termui.Render(termui.Body)</div><div class="line">	&#125;)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		tick := time.NewTicker(time.Duration(ctx.Int(monitorCommandRefreshFlag.Name)) * time.Second)</div><div class="line">		<span class="keyword">for</span> <span class="keyword">range</span> tick.C &#123;</div><div class="line">			<span class="keyword">if</span> refreshCharts(client, monitored, data, units, charts, ctx, footer) &#123;</div><div class="line">				termui.Body.Align()</div><div class="line">			&#125;</div><div class="line">			termui.Render(termui.Body)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	termui.Loop()</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="accountcmd-go"><a href="#accountcmd-go" class="headerlink" title="accountcmd.go"></a>accountcmd.go</h2><h3 id="accountCommand"><a href="#accountCommand" class="headerlink" title="accountCommand"></a>accountCommand</h3><p>管理账户，这部分的实现在之后<a href="#TODO">go-ethereum 源码笔记（accounts, transaction 模块）</a>会有描述。</p>
<h4 id="list-geth-account-list"><a href="#list-geth-account-list" class="headerlink" title="list: geth account list"></a>list: <code>geth account list</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">accountList</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	stack, _ := makeConfigNode(ctx)</div><div class="line">	<span class="keyword">var</span> index <span class="keyword">int</span></div><div class="line">	<span class="keyword">for</span> _, wallet := <span class="keyword">range</span> stack.AccountManager().Wallets() &#123;</div><div class="line">		<span class="keyword">for</span> _, account := <span class="keyword">range</span> wallet.Accounts() &#123;</div><div class="line">			fmt.Printf(<span class="string">"Account #%d: &#123;%x&#125; %s\n"</span>, index, account.Address, &amp;account.URL)</div><div class="line">			index++</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调用 <code>accounts/manager.go</code> 的 <code>Wallets</code> 拿到所有账户。</p>
<h4 id="new-geth-account-new"><a href="#new-geth-account-new" class="headerlink" title="new: geth account new"></a>new: <code>geth account new</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">accountCreate</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	cfg := gethConfig&#123;Node: defaultNodeConfig()&#125;</div><div class="line">	<span class="keyword">if</span> file := ctx.GlobalString(configFileFlag.Name); file != <span class="string">""</span> &#123;</div><div class="line">		<span class="keyword">if</span> err := loadConfig(file, &amp;cfg); err != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"%v"</span>, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	utils.SetNodeConfig(ctx, &amp;cfg.Node)</div><div class="line">	scryptN, scryptP, keydir, err := cfg.Node.AccountConfig()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to read configuration: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	password := getPassPhrase(<span class="string">"Your new account is locked with a password. Please give a password. Do not forget this password."</span>, <span class="literal">true</span>, <span class="number">0</span>, utils.MakePasswordList(ctx))</div><div class="line"></div><div class="line">	address, err := keystore.StoreKey(keydir, password, scryptN, scryptP)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to create account: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Address: &#123;%x&#125;\n"</span>, address)</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个账户，成功后输出地址。通过 <code>accounts</code> 模块实现。</p>
<h4 id="update：geth-account-update-lt-address-gt"><a href="#update：geth-account-update-lt-address-gt" class="headerlink" title="update：geth account update &lt;address&gt;"></a>update：<code>geth account update &lt;address&gt;</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">accountUpdate</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(ctx.Args()) == <span class="number">0</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"No accounts specified to update"</span>)</div><div class="line">	&#125;</div><div class="line">	stack, _ := makeConfigNode(ctx)</div><div class="line">	ks := stack.AccountManager().Backends(keystore.KeyStoreType)[<span class="number">0</span>].(*keystore.KeyStore)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> _, addr := <span class="keyword">range</span> ctx.Args() &#123;</div><div class="line">		account, oldPassword := unlockAccount(ctx, ks, addr, <span class="number">0</span>, <span class="literal">nil</span>)</div><div class="line">		newPassword := getPassPhrase(<span class="string">"Please give a new password. Do not forget this password."</span>, <span class="literal">true</span>, <span class="number">0</span>, <span class="literal">nil</span>)</div><div class="line">		<span class="keyword">if</span> err := ks.Update(account, oldPassword, newPassword); err != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Could not update the account: %v"</span>, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先通过 <code>AccountManager</code> 拿到 keystore，然后调用 <code>Update</code> 更新密码</p>
<h4 id="import-geth-account-import-lt-keyfile-gt"><a href="#import-geth-account-import-lt-keyfile-gt" class="headerlink" title="import: geth account import &lt;keyfile&gt;"></a>import: <code>geth account import &lt;keyfile&gt;</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">accountImport</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	keyfile := ctx.Args().First()</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(keyfile) == <span class="number">0</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"keyfile must be given as argument"</span>)</div><div class="line">	&#125;</div><div class="line">	key, err := crypto.LoadECDSA(keyfile)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to load the private key: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	stack, _ := makeConfigNode(ctx)</div><div class="line">	passphrase := getPassPhrase(<span class="string">"Your new account is locked with a password. Please give a password. Do not forget this password."</span>, <span class="literal">true</span>, <span class="number">0</span>, utils.MakePasswordList(ctx))</div><div class="line"></div><div class="line">	ks := stack.AccountManager().Backends(keystore.KeyStoreType)[<span class="number">0</span>].(*keystore.KeyStore)</div><div class="line">	acct, err := ks.ImportECDSA(key, passphrase)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Could not create the account: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Address: &#123;%x&#125;\n"</span>, acct.Address)</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先通过 <code>AccountManager</code> 拿到 keystore，调用 <code>ImportPreSaleKey</code> 导入账户。</p>
<h3 id="walletCommand-geth-wallet-import-path-to-my-presale-wallet"><a href="#walletCommand-geth-wallet-import-path-to-my-presale-wallet" class="headerlink" title="walletCommand: geth wallet import /path/to/my/presale.wallet"></a>walletCommand: <code>geth wallet import /path/to/my/presale.wallet</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">importWallet</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	keyfile := ctx.Args().First()</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(keyfile) == <span class="number">0</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"keyfile must be given as argument"</span>)</div><div class="line">	&#125;</div><div class="line">	keyJSON, err := ioutil.ReadFile(keyfile)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Could not read wallet file: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	stack, _ := makeConfigNode(ctx)</div><div class="line">	passphrase := getPassPhrase(<span class="string">""</span>, <span class="literal">false</span>, <span class="number">0</span>, utils.MakePasswordList(ctx))</div><div class="line"></div><div class="line">	ks := stack.AccountManager().Backends(keystore.KeyStoreType)[<span class="number">0</span>].(*keystore.KeyStore)</div><div class="line">	acct, err := ks.ImportPreSaleKey(keyJSON, passphrase)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"%v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Address: &#123;%x&#125;\n"</span>, acct.Address)</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>AccountManager</code> 管理以太坊预售钱包。</p>
<h2 id="consolecmd-go"><a href="#consolecmd-go" class="headerlink" title="consolecmd.go"></a>consolecmd.go</h2><h3 id="consoleCommand-geth-console"><a href="#consoleCommand-geth-console" class="headerlink" title="consoleCommand: geth console"></a>consoleCommand: <code>geth console</code></h3><p>启动一个 Javascript 交互式环境</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">localConsole</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	node := makeFullNode(ctx)</div><div class="line">	startNode(ctx, node)</div><div class="line">	<span class="keyword">defer</span> node.Stop()</div><div class="line"></div><div class="line">	client, err := node.Attach()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to attach to the inproc geth: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	config := console.Config&#123;</div><div class="line">		DataDir: utils.MakeDataDir(ctx),</div><div class="line">		DocRoot: ctx.GlobalString(utils.JSpathFlag.Name),</div><div class="line">		Client:  client,</div><div class="line">		Preload: utils.MakeConsolePreloads(ctx),</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	console, err := console.New(config)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to start the JavaScript console: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> console.Stop(<span class="literal">false</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> script := ctx.GlobalString(utils.ExecFlag.Name); script != <span class="string">""</span> &#123;</div><div class="line">		console.Evaluate(script)</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line">	console.Welcome()</div><div class="line">	console.Interactive()</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动本地的一个交互式 Javascript 环境，功能是通过 <code>console</code> 模块提供的，而 <code>console</code> 模块是对 <a href="https://github.com/robertkrimen/otto" target="_blank" rel="external">robertkrimen/otto</a> 的一个封装。otto 是一个 Golang 实现的 Javascript 解释器，可以实现在 Golang 中执行 Javascript，并且可以让在虚拟机里的 Javascript 调用 Golang 函数，实现 Golang 和 Javascript 的相互操作。</p>
<h3 id="attachCommand"><a href="#attachCommand" class="headerlink" title="attachCommand"></a>attachCommand</h3><p>启动一个 JS 交互式环境(连接到节点)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">remoteConsole</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	endpoint := ctx.Args().First()</div><div class="line">	<span class="keyword">if</span> endpoint == <span class="string">""</span> &#123;</div><div class="line">		path := node.DefaultDataDir()</div><div class="line">		<span class="keyword">if</span> ctx.GlobalIsSet(utils.DataDirFlag.Name) &#123;</div><div class="line">			path = ctx.GlobalString(utils.DataDirFlag.Name)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> path != <span class="string">""</span> &#123;</div><div class="line">			<span class="keyword">if</span> ctx.GlobalBool(utils.TestnetFlag.Name) &#123;</div><div class="line">				path = filepath.Join(path, <span class="string">"testnet"</span>)</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> ctx.GlobalBool(utils.RinkebyFlag.Name) &#123;</div><div class="line">				path = filepath.Join(path, <span class="string">"rinkeby"</span>)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		endpoint = fmt.Sprintf(<span class="string">"%s/geth.ipc"</span>, path)</div><div class="line">	&#125;</div><div class="line">	client, err := dialRPC(endpoint)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Unable to attach to remote geth: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	config := console.Config&#123;</div><div class="line">		DataDir: utils.MakeDataDir(ctx),</div><div class="line">		DocRoot: ctx.GlobalString(utils.JSpathFlag.Name),</div><div class="line">		Client:  client,</div><div class="line">		Preload: utils.MakeConsolePreloads(ctx),</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	console, err := console.New(config)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to start the JavaScript console: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> console.Stop(<span class="literal">false</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> script := ctx.GlobalString(utils.ExecFlag.Name); script != <span class="string">""</span> &#123;</div><div class="line">		console.Evaluate(script)</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	console.Welcome()</div><div class="line">	console.Interactive()</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过指定 endpoint 的方式，连接到某个节点的交互式 Javascript 环境。</p>
<h3 id="javascriptCommand-geth-js-lt-jsfile-gt-jsfile"><a href="#javascriptCommand-geth-js-lt-jsfile-gt-jsfile" class="headerlink" title="javascriptCommand: geth js &lt;jsfile&gt; [jsfile...]"></a>javascriptCommand: <code>geth js &lt;jsfile&gt; [jsfile...]</code></h3><p>执行 Javascript 文件中的命令(可以为多个文件)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ephemeralConsole</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	node := makeFullNode(ctx)</div><div class="line">	startNode(ctx, node)</div><div class="line">	<span class="keyword">defer</span> node.Stop()</div><div class="line"></div><div class="line">	client, err := node.Attach()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to attach to the inproc geth: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	config := console.Config&#123;</div><div class="line">		DataDir: utils.MakeDataDir(ctx),</div><div class="line">		DocRoot: ctx.GlobalString(utils.JSpathFlag.Name),</div><div class="line">		Client:  client,</div><div class="line">		Preload: utils.MakeConsolePreloads(ctx),</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	console, err := console.New(config)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Failed to start the JavaScript console: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> console.Stop(<span class="literal">false</span>)</div><div class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> ctx.Args() &#123;</div><div class="line">		<span class="keyword">if</span> err = console.Execute(file); err != <span class="literal">nil</span> &#123;</div><div class="line">			utils.Fatalf(<span class="string">"Failed to execute %s: %v"</span>, file, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	abort := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</div><div class="line">	signal.Notify(abort, syscall.SIGINT, syscall.SIGTERM)</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		&lt;-abort</div><div class="line">		os.Exit(<span class="number">0</span>)</div><div class="line">	&#125;()</div><div class="line">	console.Stop(<span class="literal">true</span>)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过遍历调用传输的文件路径，执行 <code>console.Execute</code>，执行 js 命令。</p>
<h2 id="misccmd-go"><a href="#misccmd-go" class="headerlink" title="misccmd.go"></a>misccmd.go</h2><h3 id="makecacheCommand-geth-makecache-lt-block-number-gt-lt-outputdir-gt"><a href="#makecacheCommand-geth-makecache-lt-block-number-gt-lt-outputdir-gt" class="headerlink" title="makecacheCommand: geth makecache &lt;block number&gt; &lt;outputdir&gt;"></a>makecacheCommand: <code>geth makecache &lt;block number&gt; &lt;outputdir&gt;</code></h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func makecache(ctx *<span class="keyword">cli</span>.Context) <span class="keyword">error</span> &#123;</div><div class="line">	<span class="keyword">args</span> := ctx.<span class="keyword">Args</span>()</div><div class="line">	<span class="keyword">if</span> len(<span class="keyword">args</span>) != 2 &#123;</div><div class="line">		utils.Fatalf(`Usage: geth makecache &lt;block number&gt; &lt;outputdir&gt;`)</div><div class="line">	&#125;</div><div class="line">	block, <span class="keyword">err</span> := strconv.ParseUint(<span class="keyword">args</span>[0], 0, 64)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Invalid block number: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	ethash.MakeCache(block, <span class="keyword">args</span>[1])</div><div class="line"></div><div class="line">	<span class="keyword">return</span> nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成 ethash 的验证缓存。这部分内容将在<a href="#TODO">go-ethereum 源码笔记（miner，consensus 模块）</a>描述。</p>
<h3 id="makedagCommand-geth-makedag-lt-block-number-gt-lt-outputdir-gt"><a href="#makedagCommand-geth-makedag-lt-block-number-gt-lt-outputdir-gt" class="headerlink" title="makedagCommand: geth makedag &lt;block number&gt; &lt;outputdir&gt;"></a>makedagCommand: <code>geth makedag &lt;block number&gt; &lt;outputdir&gt;</code></h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func makedag(ctx *<span class="keyword">cli</span>.Context) <span class="keyword">error</span> &#123;</div><div class="line">	<span class="keyword">args</span> := ctx.<span class="keyword">Args</span>()</div><div class="line">	<span class="keyword">if</span> len(<span class="keyword">args</span>) != 2 &#123;</div><div class="line">		utils.Fatalf(`Usage: geth makedag &lt;block number&gt; &lt;outputdir&gt;`)</div><div class="line">	&#125;</div><div class="line">	block, <span class="keyword">err</span> := strconv.ParseUint(<span class="keyword">args</span>[0], 0, 64)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"Invalid block number: %v"</span>, <span class="keyword">err</span>)</div><div class="line">	&#125;</div><div class="line">	ethash.MakeDataset(block, <span class="keyword">args</span>[1])</div><div class="line"></div><div class="line">	<span class="keyword">return</span> nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调用 ethash 的 <code>MakeDataset</code>，生成挖矿需要的 DAG 数据集。</p>
<h3 id="versionCommand-geth-version"><a href="#versionCommand-geth-version" class="headerlink" title="versionCommand: geth version"></a>versionCommand: <code>geth version</code></h3><p>输出版本号。</p>
<h3 id="bugCommand"><a href="#bugCommand" class="headerlink" title="bugCommand"></a>bugCommand</h3><p>给 <code>https://github.com/ethereum/go-ethereum/issues/new</code> 这个 url 拼接参数，给源代码仓库提一个 issue</p>
<h3 id="licenseCommand-geth-license"><a href="#licenseCommand-geth-license" class="headerlink" title="licenseCommand: geth license"></a>licenseCommand: <code>geth license</code></h3><p>输出 License 信息。</p>
<h2 id="config-go"><a href="#config-go" class="headerlink" title="config.go"></a>config.go</h2><h3 id="dumpConfigCommand-geth-dumpconfig"><a href="#dumpConfigCommand-geth-dumpconfig" class="headerlink" title="dumpConfigCommand: geth dumpconfig"></a>dumpConfigCommand: <code>geth dumpconfig</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dumpConfig</span><span class="params">(ctx *cli.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	_, cfg := makeConfigNode(ctx)</div><div class="line">	comment := <span class="string">""</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> cfg.Eth.Genesis != <span class="literal">nil</span> &#123;</div><div class="line">		cfg.Eth.Genesis = <span class="literal">nil</span></div><div class="line">		comment += <span class="string">"# Note: this config doesn't contain the genesis block.\n\n"</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	out, err := tomlSettings.Marshal(&amp;cfg)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line">	io.WriteString(os.Stdout, comment)</div><div class="line">	os.Stdout.Write(out)</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>makeConfigNode</code> 前面已经提过，这个方法用来获取当前配置信息，<code>dumpConfig</code> 函数通过 <code>makeConfigNode</code> 获取配置，然后将其输出在屏幕。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cmd 模块包含了很多子模块，基本上每个子模块表示一个可执行的命令，其中最重要的是 geth 命令，它是以太坊的命令行客户端。&lt;/p&gt;
&lt;p&gt;geth 命令是以太坊提供的一个强大的命令行工具，它是使用以太坊的入口。它包括了很多子命令，你可以通过 &lt;code&gt;geth --help&lt;/code&gt; 获得更多帮助信息。其运行方法是：&lt;code&gt;geth [选项] 命令 [命令选项][参数…]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cryptocurrency" scheme="http://knarfeh.github.io/tags/cryptocurrency/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="geth" scheme="http://knarfeh.github.io/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>go-ethereum 源码笔记（cmd 模块-其他命令）</title>
    <link href="http://knarfeh.github.io/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88cmd%20%E6%A8%A1%E5%9D%97-%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4%EF%BC%89/"/>
    <id>http://knarfeh.github.io/2018/03/10/go-ethereum 源码笔记（cmd 模块-其他命令）/</id>
    <published>2018-03-10T14:34:56.000Z</published>
    <updated>2018-08-18T07:15:55.829Z</updated>
    
    <content type="html"><![CDATA[<p>cmd 包中除了 ethereum cli 客户端还包括很多其他可执行命令。下面我们将一一分析这些子命令，与上一篇 <a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88cmd%20%E6%A8%A1%E5%9D%97-geth%20%E5%91%BD%E4%BB%A4%EF%BC%89/" target="_blank" rel="external">go-ethereum 源码笔记（cmd 模块-geth 命令）</a>一样，我们不会深入到其他模块中，这一篇仅限于 cmd 模块。</p>
<a id="more"></a>
<h2 id="abigen"><a href="#abigen" class="headerlink" title="abigen"></a>abigen</h2><p>abigen 可以根据 sol 或 abi 文件生成特定语言的封装，支持 golang, objc, java 3种语言。它也能够编译 Solidity 原文件，使开发更便利。</p>
<p>ABI 指的是 Application binary interface，字面意思是应用二进制接口。它是与区块链以外的以太坊系统中的合约进行交互的标准方式，同时也是合约与合约交互的标准方式。</p>
<p>除了通过 RPC 的方式调用，部署合约，我们还可以使用 IPC 的方式，即使用 abigen 这种方式，使得部署合约更简单，更易于与代码集成。</p>
<p>可以写一个简单的 <code>test.sol</code> 文件试一下，通过 <code>abigen --sol test.sol -pkg main --lang go --out test.go</code> 先生成一个 test.go 文件，观察这个生成的绑定文件你会发现这个文件生成了与这个合约交互的所有方法，里面还包含了部署的方法，可以通过客户端来可以调用这些方法。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">func main() &#123;</div><div class="line">	flag.<span class="keyword">Parse</span>()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> *abiFlag == <span class="string">""</span> &amp;&amp; *solFlag == <span class="string">""</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"No contract ABI (--abi) or Solidity source (--sol) specified\n"</span>)</div><div class="line">		os.<span class="keyword">Exit</span>(-1)</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (*abiFlag != <span class="string">""</span> || *binFlag != <span class="string">""</span> || *typFlag != <span class="string">""</span>) &amp;&amp; *solFlag != <span class="string">""</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"Contract ABI (--abi), bytecode (--bin) and type (--type) flags are mutually exclusive with the Solidity source (--sol) flag\n"</span>)</div><div class="line">		os.<span class="keyword">Exit</span>(-1)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> *pkgFlag == <span class="string">""</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"No destination package specified (--pkg)\n"</span>)</div><div class="line">		os.<span class="keyword">Exit</span>(-1)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> lang bind.Lang</div><div class="line">	switch *langFlag &#123;</div><div class="line">	case <span class="string">"go"</span>:</div><div class="line">		lang = bind.LangGo</div><div class="line">	case <span class="string">"java"</span>:</div><div class="line">		lang = bind.LangJava</div><div class="line">	case <span class="string">"objc"</span>:</div><div class="line">		lang = bind.LangObjC</div><div class="line">	default:</div><div class="line">		fmt.Printf(<span class="string">"Unsupported destination language \"</span>%s\<span class="string">" (--lang)\n"</span>, *langFlag)</div><div class="line">		os.<span class="keyword">Exit</span>(-1)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> (</div><div class="line">		abis  []<span class="built_in">string</span></div><div class="line">		bins  []<span class="built_in">string</span></div><div class="line">		types []<span class="built_in">string</span></div><div class="line">	)</div><div class="line">	<span class="keyword">if</span> *solFlag != <span class="string">""</span> || *abiFlag == <span class="string">"-"</span> &#123;</div><div class="line">		exclude := make(map[string]bool)</div><div class="line">		<span class="keyword">for</span> _, kind := <span class="keyword">range</span> strings.<span class="keyword">Split</span>(*excFlag, <span class="string">","</span>) &#123;</div><div class="line">			exclude[strings.ToLower(kind)] = true</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> contracts map[string]*compiler.<span class="keyword">Contract</span></div><div class="line">		<span class="keyword">var</span> <span class="keyword">err</span> <span class="keyword">error</span></div><div class="line">		<span class="keyword">if</span> *solFlag != <span class="string">""</span> &#123;</div><div class="line">			contracts, <span class="keyword">err</span> = compiler.CompileSolidity(*solcFlag, *solFlag)</div><div class="line">			<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">				fmt.Printf(<span class="string">"Failed to build Solidity contract: %v\n"</span>, <span class="keyword">err</span>)</div><div class="line">				os.<span class="keyword">Exit</span>(-1)</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			contracts, <span class="keyword">err</span> = contractsFromStdin()</div><div class="line">			<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">				fmt.Printf(<span class="string">"Failed to read input ABIs from STDIN: %v\n"</span>, <span class="keyword">err</span>)</div><div class="line">				os.<span class="keyword">Exit</span>(-1)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> name, <span class="keyword">contract</span> := <span class="keyword">range</span> contracts &#123;</div><div class="line">			<span class="keyword">if</span> exclude[strings.ToLower(name)] &#123;</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">			abi, _ := json.Marshal(<span class="keyword">contract</span>.Info.AbiDefinition) <span class="comment">// Flatten the compiler parse</span></div><div class="line">			abis = <span class="keyword">append</span>(abis, <span class="built_in">string</span>(abi))</div><div class="line">			bins = <span class="keyword">append</span>(bins, <span class="keyword">contract</span>.Code)</div><div class="line"></div><div class="line">			nameParts := strings.<span class="keyword">Split</span>(name, <span class="string">":"</span>)</div><div class="line">			types = <span class="keyword">append</span>(types, nameParts[len(nameParts)-1])</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		abi, <span class="keyword">err</span> := ioutil.ReadFile(*abiFlag)</div><div class="line">		<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">			fmt.Printf(<span class="string">"Failed to read input ABI: %v\n"</span>, <span class="keyword">err</span>)</div><div class="line">			os.<span class="keyword">Exit</span>(-1)</div><div class="line">		&#125;</div><div class="line">		abis = <span class="keyword">append</span>(abis, <span class="built_in">string</span>(abi))</div><div class="line"></div><div class="line">		bin := []byte&#123;&#125;</div><div class="line">		<span class="keyword">if</span> *binFlag != <span class="string">""</span> &#123;</div><div class="line">			<span class="keyword">if</span> bin, <span class="keyword">err</span> = ioutil.ReadFile(*binFlag); <span class="keyword">err</span> != nil &#123;</div><div class="line">				fmt.Printf(<span class="string">"Failed to read input bytecode: %v\n"</span>, <span class="keyword">err</span>)</div><div class="line">				os.<span class="keyword">Exit</span>(-1)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		bins = <span class="keyword">append</span>(bins, <span class="built_in">string</span>(bin))</div><div class="line"></div><div class="line">		kind := *typFlag</div><div class="line">		<span class="keyword">if</span> kind == <span class="string">""</span> &#123;</div><div class="line">			kind = *pkgFlag</div><div class="line">		&#125;</div><div class="line">		types = <span class="keyword">append</span>(types, kind)</div><div class="line">	&#125;</div><div class="line">	code, <span class="keyword">err</span> := bind.Bind(types, abis, bins, *pkgFlag, lang)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</div><div class="line">		fmt.Printf(<span class="string">"Failed to generate ABI binding: %v\n"</span>, <span class="keyword">err</span>)</div><div class="line">		os.<span class="keyword">Exit</span>(-1)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> *outFlag == <span class="string">""</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"%s\n"</span>, code)</div><div class="line">		<span class="built_in">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := ioutil.WriteFile(*outFlag, []byte(code), 0600); <span class="keyword">err</span> != nil &#123;</div><div class="line">		fmt.Printf(<span class="string">"Failed to write ABI binding: %v\n"</span>, <span class="keyword">err</span>)</div><div class="line">		os.<span class="keyword">Exit</span>(-1)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>abigen</code> 命令的源码很简单，实际上就是调用 <code>accounts/abi</code> 以及 Solidity 编译器，主要的实现还是在 <code>accounts/abi</code> 里，这部分我们在后面的文章会继续深入。</p>
<h2 id="bootnode"><a href="#bootnode" class="headerlink" title="bootnode"></a>bootnode</h2><p>bootnode 是 geth 客户端的精简版本，只实现了网络节点发现协议，不运行更高级别的应用协议。它可以用作轻量级引导节点，帮助在私有网络中查找 peers。</p>
<p>以太坊在启动时至少需要一个对等节点，这样才能接入整个以太坊网络，bootnode 相当于一个第三方的中介，node 在启动时会将自己的信息注册到 bootnode 的路由中，并且会从 bootnode 得到其它节点的路由信息，一旦有了对等节点信息后就可以不需要连接 bootnode。公有链的节点硬编码了一些 bootnode 节点地址。</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">func main() &#123;</div><div class="line">	var (</div><div class="line">		listenAddr  = flag.<span class="built_in">String</span>(<span class="string">"addr"</span>, <span class="string">":30301"</span>, <span class="string">"listen address"</span>)</div><div class="line">		genKey      = flag.<span class="built_in">String</span>(<span class="string">"genkey"</span>, <span class="string">""</span>, <span class="string">"generate a node key"</span>)</div><div class="line">		writeAddr   = flag.Bool(<span class="string">"writeaddress"</span>, <span class="literal">false</span>, <span class="string">"write out the node's pubkey hash and quit"</span>)</div><div class="line">		nodeKeyFile = flag.<span class="built_in">String</span>(<span class="string">"nodekey"</span>, <span class="string">""</span>, <span class="string">"private key filename"</span>)</div><div class="line">		nodeKeyHex  = flag.<span class="built_in">String</span>(<span class="string">"nodekeyhex"</span>, <span class="string">""</span>, <span class="string">"private key as hex (for testing)"</span>)</div><div class="line">		natdesc     = flag.<span class="built_in">String</span>(<span class="string">"nat"</span>, <span class="string">"none"</span>, <span class="string">"port mapping mechanism (any|none|upnp|pmp|extip:&lt;IP&gt;)"</span>)</div><div class="line">		netrestrict = flag.<span class="built_in">String</span>(<span class="string">"netrestrict"</span>, <span class="string">""</span>, <span class="string">"restrict network communication to the given IP networks (CIDR masks)"</span>)</div><div class="line">		runv5       = flag.Bool(<span class="string">"v5"</span>, <span class="literal">false</span>, <span class="string">"run a v5 topic discovery bootnode"</span>)</div><div class="line">		verbosity   = flag.<span class="built_in">Int</span>(<span class="string">"verbosity"</span>, <span class="built_in">int</span>(<span class="built_in">log</span>.LvlInfo), <span class="string">"log verbosity (0-9)"</span>)</div><div class="line">		vmodule     = flag.<span class="built_in">String</span>(<span class="string">"vmodule"</span>, <span class="string">""</span>, <span class="string">"log verbosity pattern"</span>)</div><div class="line"></div><div class="line">		nodeKey *ecdsa.PrivateKey</div><div class="line">		<span class="built_in">err</span>     <span class="keyword">error</span></div><div class="line">	)</div><div class="line">	flag.Parse()</div><div class="line"></div><div class="line">	glogger := <span class="built_in">log</span>.NewGlogHandler(<span class="built_in">log</span>.StreamHandler(os.Stderr, <span class="built_in">log</span>.TerminalFormat(<span class="literal">false</span>)))</div><div class="line">	glogger.Verbosity(<span class="built_in">log</span>.Lvl(*verbosity))</div><div class="line">	glogger.Vmodule(*vmodule)</div><div class="line">	<span class="built_in">log</span>.Root().SetHandler(glogger)</div><div class="line"></div><div class="line">	natm, <span class="built_in">err</span> := nat.Parse(*natdesc)</div><div class="line">	<span class="keyword">if</span> <span class="built_in">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"-nat: %v"</span>, <span class="built_in">err</span>)</div><div class="line">	&#125;</div><div class="line">	switch &#123;</div><div class="line">	<span class="keyword">case</span> *genKey != <span class="string">""</span>:</div><div class="line">		nodeKey, <span class="built_in">err</span> = crypto.GenerateKey()</div><div class="line">		<span class="keyword">if</span> <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"could not generate key: %v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> <span class="built_in">err</span> = crypto.SaveECDSA(*genKey, nodeKey); <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"%v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">		return</div><div class="line">	<span class="keyword">case</span> *nodeKeyFile == <span class="string">""</span> &amp;&amp; *nodeKeyHex == <span class="string">""</span>:</div><div class="line">		utils.Fatalf(<span class="string">"Use -nodekey or -nodekeyhex to specify a private key"</span>)</div><div class="line">	<span class="keyword">case</span> *nodeKeyFile != <span class="string">""</span> &amp;&amp; *nodeKeyHex != <span class="string">""</span>:</div><div class="line">		utils.Fatalf(<span class="string">"Options -nodekey and -nodekeyhex are mutually exclusive"</span>)</div><div class="line">	<span class="keyword">case</span> *nodeKeyFile != <span class="string">""</span>:</div><div class="line">		<span class="keyword">if</span> nodeKey, <span class="built_in">err</span> = crypto.LoadECDSA(*nodeKeyFile); <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"-nodekey: %v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">case</span> *nodeKeyHex != <span class="string">""</span>:</div><div class="line">		<span class="keyword">if</span> nodeKey, <span class="built_in">err</span> = crypto.HexToECDSA(*nodeKeyHex); <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"-nodekeyhex: %v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> *writeAddr &#123;</div><div class="line">		fmt.Printf(<span class="string">"%v\n"</span>, discover.PubkeyID(&amp;nodeKey.PublicKey))</div><div class="line">		os.<span class="keyword">Exit</span>(<span class="number">0</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	var restrictList *netutil.Netlist</div><div class="line">	<span class="keyword">if</span> *netrestrict != <span class="string">""</span> &#123;</div><div class="line">		restrictList, <span class="built_in">err</span> = netutil.ParseNetlist(*netrestrict)</div><div class="line">		<span class="keyword">if</span> <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"-netrestrict: %v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	addr, <span class="built_in">err</span> := net.ResolveUDPAddr(<span class="string">"udp"</span>, *listenAddr)</div><div class="line">	<span class="keyword">if</span> <span class="built_in">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"-ResolveUDPAddr: %v"</span>, <span class="built_in">err</span>)</div><div class="line">	&#125;</div><div class="line">	conn, <span class="built_in">err</span> := net.ListenUDP(<span class="string">"udp"</span>, addr)</div><div class="line">	<span class="keyword">if</span> <span class="built_in">err</span> != nil &#123;</div><div class="line">		utils.Fatalf(<span class="string">"-ListenUDP: %v"</span>, <span class="built_in">err</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	realaddr := conn.LocalAddr().(*net.UDPAddr)</div><div class="line">	<span class="keyword">if</span> natm != nil &#123;</div><div class="line">		<span class="keyword">if</span> !realaddr.IP.IsLoopback() &#123;</div><div class="line">			go nat.Map(natm, nil, <span class="string">"udp"</span>, realaddr.Port, realaddr.Port, <span class="string">"ethereum discovery"</span>)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> ext, <span class="built_in">err</span> := natm.ExternalIP(); <span class="built_in">err</span> == nil &#123;</div><div class="line">			realaddr = &amp;net.UDPAddr&#123;IP: ext, Port: realaddr.Port&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> *runv5 &#123;</div><div class="line">		<span class="keyword">if</span> _, <span class="built_in">err</span> := discv5.ListenUDP(nodeKey, conn, realaddr, <span class="string">""</span>, restrictList); <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"%v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		cfg := discover.Config&#123;</div><div class="line">			PrivateKey:   nodeKey,</div><div class="line">			AnnounceAddr: realaddr,</div><div class="line">			NetRestrict:  restrictList,</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> _, <span class="built_in">err</span> := discover.ListenUDP(conn, cfg); <span class="built_in">err</span> != nil &#123;</div><div class="line">			utils.Fatalf(<span class="string">"%v"</span>, <span class="built_in">err</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">select</span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码里可以看到，这部分功能主要来自于 p2p 模块。后续我们会深入到该模块。</p>
<h2 id="clef"><a href="#clef" class="headerlink" title="clef"></a>clef</h2><p>clef 可以用来签署交易和数据，并且可以代替 geth 的账户管理。这部分代码我没有深入研究，看起来像是账户管理的另一种封装，实际的实现在 signer 目录下。</p>
<p>可以参考：<a href="https://github.com/holiman/qtsigner/" target="_blank" rel="external">A Python/QT based graphical user interface for the ethereum signer</a></p>
<h2 id="ethkey"><a href="#ethkey" class="headerlink" title="ethkey"></a>ethkey</h2><p>ethkey 是一个可以用来操作以太坊 keyfile 的工具。 </p>
<h2 id="evm"><a href="#evm" class="headerlink" title="evm"></a>evm</h2><p>对 evm 进行一些封装</p>
<p>执行合约前，将 Transaction 类型转化为 message，创建虚拟机（EVM）对象，计算一些 Gas 消耗，执行交易完毕后创建收据（Recipet）对象返回。</p>
<h2 id="faucet"><a href="#faucet" class="headerlink" title="faucet"></a>faucet</h2><p>faucet 测试网相关代码。</p>
<p>参考：<a href="https://faucet.rinkeby.io" target="_blank" rel="external">https://faucet.rinkeby.io</a> 和 <a href="https://coincentral.com/ethereum-faucets/" target="_blank" rel="external">https://coincentral.com/ethereum-faucets/</a></p>
<h2 id="p2psim"><a href="#p2psim" class="headerlink" title="p2psim"></a>p2psim</h2><p>模拟 p2p API 请求的工具</p>
<h2 id="puppeth"><a href="#puppeth" class="headerlink" title="puppeth"></a>puppeth</h2><p>用于搭建，维护私有链</p>
<h2 id="rlpdump"><a href="#rlpdump" class="headerlink" title="rlpdump"></a>rlpdump</h2><p>RLP 是 Recursive Length Prefix 的简写。是以太坊中的序列化方法。这个模块的作用是提供 RLP 数据的格式化输出。</p>
<h2 id="swarm"><a href="#swarm" class="headerlink" title="swarm"></a>swarm</h2><p>swarm 是一个去中心化的内容存储和分发服务，这个模块是其命令行客户端。没有细看这部分代码，swarm 看起来很像 ipfs，而且代码还在快速迭代中，就不展开了。</p>
<p><a href="https://github.com/ethersphere/go-ethereum/wiki/IPFS-&amp;-SWARM" target="_blank" rel="external">IPFS &amp; SWARM</a></p>
<h2 id="wnode"><a href="#wnode" class="headerlink" title="wnode"></a>wnode</h2><p>这是一个简单的 Whisper 节点。它可以用作独立的引导节点，还可以用于不同的测试和诊断目的</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span> &#123;</span></div><div class="line">	processArgs()</div><div class="line">	initialize()</div><div class="line">	<span class="built_in">run</span>()</div><div class="line">	<span class="built_in">shutdown</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cmd 模块下的其他命令的资料相对于 geth 命令的资料还是很少的，而且有几个工具看起来有个人开发工具的性质，看起来很有用。可能使用的人很少，没法集成到 geth 成为一个子命令，但不集成为一个单独的命令又太可惜；有的工具只是某些功能的一个封装，还有的是项目外的工具的封装，例如 Solidity，Swarm。如果未来对以太坊的功能，代码比较熟悉了，需要自己封装一个工具，这些代码是很有参考价值的。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.cnblogs.com/baizx/p/7469125.html" target="_blank" rel="external">以太坊系列之十六: 使用golang与智能合约进行交互</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Diagnostic-Tool-wnode" target="_blank" rel="external">Diagnostic Tool wnode</a></li>
<li><a href="https://solidity.readthedocs.io/en/develop/abi-spec.html#application-binary-interface-specification" target="_blank" rel="external">Application Binary Interface Specification</a></li>
<li><a href="https://bitshuo.com/topic/594a8c228e822fcb444317ec" target="_blank" rel="external">以太坊源码分析（3）深入解析ABI</a></li>
<li><a href="https://bitshuo.com/topic/58b41a0408d6a0f32a5bc0b7" target="_blank" rel="external">Ethereum的ABI详解</a></li>
<li><a href="http://qjpcpu.github.io/blog/2018/02/07/shen-ru-ethereumyuan-ma-whisperxie-yi-jie-du/" target="_blank" rel="external">深入ethereum源码-whisper协议解读</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27574253" target="_blank" rel="external">合约的另一种调用方式——IPC</a></li>
<li><a href="http://8btc.com/thread-31358-1-1.html" target="_blank" rel="external">DAG有向无环图是什么？</a></li>
<li><a href="https://g2ex.github.io/2017/09/12/ethereum-guidance/" target="_blank" rel="external">以太坊私有链搭建指南</a></li>
<li><a href="http://blog.csdn.net/DDFFR/article/details/78925410" target="_blank" rel="external">以太坊bootnode测试</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cmd 包中除了 ethereum cli 客户端还包括很多其他可执行命令。下面我们将一一分析这些子命令，与上一篇 &lt;a href=&quot;https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88cmd%20%E6%A8%A1%E5%9D%97-geth%20%E5%91%BD%E4%BB%A4%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-ethereum 源码笔记（cmd 模块-geth 命令）&lt;/a&gt;一样，我们不会深入到其他模块中，这一篇仅限于 cmd 模块。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cryptocurrency" scheme="http://knarfeh.github.io/tags/cryptocurrency/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="geth" scheme="http://knarfeh.github.io/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>【podcast】Go Time</title>
    <link href="http://knarfeh.github.io/2017/11/03/%E3%80%90podcast%E3%80%91Go%20Time/"/>
    <id>http://knarfeh.github.io/2017/11/03/【podcast】Go Time/</id>
    <published>2017-11-03T09:41:35.000Z</published>
    <updated>2018-06-09T09:17:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>不定期更新。</p>
<p>最后更新时间：Sat May 20 18:49:50 CST 2018</p>
<a id="more"></a>
<p>文稿地址：<a href="https://github.com/thechangelog/transcripts/" target="_blank" rel="external">thechangelog/transcripts</a></p>
<h2 id="79-New-Go-branding-strategy-May-8-2018，时长：1-12-20"><a href="#79-New-Go-branding-strategy-May-8-2018，时长：1-12-20" class="headerlink" title="#79 New Go branding strategy, May 8, 2018，时长：1:12:20"></a>#79 <a href="https://changelog.com/gotime/79" target="_blank" rel="external">New Go branding strategy</a>, May 8, 2018，时长：1:12:20</h2><ul>
<li>嘉宾是 Go 团队的产品 Leader，<a href="https://twitter.com/search?q=spf13&amp;src=typd" target="_blank" rel="external">Steve Francia</a>，之前在 MongoDB, Docker 工作</li>
<li>2017 年 Go 的用户量增长了 76%，也就是说超过70万的开发者开始用 Go</li>
<li><a href="https://blog.golang.org/gopher" target="_blank" rel="external">https://blog.golang.org/gopher</a></li>
<li>39:47 谈到 Golang Logo 相关的版权问题</li>
<li><a href="https://golang.org/s/brandbook" target="_blank" rel="external">https://golang.org/s/brandbook</a></li>
<li><a href="https://github.com/google/gvisor" target="_blank" rel="external">gVisor</a>，k8s 和 Docker 可以使用的容器运行时，可以查看这篇 <a href="https://cloudplatform.googleblog.com/2018/05/Open-sourcing-gVisor-a-sandboxed-container-runtime.html" target="_blank" rel="external">博客</a></li>
</ul>
<p>TOREVIEW</p>
<h2 id="78-Hacking-drones-with-Go-Apr-30-2018-时长：1-10-02"><a href="#78-Hacking-drones-with-Go-Apr-30-2018-时长：1-10-02" class="headerlink" title="#78 Hacking drones with Go, Apr 30, 2018, 时长：1:10:02"></a>#78 <a href="https://changelog.com/gotime/78" target="_blank" rel="external">Hacking drones with Go</a>, Apr 30, 2018, 时长：1:10:02</h2><ul>
<li>Computer Vision, OpenCV, <a href="https://gocv.io/" target="_blank" rel="external">GoCV</a></li>
<li>计算机视觉的一个非常好的应用是拍照防抖，应用到大疆无人机，Tello</li>
</ul>
<p>TODO</p>
<h2 id="BONUS-Go-and-WebAssembly-Wasm-–-BONUS-Apr-26-2018-时长："><a href="#BONUS-Go-and-WebAssembly-Wasm-–-BONUS-Apr-26-2018-时长：" class="headerlink" title="#BONUS Go and WebAssembly (Wasm) – BONUS, Apr 26, 2018, 时长："></a>#BONUS <a href="https://changelog.com/news/J3L0/visit" target="_blank" rel="external">Go and WebAssembly (Wasm) – BONUS</a>, Apr 26, 2018, 时长：</h2><h2 id="76-Building-a-distributed-index-with-Go-时长："><a href="#76-Building-a-distributed-index-with-Go-时长：" class="headerlink" title="#76 Building a distributed index with Go, , 时长："></a>#76 <a href="https://changelog.com/gotime/76" target="_blank" rel="external">Building a distributed index with Go</a>, , 时长：</h2><h2 id="75-GoLand-IDE-and-managing-Gopher-Slack-时长："><a href="#75-GoLand-IDE-and-managing-Gopher-Slack-时长：" class="headerlink" title="#75 GoLand IDE and managing Gopher Slack, , 时长："></a>#75 <a href="https://changelog.com/gotime/75" target="_blank" rel="external">GoLand IDE and managing Gopher Slack</a>, , 时长：</h2><h2 id="74-Gophercises-and-creating-content-for-Gophers-时长："><a href="#74-Gophercises-and-creating-content-for-Gophers-时长：" class="headerlink" title="#74 Gophercises and creating content for Gophers, , 时长："></a>#74 <a href="https://changelog.com/gotime/74" target="_blank" rel="external">Gophercises and creating content for Gophers</a>, , 时长：</h2><h2 id="73-CockroachDB-and-distributed-databases-in-Go-时长："><a href="#73-CockroachDB-and-distributed-databases-in-Go-时长：" class="headerlink" title="#73 CockroachDB and distributed databases in Go, , 时长："></a>#73 <a href="https://changelog.com/gotime/73" target="_blank" rel="external">CockroachDB and distributed databases in Go</a>, , 时长：</h2><h2 id="72-Learning-and-teaching-Go-时长："><a href="#72-Learning-and-teaching-Go-时长：" class="headerlink" title="#72 Learning and teaching Go, , 时长："></a>#72 <a href="https://changelog.com/gotime/72" target="_blank" rel="external">Learning and teaching Go</a>, , 时长：</h2><h2 id="71-Go-is-for-everyone-时长："><a href="#71-Go-is-for-everyone-时长：" class="headerlink" title="#71 Go is for everyone, , 时长："></a>#71 <a href="https://changelog.com/gotime/71" target="_blank" rel="external">Go is for everyone</a>, , 时长：</h2><h2 id="70-From-Russia-with-love-时长："><a href="#70-From-Russia-with-love-时长：" class="headerlink" title="#70 From Russia with love, , 时长："></a>#70 <a href="https://changelog.com/gotime/70" target="_blank" rel="external">From Russia with love</a>, , 时长：</h2><h2 id="69-Golang-Flow-FaaS-and-Buffalo-Mar-9-2018-时长：00-47-57"><a href="#69-Golang-Flow-FaaS-and-Buffalo-Mar-9-2018-时长：00-47-57" class="headerlink" title="#69 Golang Flow, FaaS, and Buffalo,  Mar 9, 2018 , 时长：00:47:57"></a>#69 <a href="https://changelog.com/gotime/69" target="_blank" rel="external">Golang Flow, FaaS, and Buffalo</a>,  Mar 9, 2018 , 时长：00:47:57</h2><ul>
<li>links<ul>
<li><a href="https://blog.cloudflare.com/using-go-as-a-scripting-language-in-linux/" target="_blank" rel="external">Using Go as a scripting language in Linux</a></li>
</ul>
</li>
<li>嘉宾 Brian Scott 从事 Web 开发相关的工作，面向客户的应用，Web 技术，云自动化等等，维护 GolangFlow.io 这个网站(灵感来自 <a href="rubyflow.com">rubyflow</a>），给 <a href="https://github.com/gocolly/colly" target="_blank" rel="external">Colly</a> 贡献过代码。给 Amazon Lambda 贡献 Go 的支持，玩过一段时间 <a href="https://www.openfaas.com/" target="_blank" rel="external">OpenFaaS</a>。最近在看区块链相关的项目。</li>
<li>FaaS 最佳的使用场景可能是 ETL，转码之类的工作。</li>
<li>16:00 开始聊 Buffalo</li>
<li>24:58 开始聊 versioned go，dep</li>
<li>Go 1.10 要出了</li>
<li><a href="https://blog.cloudflare.com/using-go-as-a-scripting-language-in-linux/" target="_blank" rel="external">Cloudflare post: using-go-as-a-scripting-language-in-linux</a></li>
</ul>
<p>TOREVIEW</p>
<h2 id="68-SPECIAL-—-Ask-us-anything-pt-2-时长："><a href="#68-SPECIAL-—-Ask-us-anything-pt-2-时长：" class="headerlink" title="#68 SPECIAL — Ask us anything! (pt. 2), , 时长："></a>#68 <a href="https://changelog.com/gotime/68" target="_blank" rel="external">SPECIAL — Ask us anything! (pt. 2)</a>, , 时长：</h2><h2 id="67-Supporting-the-Go-community-时长："><a href="#67-Supporting-the-Go-community-时长：" class="headerlink" title="#67 Supporting the Go community, , 时长："></a>#67 <a href="https://changelog.com/gotime/67" target="_blank" rel="external">Supporting the Go community</a>, , 时长：</h2><h2 id="66-Performance-Fuzzing-and-Magic-时长："><a href="#66-Performance-Fuzzing-and-Magic-时长：" class="headerlink" title="#66 Performance, Fuzzing, and Magic, , 时长："></a>#66 <a href="https://changelog.com/gotime/66" target="_blank" rel="external">Performance, Fuzzing, and Magic</a>, , 时长：</h2><h2 id="65-GopherCon-Brazil-amp-Genetics-with-Vitor-De-Mario-时长："><a href="#65-GopherCon-Brazil-amp-Genetics-with-Vitor-De-Mario-时长：" class="headerlink" title="#65 GopherCon Brazil &amp; Genetics with Vitor De Mario, , 时长："></a>#65 <a href="https://changelog.com/gotime/65" target="_blank" rel="external">GopherCon Brazil &amp; Genetics with Vitor De Mario</a>, , 时长：</h2><h2 id="64-InfluxDB-amp-IoT-Data-时长："><a href="#64-InfluxDB-amp-IoT-Data-时长：" class="headerlink" title="#64 InfluxDB &amp; IoT Data, , 时长："></a>#64 <a href="https://changelog.com/gotime/64" target="_blank" rel="external">InfluxDB &amp; IoT Data</a>, , 时长：</h2><h2 id="63-Kubernetes-and-Virtual-Kubelet-Jan-15-2018-时长：1-13-16"><a href="#63-Kubernetes-and-Virtual-Kubelet-Jan-15-2018-时长：1-13-16" class="headerlink" title="#63 Kubernetes and Virtual Kubelet, Jan 15, 2018, 时长：1:13:16"></a>#63 <a href="https://changelog.com/gotime/63" target="_blank" rel="external">Kubernetes and Virtual Kubelet</a>, Jan 15, 2018, 时长：1:13:16</h2><h2 id="62-Building-Blocks-with-Jeff-Lindsay-Dec-1-2017-时长：1-10-31"><a href="#62-Building-Blocks-with-Jeff-Lindsay-Dec-1-2017-时长：1-10-31" class="headerlink" title="#62 Building Blocks with Jeff Lindsay, Dec 1, 2017, 时长：1:10:31"></a>#62 <a href="https://changelog.com/gotime/62" target="_blank" rel="external">Building Blocks with Jeff Lindsay</a>, Dec 1, 2017, 时长：1:10:31</h2><ul>
<li>嘉宾是 <a href="">Jeff Lindsay</a></li>
</ul>
<h2 id="61-Loggregator-gRPC-and-Diodes-with-Jason-Keene-amp-Andrew-Poydence-时长："><a href="#61-Loggregator-gRPC-and-Diodes-with-Jason-Keene-amp-Andrew-Poydence-时长：" class="headerlink" title="#61 Loggregator, gRPC, and Diodes with Jason Keene &amp; Andrew Poydence, , 时长："></a>#61 <a href="https://changelog.com/gotime/61" target="_blank" rel="external">Loggregator, gRPC, and Diodes with Jason Keene &amp; Andrew Poydence</a>, , 时长：</h2><h2 id="60-Why-WADL-When-You-Can-Swagger-with-Ivan-Porto-Carrero-时长："><a href="#60-Why-WADL-When-You-Can-Swagger-with-Ivan-Porto-Carrero-时长：" class="headerlink" title="#60 Why WADL When You Can Swagger? with Ivan Porto Carrero, , 时长："></a>#60 <a href="https://changelog.com/gotime/60" target="_blank" rel="external">Why WADL When You Can Swagger? with Ivan Porto Carrero</a>, , 时长：</h2><h2 id="59-Improved-Improved-Improved-i3-with-Michael-Stapelberg-时长："><a href="#59-Improved-Improved-Improved-i3-with-Michael-Stapelberg-时长：" class="headerlink" title="#59 Improved Improved Improved (i3) with Michael Stapelberg, , 时长："></a>#59 <a href="https://changelog.com/gotime/59" target="_blank" rel="external">Improved Improved Improved (i3) with Michael Stapelberg</a>, , 时长：</h2><h2 id="58-Full-time-Open-Source-with-Dmitri-Shuralyov-时长："><a href="#58-Full-time-Open-Source-with-Dmitri-Shuralyov-时长：" class="headerlink" title="#58 Full-time Open Source with Dmitri Shuralyov,  , 时长："></a>#58 <a href="https://changelog.com/gotime/58" target="_blank" rel="external">Full-time Open Source with Dmitri Shuralyov</a>,  , 时长：</h2><h2 id="57-Presenting-a-Pragmatic-Perspective-with-Cindy-Sridharan-时长："><a href="#57-Presenting-a-Pragmatic-Perspective-with-Cindy-Sridharan-时长：" class="headerlink" title="#57 Presenting a Pragmatic Perspective with Cindy Sridharan,  , 时长："></a>#57 <a href="https://changelog.com/gotime/57" target="_blank" rel="external">Presenting a Pragmatic Perspective with Cindy Sridharan</a>,  , 时长：</h2><h2 id="56-Container-Security-and-Demystifying-Complexity-with-Liz-Rice-时长："><a href="#56-Container-Security-and-Demystifying-Complexity-with-Liz-Rice-时长：" class="headerlink" title="#56 Container Security and Demystifying Complexity with Liz Rice, , 时长："></a>#56 <a href="https://changelog.com/gotime/56" target="_blank" rel="external">Container Security and Demystifying Complexity with Liz Rice</a>, , 时长：</h2><h2 id="55-Dep-Cross-platform-and-Getting-Started-with-Carolyn-Van-Slyck-时长："><a href="#55-Dep-Cross-platform-and-Getting-Started-with-Carolyn-Van-Slyck-时长：" class="headerlink" title="#55 Dep, Cross-platform, and Getting Started with Carolyn Van Slyck,  , 时长："></a>#55 <a href="https://changelog.com/gotime/55" target="_blank" rel="external">Dep, Cross-platform, and Getting Started with Carolyn Van Slyck</a>,  , 时长：</h2><h2 id="54-Go-at-Walmart-and-Scale-with-Chase-Adams-时长："><a href="#54-Go-at-Walmart-and-Scale-with-Chase-Adams-时长：" class="headerlink" title="#54 Go at Walmart (and Scale) with Chase Adams,  , 时长："></a>#54 <a href="https://changelog.com/gotime/54" target="_blank" rel="external">Go at Walmart (and Scale) with Chase Adams</a>,  , 时长：</h2><h2 id="53-GopherCon-2017-A-Retrospective-时长："><a href="#53-GopherCon-2017-A-Retrospective-时长：" class="headerlink" title="#53 GopherCon 2017: A Retrospective,  , 时长："></a>#53 <a href="https://changelog.com/gotime/53" target="_blank" rel="external">GopherCon 2017: A Retrospective</a>,  , 时长：</h2><h2 id="52-All-About-The-Go-Compiler-with-David-Chase-时长："><a href="#52-All-About-The-Go-Compiler-with-David-Chase-时长：" class="headerlink" title="#52 All About The Go Compiler with David Chase,  , 时长："></a>#52 <a href="https://changelog.com/gotime/52" target="_blank" rel="external">All About The Go Compiler with David Chase</a>,  , 时长：</h2><h2 id="51-Infosec-Research-and-App-Security-Jul-19-2017-时长："><a href="#51-Infosec-Research-and-App-Security-Jul-19-2017-时长：" class="headerlink" title="#51 Infosec Research and App Security, Jul 19, 2017 , 时长："></a>#51 <a href="https://changelog.com/gotime/51" target="_blank" rel="external">Infosec Research and App Security</a>, Jul 19, 2017 , 时长：</h2><h2 id="50-Bringing-Kubernetes-to-Azure-with-Kris-Nova-时长："><a href="#50-Bringing-Kubernetes-to-Azure-with-Kris-Nova-时长：" class="headerlink" title="#50 Bringing Kubernetes to Azure with Kris Nova, , 时长："></a>#50 <a href="https://changelog.com/gotime/50" target="_blank" rel="external">Bringing Kubernetes to Azure with Kris Nova</a>, , 时长：</h2><h2 id="49-Adventures-in-VS-Code-with-Ramya-Rao-时长："><a href="#49-Adventures-in-VS-Code-with-Ramya-Rao-时长：" class="headerlink" title="#49 Adventures in VS Code with Ramya Rao, , 时长："></a>#49 <a href="https://changelog.com/gotime/49" target="_blank" rel="external">Adventures in VS Code with Ramya Rao</a>, , 时长：</h2><h2 id="48-Restic-and-Backups-Done-Right-with-Alexander-Neumann-时长："><a href="#48-Restic-and-Backups-Done-Right-with-Alexander-Neumann-时长：" class="headerlink" title="#48 Restic and Backups (Done Right) with Alexander Neumann, , 时长："></a>#48 <a href="https://changelog.com/gotime/48" target="_blank" rel="external">Restic and Backups (Done Right) with Alexander Neumann</a>, , 时长：</h2><h2 id="47-Docker-Moby-and-Containers-with-Solomon-Hykes-May-25-2017-时长-1-09-46"><a href="#47-Docker-Moby-and-Containers-with-Solomon-Hykes-May-25-2017-时长-1-09-46" class="headerlink" title="#47 Docker, Moby, and Containers with Solomon Hykes, May 25, 2017 , 时长: 1:09:46"></a>#47 <a href="https://changelog.com/gotime/47" target="_blank" rel="external">Docker, Moby, and Containers with Solomon Hykes</a>, May 25, 2017 , 时长: 1:09:46</h2><ul>
<li>嘉宾是 Solomon Hykes，Docker 的创始人和 CTO</li>
<li>DotCloud, 类似 Heroku, GAE，后改名 Docker</li>
<li>在 DotCloud 不使用 Go，使用 Python</li>
<li>后半段在聊为什么改名 Moby 以及商业化和开源之间的一些矛盾</li>
</ul>
<p>TOREVIEW</p>
<h2 id="46-Periph-io-Drivers-and-Hardware-with-Marc-Antoine-Ruel-时长："><a href="#46-Periph-io-Drivers-and-Hardware-with-Marc-Antoine-Ruel-时长：" class="headerlink" title="#46 Periph.io, Drivers, and Hardware with Marc-Antoine Ruel, , 时长："></a>#46 <a href="https://changelog.com/gotime/46" target="_blank" rel="external">Periph.io, Drivers, and Hardware with Marc-Antoine Ruel</a>, , 时长：</h2><h2 id="45-SPECIAL-—-Ask-Us-Anything-时长："><a href="#45-SPECIAL-—-Ask-Us-Anything-时长：" class="headerlink" title="#45 SPECIAL — Ask Us Anything!, , 时长："></a>#45 <a href="https://changelog.com/gotime/45" target="_blank" rel="external">SPECIAL — Ask Us Anything!</a>, , 时长：</h2><h2 id="44-Go4-and-Contributing-to-Go-with-Brad-Fitzpatrick-时长："><a href="#44-Go4-and-Contributing-to-Go-with-Brad-Fitzpatrick-时长：" class="headerlink" title="#44 Go4 and Contributing to Go with Brad Fitzpatrick, , 时长："></a>#44 <a href="https://changelog.com/gotime/44" target="_blank" rel="external">Go4 and Contributing to Go with Brad Fitzpatrick</a>, , 时长：</h2><h2 id="43-Getting-Better-Mentoring-and-Drawing-Gophers-with-Ashley-McNamara-时长："><a href="#43-Getting-Better-Mentoring-and-Drawing-Gophers-with-Ashley-McNamara-时长：" class="headerlink" title="#43 Getting Better, Mentoring, and Drawing Gophers with Ashley McNamara, , 时长："></a>#43 <a href="https://changelog.com/gotime/43" target="_blank" rel="external">Getting Better, Mentoring, and Drawing Gophers with Ashley McNamara</a>, , 时长：</h2><h2 id="42-Race-Detection-Firmware-and-Production-grade-Go-with-Kavya-Joshi-时长："><a href="#42-Race-Detection-Firmware-and-Production-grade-Go-with-Kavya-Joshi-时长：" class="headerlink" title="#42 Race Detection, Firmware, and Production-grade Go with Kavya Joshi, , 时长："></a>#42 <a href="https://changelog.com/gotime/42" target="_blank" rel="external">Race Detection, Firmware, and Production-grade Go with Kavya Joshi</a>, , 时长：</h2><h2 id="41-Distributed-Messaging-and-Network-Clients-with-Wally-Quevedo-时长："><a href="#41-Distributed-Messaging-and-Network-Clients-with-Wally-Quevedo-时长：" class="headerlink" title="#41 Distributed Messaging and Network Clients with Wally Quevedo, , 时长："></a>#41 <a href="https://changelog.com/gotime/41" target="_blank" rel="external">Distributed Messaging and Network Clients with Wally Quevedo</a>, , 时长：</h2><h2 id="40-Game-Development-and-Rebuilding-Microservices-with-Luna-Duclos-时长："><a href="#40-Game-Development-and-Rebuilding-Microservices-with-Luna-Duclos-时长：" class="headerlink" title="#40 Game Development and Rebuilding Microservices with Luna Duclos, , 时长："></a>#40 <a href="https://changelog.com/gotime/40" target="_blank" rel="external">Game Development and Rebuilding Microservices with Luna Duclos</a>, , 时长：</h2><h2 id="39-Splice-Audio-and-Compassion-with-Matt-Aimonetti-时长："><a href="#39-Splice-Audio-and-Compassion-with-Matt-Aimonetti-时长：" class="headerlink" title="#39 Splice, Audio, and Compassion with Matt Aimonetti, , 时长："></a>#39 <a href="https://changelog.com/gotime/39" target="_blank" rel="external">Splice, Audio, and Compassion with Matt Aimonetti</a>, , 时长：</h2><h2 id="38-Go-Developer-Survey-with-Steve-Francia-时长："><a href="#38-Go-Developer-Survey-with-Steve-Francia-时长：" class="headerlink" title="#38 Go Developer Survey with Steve Francia, , 时长："></a>#38 <a href="https://changelog.com/gotime/38" target="_blank" rel="external">Go Developer Survey with Steve Francia</a>, , 时长：</h2><h2 id="37-Gobot-Hardware-and-Gatekeeping-with-Ron-Evans-时长："><a href="#37-Gobot-Hardware-and-Gatekeeping-with-Ron-Evans-时长：" class="headerlink" title="#37 Gobot, Hardware, and Gatekeeping with Ron Evans, , 时长："></a>#37 <a href="https://changelog.com/gotime/37" target="_blank" rel="external">Gobot, Hardware, and Gatekeeping with Ron Evans</a>, , 时长：</h2><h2 id="36-Dependency-Management-Semver-and-Community-Consensus-with-Sam-Boyer-时长："><a href="#36-Dependency-Management-Semver-and-Community-Consensus-with-Sam-Boyer-时长：" class="headerlink" title="#36 Dependency Management, Semver, and Community Consensus with Sam Boyer, , 时长："></a>#36 <a href="https://changelog.com/gotime/36" target="_blank" rel="external">Dependency Management, Semver, and Community Consensus with Sam Boyer</a>, , 时长：</h2><h2 id="35-Honeycomb-Complex-Systems-and-Saving-Sanity-with-Charity-Majors-时长："><a href="#35-Honeycomb-Complex-Systems-and-Saving-Sanity-with-Charity-Majors-时长：" class="headerlink" title="#35 Honeycomb, Complex Systems, and Saving Sanity with Charity Majors, , 时长："></a>#35 <a href="https://changelog.com/gotime/35" target="_blank" rel="external">Honeycomb, Complex Systems, and Saving Sanity with Charity Majors</a>, , 时长：</h2><h2 id="34-Pachyderm-Provenance-and-Data-Lakes-with-Joe-Doliner-时长："><a href="#34-Pachyderm-Provenance-and-Data-Lakes-with-Joe-Doliner-时长：" class="headerlink" title="#34 Pachyderm, Provenance, and Data Lakes with Joe Doliner, , 时长："></a>#34 <a href="https://changelog.com/gotime/34" target="_blank" rel="external">Pachyderm, Provenance, and Data Lakes with Joe Doliner</a>, , 时长：</h2><h2 id="33-Gopherize-me-GitHub-Stars-and-BitBar-with-Mat-Ryer-时长："><a href="#33-Gopherize-me-GitHub-Stars-and-BitBar-with-Mat-Ryer-时长：" class="headerlink" title="#33 Gopherize.me, GitHub Stars and BitBar with Mat Ryer, , 时长："></a>#33 <a href="https://changelog.com/gotime/33" target="_blank" rel="external">Gopherize.me, GitHub Stars and BitBar with Mat Ryer</a>, , 时长：</h2><h2 id="32-Hellogopher-whosthere-with-Filippo-Valsorda-时长："><a href="#32-Hellogopher-whosthere-with-Filippo-Valsorda-时长：" class="headerlink" title="#32 Hellogopher, whosthere? with Filippo Valsorda, , 时长："></a>#32 <a href="https://changelog.com/gotime/32" target="_blank" rel="external">Hellogopher, whosthere? with Filippo Valsorda</a>, , 时长：</h2><h2 id="31-Go-Jocko-and-Kafka-with-Travis-Jeffery-JAN-26-2017-时长："><a href="#31-Go-Jocko-and-Kafka-with-Travis-Jeffery-JAN-26-2017-时长：" class="headerlink" title="#31 Go, Jocko, and Kafka with Travis Jeffery, JAN 26 2017, 时长："></a>#31 <a href="https://changelog.com/gotime/31" target="_blank" rel="external">Go, Jocko, and Kafka with Travis Jeffery</a>, JAN 26 2017, 时长：</h2><p>最近在关注 Jocko 这个项目，所以先把这期听完吧。这期嘉宾是 Travis Jeffery，Jocko 的作者。加拿大人，父母是企业家（农场主？）一直到大学，最有意思的经历是：『If I don’t finish my degree, can you get me into the U.S.?』『Okay, well I’m done.』『So I dropped out and started a startup with some friends and we ended up selling out to Shopify』</p>
<p>Travis 谈为什么开发 Go 版本的 Kafka。用了很多年。他觉得 Kafka 历史包袱很重，比如依赖 JVM，Zookeeper，他同时非常不喜欢 Kafka 的配置方式。Kafka 是：replicated，distributed commit log service。jocko 项目状态：就快 feature-complete。</p>
<p>Kafka 客户端做的事情：根据 Kafka 协议进行编码。写数据用的是追加的方式，维护了一个 offset，它表明下一个字节的数据应该往哪里写，这些 log 的 offset 是用一个 index 文件维护的，搜索，访问时速度很快。这是 Kafka 的性能为什么那么好的关键。Travis 写了一篇博客来说明这个机制。</p>
<p>开发 jocko 的大部分时间都花在一致性和服务发现上。利用 Serf 和 Raft 保证一致性和服务发现。Travis 调研了 Etcd, Consul, Nomad，特别是 Consul 和 Nomad，提供了很好的例子。</p>
<p>31:40 左右，谈到 ESR 的一篇文章。如果在技术会议上被性别歧视了，唯一的，最佳的反击是用一个牛逼的 github 账号回应。</p>
<p>TODO</p>
<h2 id="30-Discussing-Imposter-Syndrome-with-Johnny-Boursiquot-and-Bill-Kennedy-时长："><a href="#30-Discussing-Imposter-Syndrome-with-Johnny-Boursiquot-and-Bill-Kennedy-时长：" class="headerlink" title="#30 Discussing Imposter Syndrome with Johnny Boursiquot and Bill Kennedy, , 时长："></a>#30 <a href="https://changelog.com/gotime/30" target="_blank" rel="external">Discussing Imposter Syndrome with Johnny Boursiquot and Bill Kennedy</a>, , 时长：</h2><h2 id="29-Go-and-Buffalo-Live-from-Dunkin’-Donuts-with-Mark-Bates-时长："><a href="#29-Go-and-Buffalo-Live-from-Dunkin’-Donuts-with-Mark-Bates-时长：" class="headerlink" title="#29 Go and Buffalo Live from Dunkin’ Donuts with Mark Bates, , 时长："></a>#29 <a href="https://changelog.com/gotime/29" target="_blank" rel="external">Go and Buffalo Live from Dunkin’ Donuts with Mark Bates</a>, , 时长：</h2><h2 id="28-Creating-a-Programming-Language-with-Thorsten-Ball-时长："><a href="#28-Creating-a-Programming-Language-with-Thorsten-Ball-时长：" class="headerlink" title="#28 Creating a Programming Language with Thorsten Ball, , 时长："></a>#28 <a href="https://changelog.com/gotime/28" target="_blank" rel="external">Creating a Programming Language with Thorsten Ball</a>, , 时长：</h2><h2 id="27-The-Go-Compiler-and-Go-1-8-with-Keith-Randall-时长："><a href="#27-The-Go-Compiler-and-Go-1-8-with-Keith-Randall-时长：" class="headerlink" title="#27 The Go Compiler and Go 1.8 with Keith Randall, , 时长："></a>#27 <a href="https://changelog.com/gotime/27" target="_blank" rel="external">The Go Compiler and Go 1.8 with Keith Randall</a>, , 时长：</h2><h2 id="26-Teaching-and-Learning-Go-with-Todd-McLeod-时长："><a href="#26-Teaching-and-Learning-Go-with-Todd-McLeod-时长：" class="headerlink" title="#26 Teaching and Learning Go with Todd McLeod, , 时长："></a>#26 <a href="https://changelog.com/gotime/26" target="_blank" rel="external">Teaching and Learning Go with Todd McLeod</a>, , 时长：</h2><h2 id="25-Go-Kit-Dependency-Management-amp-Microservices-with-Peter-Bourgon-时长："><a href="#25-Go-Kit-Dependency-Management-amp-Microservices-with-Peter-Bourgon-时长：" class="headerlink" title="#25 Go Kit, Dependency Management &amp; Microservices with Peter Bourgon, , 时长："></a>#25 <a href="https://changelog.com/gotime/25" target="_blank" rel="external">Go Kit, Dependency Management &amp; Microservices with Peter Bourgon</a>, , 时长：</h2><h2 id="24-Juju-Jujucharms-and-Gorram-with-Nate-Finch-时长："><a href="#24-Juju-Jujucharms-and-Gorram-with-Nate-Finch-时长：" class="headerlink" title="#24 Juju, Jujucharms, and Gorram with Nate Finch, , 时长："></a>#24 <a href="https://changelog.com/gotime/24" target="_blank" rel="external">Juju, Jujucharms, and Gorram with Nate Finch</a>, , 时长：</h2><h2 id="23-Open-Sourcing-Chain’s-Developer-Platform-with-Tess-Rinearson-时长："><a href="#23-Open-Sourcing-Chain’s-Developer-Platform-with-Tess-Rinearson-时长：" class="headerlink" title="#23 Open Sourcing Chain’s Developer Platform with Tess Rinearson, , 时长："></a>#23 <a href="https://changelog.com/gotime/23" target="_blank" rel="external">Open Sourcing Chain’s Developer Platform with Tess Rinearson</a>, , 时长：</h2><h2 id="22-Go-Work-Groups-and-Hardware-Projects-with-Jaana-B-Dogan-时长："><a href="#22-Go-Work-Groups-and-Hardware-Projects-with-Jaana-B-Dogan-时长：" class="headerlink" title="#22 Go Work Groups and Hardware Projects with Jaana B. Dogan, , 时长："></a>#22 <a href="https://changelog.com/gotime/22" target="_blank" rel="external">Go Work Groups and Hardware Projects with Jaana B. Dogan</a>, , 时长：</h2><h2 id="21-Building-a-Startup-on-Go-with-Blake-Mizerany-时长："><a href="#21-Building-a-Startup-on-Go-with-Blake-Mizerany-时长：" class="headerlink" title="#21 Building a Startup on Go with Blake Mizerany, , 时长："></a>#21 <a href="https://changelog.com/gotime/21" target="_blank" rel="external">Building a Startup on Go with Blake Mizerany</a>, , 时长：</h2><h2 id="20-Kubernetes-Containers-and-Go-with-Kelsey-Hightower-OCT-13-2016-时长：1-14-5"><a href="#20-Kubernetes-Containers-and-Go-with-Kelsey-Hightower-OCT-13-2016-时长：1-14-5" class="headerlink" title="#20 Kubernetes, Containers, and Go with Kelsey Hightower, OCT 13 2016, 时长：1:14:5"></a>#20 <a href="https://changelog.com/gotime/20" target="_blank" rel="external">Kubernetes, Containers, and Go with Kelsey Hightower</a>, OCT 13 2016, 时长：1:14:5</h2><h2 id="19-Programming-Practices-Exercism-and-Open-Source-with-Katrina-Owen-时长："><a href="#19-Programming-Practices-Exercism-and-Open-Source-with-Katrina-Owen-时长：" class="headerlink" title="#19 Programming Practices, Exercism, and Open Source with Katrina Owen, , 时长："></a>#19 <a href="https://changelog.com/gotime/19" target="_blank" rel="external">Programming Practices, Exercism, and Open Source with Katrina Owen</a>, , 时长：</h2><h2 id="18-Aaron-Schlesinger-on-Go-in-5-Minutes-and-Design-Patterns-JUL-28-2016-时长："><a href="#18-Aaron-Schlesinger-on-Go-in-5-Minutes-and-Design-Patterns-JUL-28-2016-时长：" class="headerlink" title="#18 Aaron Schlesinger on Go in 5 Minutes and Design Patterns, JUL 28 2016, 时长："></a>#18 <a href="https://changelog.com/gotime/18" target="_blank" rel="external">Aaron Schlesinger on Go in 5 Minutes and Design Patterns</a>, JUL 28 2016, 时长：</h2><h2 id="17-Monorepos-Mentoring-and-Testing-with-Bryan-Liles-JUL-28-2016-时长："><a href="#17-Monorepos-Mentoring-and-Testing-with-Bryan-Liles-JUL-28-2016-时长：" class="headerlink" title="#17 Monorepos, Mentoring, and Testing with Bryan Liles, JUL 28 2016, 时长："></a>#17 <a href="https://changelog.com/gotime/17" target="_blank" rel="external">Monorepos, Mentoring, and Testing with Bryan Liles</a>, JUL 28 2016, 时长：</h2><h2 id="16-SOLID-Go-Design-with-Dave-Cheney-JUL-28-2016-时长："><a href="#16-SOLID-Go-Design-with-Dave-Cheney-JUL-28-2016-时长：" class="headerlink" title="#16 SOLID Go Design with Dave Cheney, JUL 28 2016, 时长："></a>#16 <a href="https://changelog.com/gotime/16" target="_blank" rel="external">SOLID Go Design with Dave Cheney</a>, JUL 28 2016, 时长：</h2><h2 id="15-The-Go-Standard-Library-with-Ben-Johnson-JUL-28-2016-时长："><a href="#15-The-Go-Standard-Library-with-Ben-Johnson-JUL-28-2016-时长：" class="headerlink" title="#15 The Go Standard Library with Ben Johnson, JUL 28 2016, 时长："></a>#15 <a href="https://changelog.com/gotime/15" target="_blank" rel="external">The Go Standard Library with Ben Johnson</a>, JUL 28 2016, 时长：</h2><h2 id="14-Matt-Holt-on-CaddyServer-the-ACME-Protocol-and-TLS-JUL-28-2016-时长："><a href="#14-Matt-Holt-on-CaddyServer-the-ACME-Protocol-and-TLS-JUL-28-2016-时长：" class="headerlink" title="#14 Matt Holt on CaddyServer, the ACME Protocol, and TLS, JUL 28 2016, 时长："></a>#14 <a href="https://changelog.com/gotime/14" target="_blank" rel="external">Matt Holt on CaddyServer, the ACME Protocol, and TLS</a>, JUL 28 2016, 时长：</h2><h2 id="13-Francesc-Campoy-on-GopherCon-and-Understanding-nil-时长："><a href="#13-Francesc-Campoy-on-GopherCon-and-Understanding-nil-时长：" class="headerlink" title="#13 Francesc Campoy on GopherCon and Understanding nil, , 时长："></a>#13 <a href="https://changelog.com/gotime/13" target="_blank" rel="external">Francesc Campoy on GopherCon and Understanding nil</a>, , 时长：</h2><h2 id="12-Beyang-Liu-on-Go-at-Sourcegraph-and-Writing-Better-Code-时长："><a href="#12-Beyang-Liu-on-Go-at-Sourcegraph-and-Writing-Better-Code-时长：" class="headerlink" title="#12 Beyang Liu on Go at Sourcegraph and Writing Better Code, , 时长："></a>#12 <a href="https://changelog.com/gotime/12" target="_blank" rel="external">Beyang Liu on Go at Sourcegraph and Writing Better Code</a>, , 时长：</h2><h2 id="11-Maintaining-Open-Source-Docker-and-dotfiles-with-Jessie-Frazelle-Guests-Aug-10-2016-时长：1-06-23"><a href="#11-Maintaining-Open-Source-Docker-and-dotfiles-with-Jessie-Frazelle-Guests-Aug-10-2016-时长：1-06-23" class="headerlink" title="#11 Maintaining Open Source, Docker, and dotfiles with Jessie Frazelle Guests , Aug 10, 2016, 时长：1:06:23"></a>#11 <a href="https://changelog.com/gotime/11" target="_blank" rel="external">Maintaining Open Source, Docker, and dotfiles with Jessie Frazelle Guests </a>, Aug 10, 2016, 时长：1:06:23</h2><ul>
<li>嘉宾是 Jessie Frazelle，刚加入 Fastly 全职写 Golang，之前是 Docker 的维护者</li>
<li>20分钟左右，谈接受 PRs 的流程，如果是一个比较大的 PR，一般会先有一个 design review</li>
<li>Jessie 在 Mesos 的时候写 C++</li>
<li>maintainerati.org 开源项目的 maintainer 们</li>
<li>40分钟左右聊到 <a href="http://gokit.io/" target="_blank" rel="external">GoKit</a></li>
<li><a href="https://www.twitch.tv/gophercon" target="_blank" rel="external">https://www.twitch.tv/gophercon</a> goghercon 的直播地址</li>
<li><a href="http://goconvey.co" target="_blank" rel="external">http://goconvey.co</a> 一个用于 Golang 测试的框架</li>
</ul>
<p>TOREVIEW</p>
<h2 id="10-State-of-Go-Survey-and-Go-at-Heroku-AUG-10-2016-时长："><a href="#10-State-of-Go-Survey-and-Go-at-Heroku-AUG-10-2016-时长：" class="headerlink" title="#10 State of Go Survey and Go at Heroku, AUG 10 2016, 时长："></a>#10 <a href="https://changelog.com/gotime/10" target="_blank" rel="external">State of Go Survey and Go at Heroku</a>, AUG 10 2016, 时长：</h2><h2 id="9-Scott-Mansfield-on-Go-at-Netflix-JUL-28-2016-时长："><a href="#9-Scott-Mansfield-on-Go-at-Netflix-JUL-28-2016-时长：" class="headerlink" title="#9 Scott Mansfield on Go at Netflix, JUL 28 2016, 时长："></a>#9 <a href="https://changelog.com/gotime/9" target="_blank" rel="external">Scott Mansfield on Go at Netflix</a>, JUL 28 2016, 时长：</h2><h2 id="8-Asim-Aslam-on-Micro-the-Go-Microservice-Toolkit-时长："><a href="#8-Asim-Aslam-on-Micro-the-Go-Microservice-Toolkit-时长：" class="headerlink" title="#8 Asim Aslam on Micro, the Go Microservice Toolkit, , 时长："></a>#8 <a href="https://changelog.com/gotime/8" target="_blank" rel="external">Asim Aslam on Micro, the Go Microservice Toolkit</a>, , 时长：</h2><p>嘉宾是 Kelsey Hightower，主要关注 Golang，Kubernetes，CoreOS，Puppet Labs</p>
<p>9:20 左右，谈 K8s 的 plugin 系统<br>23:50 kelseyhightower/KubernetesTheHardWay (Linode 可以一键搭建 Kubernetes 集群，好像很便宜的样子)</p>
<h2 id="7-Raphael-Simon-on-goa-the-Framework-for-Building-Microservices-时长："><a href="#7-Raphael-Simon-on-goa-the-Framework-for-Building-Microservices-时长：" class="headerlink" title="#7 Raphaël Simon on goa, the Framework for Building Microservices, , 时长："></a>#7 <a href="https://changelog.com/gotime/7" target="_blank" rel="external">Raphaël Simon on goa, the Framework for Building Microservices</a>, , 时长：</h2><h2 id="6-Bill-Kennedy-on-Mechanical-Sympathy-时长："><a href="#6-Bill-Kennedy-on-Mechanical-Sympathy-时长：" class="headerlink" title="#6 Bill Kennedy on Mechanical Sympathy, , 时长："></a>#6 <a href="https://changelog.com/gotime/6" target="_blank" rel="external">Bill Kennedy on Mechanical Sympathy</a>, , 时长：</h2><h2 id="5-Raphael-Simon-on-goa-the-Framework-for-Building-Microservices-JUL-26-2016-时长："><a href="#5-Raphael-Simon-on-goa-the-Framework-for-Building-Microservices-JUL-26-2016-时长：" class="headerlink" title="#5 Raphaël Simon on goa, the Framework for Building Microservices, JUL 26 2016, 时长："></a>#5 <a href="https://changelog.com/gotime/5" target="_blank" rel="external">Raphaël Simon on goa, the Framework for Building Microservices</a>, JUL 26 2016, 时长：</h2><h2 id="4-Go-and-Data-Science-with-Daniel-Whitenack-JUN-16-2016-时长："><a href="#4-Go-and-Data-Science-with-Daniel-Whitenack-JUN-16-2016-时长：" class="headerlink" title="#4 Go and Data Science with Daniel Whitenack, JUN 16 2016, 时长："></a>#4 <a href="https://changelog.com/gotime/4" target="_blank" rel="external">Go and Data Science with Daniel Whitenack</a>, JUN 16 2016, 时长：</h2><h2 id="3-Early-Go-Adoption-with-Travis-Reeder-JUN-10-2016-时长："><a href="#3-Early-Go-Adoption-with-Travis-Reeder-JUN-10-2016-时长：" class="headerlink" title="#3 Early Go Adoption with Travis Reeder, JUN 10 2016, 时长："></a>#3 <a href="https://changelog.com/gotime/3" target="_blank" rel="external">Early Go Adoption with Travis Reeder</a>, JUN 10 2016, 时长：</h2><h2 id="2-Go-Community-Discussions-with-Cory-LaNou-JUN-2-2016-时长：49-26"><a href="#2-Go-Community-Discussions-with-Cory-LaNou-JUN-2-2016-时长：49-26" class="headerlink" title="#2 Go Community Discussions with Cory LaNou, JUN 2 2016, 时长：49:26"></a>#2 <a href="https://changelog.com/gotime/2" target="_blank" rel="external">Go Community Discussions with Cory LaNou</a>, JUN 2 2016, 时长：49:26</h2><h2 id="1-The-Kick-Off-Show-MAY-19-2016-时长：32-30"><a href="#1-The-Kick-Off-Show-MAY-19-2016-时长：32-30" class="headerlink" title="#1 The Kick Off Show  MAY 19 2016 时长：32:30"></a>#1 <a href="https://changelog.com/gotime/1" target="_blank" rel="external">The Kick Off Show</a>  MAY 19 2016 时长：32:30</h2><ul>
<li>第一期节目，主持人是：<a href="https://github.com/erikstmartin" target="_blank" rel="external">Erik St. Martin</a>, <a href="https://github.com/carlisia" target="_blank" rel="external">Carlisia Pinto</a>, <a href="https://github.com/bketelsen" target="_blank" rel="external">Brian Ketelsen</a> </li>
<li>前10来分钟，从 Go 的漏洞到 vim-go, 再谈到 vim，再到 neovim</li>
<li><a href="https://twitter.com/@YourFirstPR" target="_blank" rel="external">https://twitter.com/@YourFirstPR</a> </li>
<li>提到 Rancher Lab 的体验很好<br>TOREVIEW</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;最后更新时间：Sat May 20 18:49:50 CST 2018&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://knarfeh.github.io/tags/Life/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="Blog" scheme="http://knarfeh.github.io/tags/Blog/"/>
    
      <category term="Podcast" scheme="http://knarfeh.github.io/tags/Podcast/"/>
    
      <category term="Ruby" scheme="http://knarfeh.github.io/tags/Ruby/"/>
    
      <category term="Notes" scheme="http://knarfeh.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>【podcast】JS Party</title>
    <link href="http://knarfeh.github.io/2017/11/03/%E3%80%90podcast%E3%80%91JS%20Party/"/>
    <id>http://knarfeh.github.io/2017/11/03/【podcast】JS Party/</id>
    <published>2017-11-03T09:40:03.000Z</published>
    <updated>2018-08-18T06:29:21.159Z</updated>
    
    <content type="html"><![CDATA[<p>不定期更新。</p>
<p>最后更新时间：Tue Jul 24 23:06:06 CST 2018</p>
<a id="more"></a>
<p>文稿地址：<a href="https://github.com/thechangelog/transcripts/" target="_blank" rel="external">thechangelog/transcripts</a></p>
<h2 id="34-JavaScript-eating-the-world-desktop-edition-with-Shelley-Vohr-and-Jeremy-Apthorp-Jul-13-2018，时长：1-02-11"><a href="#34-JavaScript-eating-the-world-desktop-edition-with-Shelley-Vohr-and-Jeremy-Apthorp-Jul-13-2018，时长：1-02-11" class="headerlink" title="#34 JavaScript eating the world, desktop edition with Shelley Vohr and Jeremy Apthorp,  Jul 13, 2018，时长：1:02:11"></a>#34 <a href="https://changelog.com/jsparty/34" target="_blank" rel="external">JavaScript eating the world, desktop edition with Shelley Vohr and Jeremy Apthorp</a>,  Jul 13, 2018，时长：1:02:11</h2><h2 id="33-Enough-string-to-hang-yourself-with-Jerod-Santo-Nick-Nisi-and-Kevin-Ball-Jul-6-2018，时长：58-28"><a href="#33-Enough-string-to-hang-yourself-with-Jerod-Santo-Nick-Nisi-and-Kevin-Ball-Jul-6-2018，时长：58-28" class="headerlink" title="#33 Enough string to hang yourself with Jerod Santo, Nick Nisi, and Kevin Ball,  Jul 6, 2018，时长：58:28"></a>#33 <a href="https://changelog.com/jsparty/33" target="_blank" rel="external">Enough string to hang yourself with Jerod Santo, Nick Nisi, and Kevin Ball</a>,  Jul 6, 2018，时长：58:28</h2><h2 id="32-WASM-is-AWSM-with-Kevin-Ball-Suz-Hinton-and-Jay-Phelps-Jun-29-2018，时长：1-01-57"><a href="#32-WASM-is-AWSM-with-Kevin-Ball-Suz-Hinton-and-Jay-Phelps-Jun-29-2018，时长：1-01-57" class="headerlink" title="#32 WASM is AWSM with Kevin Ball, Suz Hinton, and Jay Phelps,  Jun 29, 2018，时长：1:01:57"></a>#32 <a href="https://changelog.com/jsparty/32" target="_blank" rel="external">WASM is AWSM with Kevin Ball, Suz Hinton, and Jay Phelps</a>,  Jun 29, 2018，时长：1:01:57</h2><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-webassembly-status-and-reality/index.html" target="_blank" rel="external">WebAssembly 现状与实战</a></li>
</ul>
<h2 id="31-GraphQL-when-to-use-JavaScript-JS-robotics-with-Brian-Douglas-Aimee-Knight-and-Bryan-Hughes-Jun-22-2018，时长：1-06-52"><a href="#31-GraphQL-when-to-use-JavaScript-JS-robotics-with-Brian-Douglas-Aimee-Knight-and-Bryan-Hughes-Jun-22-2018，时长：1-06-52" class="headerlink" title="#31 GraphQL, when to use JavaScript, JS robotics with Brian Douglas, Aimee Knight, and Bryan Hughes,  Jun 22, 2018，时长：1:06:52"></a>#31 <a href="https://changelog.com/jsparty/31" target="_blank" rel="external">GraphQL, when to use JavaScript, JS robotics with Brian Douglas, Aimee Knight, and Bryan Hughes</a>,  Jun 22, 2018，时长：1:06:52</h2><h2 id="30-Do-what-every-developer-does-blame-other-people-with-Nick-Nisi-Suz-Hinton-and-Jerod-Santo-Jun-19-2018，时长：1-11-33"><a href="#30-Do-what-every-developer-does-blame-other-people-with-Nick-Nisi-Suz-Hinton-and-Jerod-Santo-Jun-19-2018，时长：1-11-33" class="headerlink" title="#30 Do what every developer does: blame other people with Nick Nisi, Suz Hinton, and Jerod Santo,  Jun 19, 2018，时长：1:11:33"></a>#30 <a href="https://changelog.com/jsparty/30" target="_blank" rel="external">Do what every developer does: blame other people with Nick Nisi, Suz Hinton, and Jerod Santo</a>,  Jun 19, 2018，时长：1:11:33</h2><h2 id="29-Node’s-survey-Ry’s-regrets-Microsoft’s-GitHub-with-Kevin-Ball-Nick-Nisi-and-Jerod-Santo-Jun-8-2018，时长：1-04-26"><a href="#29-Node’s-survey-Ry’s-regrets-Microsoft’s-GitHub-with-Kevin-Ball-Nick-Nisi-and-Jerod-Santo-Jun-8-2018，时长：1-04-26" class="headerlink" title="#29 Node’s survey, Ry’s regrets, Microsoft’s GitHub with Kevin Ball, Nick Nisi, and Jerod Santo,  Jun 8, 2018，时长：1:04:26"></a>#29 <a href="https://changelog.com/jsparty/29" target="_blank" rel="external">Node’s survey, Ry’s regrets, Microsoft’s GitHub with Kevin Ball, Nick Nisi, and Jerod Santo</a>,  Jun 8, 2018，时长：1:04:26</h2><h2 id="28-ML-in-JS…-well…-yes-with-Suz-Hinton-Jerod-Santo-Kevin-Ball-and-Christopher-Hiller-Jun-1-2018，时长：53-44"><a href="#28-ML-in-JS…-well…-yes-with-Suz-Hinton-Jerod-Santo-Kevin-Ball-and-Christopher-Hiller-Jun-1-2018，时长：53-44" class="headerlink" title="#28 ML in JS… well… yes? with Suz Hinton, Jerod Santo, Kevin Ball, and Christopher Hiller,  Jun 1, 2018，时长：53:44"></a>#28 <a href="https://changelog.com/jsparty/28" target="_blank" rel="external">ML in JS… well… yes? with Suz Hinton, Jerod Santo, Kevin Ball, and Christopher Hiller</a>,  Jun 1, 2018，时长：53:44</h2><h2 id="27-A-tooling-extravaganza-with-Kevin-Ball-Alex-Sexton-Nick-Nisi-and-Christopher-Hiller-May-25-2018，时长：57-58"><a href="#27-A-tooling-extravaganza-with-Kevin-Ball-Alex-Sexton-Nick-Nisi-and-Christopher-Hiller-May-25-2018，时长：57-58" class="headerlink" title="#27 A tooling extravaganza! with Kevin Ball, Alex Sexton, Nick Nisi, and Christopher Hiller,  May 25, 2018，时长：57:58"></a>#27 <a href="https://changelog.com/jsparty/27" target="_blank" rel="external">A tooling extravaganza! with Kevin Ball, Alex Sexton, Nick Nisi, and Christopher Hiller</a>,  May 25, 2018，时长：57:58</h2><h2 id="26-🎊-TS-Party-🎊-with-Jerod-Santo-Nick-Nisi-and-Christopher-Hiller-May-18-2018，时长：59-08"><a href="#26-🎊-TS-Party-🎊-with-Jerod-Santo-Nick-Nisi-and-Christopher-Hiller-May-18-2018，时长：59-08" class="headerlink" title="#26 🎊 TS Party! 🎊 with Jerod Santo, Nick Nisi, and Christopher Hiller,  May 18, 2018，时长：59:08"></a>#26 <a href="https://changelog.com/jsparty/26" target="_blank" rel="external">🎊 TS Party! 🎊 with Jerod Santo, Nick Nisi, and Christopher Hiller</a>,  May 18, 2018，时长：59:08</h2><h2 id="25-Dojo-2-0-with-Dylan-Schiemann-May-11-2018，时长：1-06-24"><a href="#25-Dojo-2-0-with-Dylan-Schiemann-May-11-2018，时长：1-06-24" class="headerlink" title="#25 Dojo 2.0 with Dylan Schiemann,  May 11, 2018，时长：1:06:24"></a>#25 <a href="https://changelog.com/jsparty/25" target="_blank" rel="external">Dojo 2.0 with Dylan Schiemann</a>,  May 11, 2018，时长：1:06:24</h2><h2 id="24-Cool-depending-on-your-definition-of-cool-with-Feross-Aboukhadijeh-Suz-Hinton-Nick-Nisi-and-Alex-Sexton-May-7-2018，时长：54-24"><a href="#24-Cool-depending-on-your-definition-of-cool-with-Feross-Aboukhadijeh-Suz-Hinton-Nick-Nisi-and-Alex-Sexton-May-7-2018，时长：54-24" class="headerlink" title="#24 Cool, depending on your definition of cool with Feross Aboukhadijeh, Suz Hinton, Nick Nisi, and Alex Sexton,  May 7, 2018，时长：54:24"></a>#24 <a href="https://changelog.com/jsparty/24" target="_blank" rel="external">Cool, depending on your definition of cool with Feross Aboukhadijeh, Suz Hinton, Nick Nisi, and Alex Sexton</a>,  May 7, 2018，时长：54:24</h2><h2 id="23-The-state-of-Node-security-with-Suz-Hinton-Christopher-Hiller-Jerod-Santo-and-Adam-Baldwin-Guests-Apr-30-2018，时长：54-51"><a href="#23-The-state-of-Node-security-with-Suz-Hinton-Christopher-Hiller-Jerod-Santo-and-Adam-Baldwin-Guests-Apr-30-2018，时长：54-51" class="headerlink" title="#23 The state of Node security with Suz Hinton, Christopher Hiller, Jerod Santo, and Adam Baldwin Guests,  Apr 30, 2018，时长：54:51"></a>#23 <a href="https://changelog.com/jsparty/23" target="_blank" rel="external">The state of Node security with Suz Hinton, Christopher Hiller, Jerod Santo, and Adam Baldwin Guests</a>,  Apr 30, 2018，时长：54:51</h2><h2 id="22-PWAs-to-eat-the-world-Or-maybe-not-News-at-11-with-Jerod-Santo-Safia-Abdalla-Nick-Nisi-and-Kevin-Ball-Apr-23-2018，时长：56-25"><a href="#22-PWAs-to-eat-the-world-Or-maybe-not-News-at-11-with-Jerod-Santo-Safia-Abdalla-Nick-Nisi-and-Kevin-Ball-Apr-23-2018，时长：56-25" class="headerlink" title="#22 PWAs to eat the world. Or maybe not. News at 11! with Jerod Santo, Safia Abdalla, Nick Nisi, and Kevin Ball,  Apr 23, 2018，时长：56:25"></a>#22 <a href="https://changelog.com/jsparty/22" target="_blank" rel="external">PWAs to eat the world. Or maybe not. News at 11! with Jerod Santo, Safia Abdalla, Nick Nisi, and Kevin Ball</a>,  Apr 23, 2018，时长：56:25</h2><ul>
<li>Safia Abdalla 正在写一篇关于 Curl 的文章</li>
<li>PWA 指的是 Progressive Web App，渐进式网络应用程序</li>
</ul>
<h2 id="21-Oh-the-places-JS-will-go-with-Jerod-Santo-Suz-Hinton-Feross-Aboukhadijeh-and-Kevin-Ball-Apr-13-2018，时长：54-47"><a href="#21-Oh-the-places-JS-will-go-with-Jerod-Santo-Suz-Hinton-Feross-Aboukhadijeh-and-Kevin-Ball-Apr-13-2018，时长：54-47" class="headerlink" title="#21 Oh, the places JS will go with Jerod Santo, Suz Hinton, Feross Aboukhadijeh, and Kevin Ball,  Apr 13, 2018，时长：54:47"></a>#21 <a href="https://changelog.com/jsparty/21" target="_blank" rel="external">Oh, the places JS will go with Jerod Santo, Suz Hinton, Feross Aboukhadijeh, and Kevin Ball</a>,  Apr 13, 2018，时长：54:47</h2><h2 id="20-JS-Party-is-back-🎉-with-Jerod-Santo-Safia-Abdalla-Nick-Nisi-and-Christopher-Hiller-Apr-6-2018，时长：48-34"><a href="#20-JS-Party-is-back-🎉-with-Jerod-Santo-Safia-Abdalla-Nick-Nisi-and-Christopher-Hiller-Apr-6-2018，时长：48-34" class="headerlink" title="#20 JS Party is back! 🎉 with Jerod Santo, Safia Abdalla, Nick Nisi, and Christopher Hiller,  Apr 6, 2018，时长：48:34"></a>#20 <a href="https://changelog.com/jsparty/20" target="_blank" rel="external">JS Party is back! 🎉 with Jerod Santo, Safia Abdalla, Nick Nisi, and Christopher Hiller</a>,  Apr 6, 2018，时长：48:34</h2><h2 id="19-Web-Audio-API-and-TypeScript-is-Turing-Complete-with-Myles-Borins-Aug-18-2017，时长：41-47"><a href="#19-Web-Audio-API-and-TypeScript-is-Turing-Complete-with-Myles-Borins-Aug-18-2017，时长：41-47" class="headerlink" title="#19 Web Audio API and TypeScript is Turing Complete with Myles Borins,  Aug 18, 2017，时长：41:47"></a>#19 <a href="https://changelog.com/jsparty/19" target="_blank" rel="external">Web Audio API and TypeScript is Turing Complete with Myles Borins</a>,  Aug 18, 2017，时长：41:47</h2><h2 id="18-2017-Node-js-User-Survey-and-Beaker-Browser-with-Paul-Frazee-Aug-18-2017，时长：55-07"><a href="#18-2017-Node-js-User-Survey-and-Beaker-Browser-with-Paul-Frazee-Aug-18-2017，时长：55-07" class="headerlink" title="#18 2017 Node.js User Survey and Beaker Browser with Paul Frazee,  Aug 18, 2017，时长：55:07"></a>#18 <a href="https://changelog.com/jsparty/18" target="_blank" rel="external">2017 Node.js User Survey and Beaker Browser with Paul Frazee</a>,  Aug 18, 2017，时长：55:07</h2><h2 id="17-AMA-—-BasicAttentionToken-Robotics-IDE’s-and-Stuff-with-Adam-Stacoviak-Mikeal-Rogers-and-Rachel-White-Aug-18-2017，时长：55-52"><a href="#17-AMA-—-BasicAttentionToken-Robotics-IDE’s-and-Stuff-with-Adam-Stacoviak-Mikeal-Rogers-and-Rachel-White-Aug-18-2017，时长：55-52" class="headerlink" title="#17 AMA — BasicAttentionToken, Robotics, IDE’s and Stuff with Adam Stacoviak, Mikeal Rogers, and Rachel White,  Aug 18, 2017，时长：55:52"></a>#17 <a href="https://changelog.com/jsparty/17" target="_blank" rel="external">AMA — BasicAttentionToken, Robotics, IDE’s and Stuff with Adam Stacoviak, Mikeal Rogers, and Rachel White</a>,  Aug 18, 2017，时长：55:52</h2><h2 id="16-ES-Modules-and-ESM-Loader-with-John-David-Dalton-Jul-26-2017，时长：1-09-28"><a href="#16-ES-Modules-and-ESM-Loader-with-John-David-Dalton-Jul-26-2017，时长：1-09-28" class="headerlink" title="#16 ES Modules and ESM Loader with John-David Dalton,  Jul 26, 2017，时长：1:09:28"></a>#16 <a href="https://changelog.com/jsparty/3" target="_blank" rel="external">ES Modules and ESM Loader with John-David Dalton</a>,  Jul 26, 2017，时长：1:09:28</h2><h2 id="15-Async-Control-Flow-and-Threats-to-the-Open-Web-with-Kyle-Simpson-Jul-7-2017，时长：1-10-42"><a href="#15-Async-Control-Flow-and-Threats-to-the-Open-Web-with-Kyle-Simpson-Jul-7-2017，时长：1-10-42" class="headerlink" title="#15 Async Control Flow and Threats to the Open Web with Kyle Simpson,  Jul 7, 2017，时长：1:10:42"></a>#15 <a href="https://changelog.com/jsparty/15" target="_blank" rel="external">Async Control Flow and Threats to the Open Web with Kyle Simpson</a>,  Jul 7, 2017，时长：1:10:42</h2><h2 id="14-Inside-Node-8-Glitch-Building-a-Community-Around-Education-Jun-23-2017，时长：46-27"><a href="#14-Inside-Node-8-Glitch-Building-a-Community-Around-Education-Jun-23-2017，时长：46-27" class="headerlink" title="#14 Inside Node 8, Glitch, Building a Community Around Education,  Jun 23, 2017，时长：46:27"></a>#14 <a href="https://changelog.com/jsparty/14" target="_blank" rel="external">Inside Node 8, Glitch, Building a Community Around Education</a>,  Jun 23, 2017，时长：46:27</h2><h2 id="13-Inside-the-Release-of-npm-5-and-Sheetsee-with-Rebecca-Turner-Kat-Marchan-amp-Jessica-Lord-Jun-13-2017，时长：54-54"><a href="#13-Inside-the-Release-of-npm-5-and-Sheetsee-with-Rebecca-Turner-Kat-Marchan-amp-Jessica-Lord-Jun-13-2017，时长：54-54" class="headerlink" title="#13 Inside the Release of npm@5 and Sheetsee with Rebecca Turner, Kat Marchán &amp; Jessica Lord,  Jun 13, 2017，时长：54:54"></a>#13 <a href="https://changelog.com/jsparty/13" target="_blank" rel="external">Inside the Release of npm@5 and Sheetsee with Rebecca Turner, Kat Marchán &amp; Jessica Lord</a>,  Jun 13, 2017，时长：54:54</h2><h2 id="12-Using-ES6-7-create-react-app-and-Electron-with-Mikeal-Rogers-Rachel-White-amp-Alex-Sexton-Jun-1-2017，时长：1-05-05"><a href="#12-Using-ES6-7-create-react-app-and-Electron-with-Mikeal-Rogers-Rachel-White-amp-Alex-Sexton-Jun-1-2017，时长：1-05-05" class="headerlink" title="#12 Using ES6/7, create-react-app, and Electron! with Mikeal Rogers, Rachel White &amp; Alex Sexton, Jun 1, 2017，时长：1:05:05"></a>#12 <a href="https://changelog.com/jsparty/3" target="_blank" rel="external">Using ES6/7, create-react-app, and Electron! with Mikeal Rogers, Rachel White &amp; Alex Sexton</a>, Jun 1, 2017，时长：1:05:05</h2><h2 id="11-Web-Standards-ECMAScript-Modules-in-Browsers-and-Learning-JS-with-Alex-Sexton-and-guest-hosts-Wes-Bos-amp-Mike-Taylor-May-26-2017，时长：1-03-34"><a href="#11-Web-Standards-ECMAScript-Modules-in-Browsers-and-Learning-JS-with-Alex-Sexton-and-guest-hosts-Wes-Bos-amp-Mike-Taylor-May-26-2017，时长：1-03-34" class="headerlink" title="#11 Web Standards, ECMAScript Modules in Browsers, and Learning JS with Alex Sexton and guest hosts Wes Bos &amp; Mike Taylor,  May 26, 2017，时长：1:03:34"></a>#11 <a href="https://changelog.com/jsparty/11" target="_blank" rel="external">Web Standards, ECMAScript Modules in Browsers, and Learning JS with Alex Sexton and guest hosts Wes Bos &amp; Mike Taylor</a>,  May 26, 2017，时长：1:03:34</h2><h2 id="10-yayQuery-Reunion-with-Alex-Sexton-Paul-Irish-Rebecca-Murphey-and-Adam-Sontag-May-2-2017，时长：1-10-25"><a href="#10-yayQuery-Reunion-with-Alex-Sexton-Paul-Irish-Rebecca-Murphey-and-Adam-Sontag-May-2-2017，时长：1-10-25" class="headerlink" title="#10 yayQuery Reunion! with Alex Sexton, Paul Irish, Rebecca Murphey, and Adam Sontag,  May 2, 2017，时长：1:10:25"></a>#10 <a href="https://changelog.com/jsparty/10" target="_blank" rel="external">yayQuery Reunion! with Alex Sexton, Paul Irish, Rebecca Murphey, and Adam Sontag</a>,  May 2, 2017，时长：1:10:25</h2><h2 id="9-P2P-Web-WebRTC-WebTorrent-IPFS-and-React-VR-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Apr-25-2017，时长：1-01-01"><a href="#9-P2P-Web-WebRTC-WebTorrent-IPFS-and-React-VR-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Apr-25-2017，时长：1-01-01" class="headerlink" title="#9 P2P Web, WebRTC, WebTorrent, IPFS, and React VR with Mikeal Rogers, Alex Sexton &amp; Rachel White,  Apr 25, 2017，时长：1:01:01"></a>#9 <a href="https://changelog.com/jsparty/9" target="_blank" rel="external">P2P Web, WebRTC, WebTorrent, IPFS, and React VR with Mikeal Rogers, Alex Sexton &amp; Rachel White</a>,  Apr 25, 2017，时长：1:01:01</h2><h2 id="8-Good-Documentation-Non-blocking-UI-Rendering-Node-Community-Updates-with-Tracy-Hinds-Apr-23-2017，时长：53-54"><a href="#8-Good-Documentation-Non-blocking-UI-Rendering-Node-Community-Updates-with-Tracy-Hinds-Apr-23-2017，时长：53-54" class="headerlink" title="#8 Good Documentation, Non-blocking UI Rendering, Node Community Updates with Tracy Hinds,  Apr 23, 2017，时长：53:54"></a>#8 <a href="https://changelog.com/jsparty/8" target="_blank" rel="external">Good Documentation, Non-blocking UI Rendering, Node Community Updates with Tracy Hinds</a>,  Apr 23, 2017，时长：53:54</h2><h2 id="7-VM-Neutrality-in-Node-N-API-Learning-JavaScript-Mastodon-Apr-14-2017，时长：58-30"><a href="#7-VM-Neutrality-in-Node-N-API-Learning-JavaScript-Mastodon-Apr-14-2017，时长：58-30" class="headerlink" title="#7 VM Neutrality in Node (N-API), Learning JavaScript, Mastodon,  Apr 14, 2017，时长：58:30"></a>#7 <a href="https://changelog.com/jsparty/7" target="_blank" rel="external">VM Neutrality in Node (N-API), Learning JavaScript, Mastodon</a>,  Apr 14, 2017，时长：58:30</h2><h2 id="6-Web-Components-and-WTF-is-Shadow-DOM-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Apr-11-2017，时长："><a href="#6-Web-Components-and-WTF-is-Shadow-DOM-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Apr-11-2017，时长：" class="headerlink" title="#6 Web Components and WTF is Shadow DOM? with Mikeal Rogers, Alex Sexton &amp; Rachel White,  Apr 11, 2017，时长："></a>#6 <a href="https://changelog.com/jsparty/6" target="_blank" rel="external">Web Components and WTF is Shadow DOM? with Mikeal Rogers, Alex Sexton &amp; Rachel White</a>,  Apr 11, 2017，时长：</h2><h2 id="5-JavaScript-in-Latin-America-with-Juan-Pablo-Buritica-Mar-31-2017，时长：1-01-56"><a href="#5-JavaScript-in-Latin-America-with-Juan-Pablo-Buritica-Mar-31-2017，时长：1-01-56" class="headerlink" title="#5 JavaScript in Latin America with Juan Pablo Buritica,  Mar 31, 2017，时长：1:01:56"></a>#5 <a href="https://changelog.com/jsparty/5" target="_blank" rel="external">JavaScript in Latin America with Juan Pablo Buritica</a>,  Mar 31, 2017，时长：1:01:56</h2><h2 id="4-PWAs-Progressive-Web-Apps-Service-Workers-Time-Glitch-with-special-guest-Jenn-Schiffer-Mar-24-2017，时长：1-01-55"><a href="#4-PWAs-Progressive-Web-Apps-Service-Workers-Time-Glitch-with-special-guest-Jenn-Schiffer-Mar-24-2017，时长：1-01-55" class="headerlink" title="#4 PWAs (Progressive Web Apps), Service Workers, Time, Glitch with special guest Jenn Schiffer,  Mar 24, 2017，时长：1:01:55"></a>#4 <a href="https://changelog.com/jsparty/4" target="_blank" rel="external">PWAs (Progressive Web Apps), Service Workers, Time, Glitch with special guest Jenn Schiffer</a>,  Mar 24, 2017，时长：1:01:55</h2><h2 id="3-JavaScript-Fatigue-AMP-Paths-js-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Mar-17-2017，时长：58-08"><a href="#3-JavaScript-Fatigue-AMP-Paths-js-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Mar-17-2017，时长：58-08" class="headerlink" title="#3 JavaScript Fatigue, AMP, Paths.js with Mikeal Rogers, Alex Sexton &amp; Rachel White,  Mar 17, 2017，时长：58:08"></a>#3 <a href="https://changelog.com/jsparty/3" target="_blank" rel="external">JavaScript Fatigue, AMP, Paths.js with Mikeal Rogers, Alex Sexton &amp; Rachel White</a>,  Mar 17, 2017，时长：58:08</h2><h2 id="2-Web-Assembly-Higher-Education-with-JavaScript-JS-Standards-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Mar-10-2017，时长：55-32"><a href="#2-Web-Assembly-Higher-Education-with-JavaScript-JS-Standards-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Mar-10-2017，时长：55-32" class="headerlink" title="#2 Web Assembly, Higher Education with JavaScript, JS Standards with Mikeal Rogers, Alex Sexton &amp; Rachel White,  Mar 10, 2017，时长：55:32"></a>#2 <a href="https://changelog.com/jsparty/2" target="_blank" rel="external">Web Assembly, Higher Education with JavaScript, JS Standards with Mikeal Rogers, Alex Sexton &amp; Rachel White</a>,  Mar 10, 2017，时长：55:32</h2><h2 id="1-Security-on-the-Web-Node-async-await-AR-js-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Mar-3-2017，时长：56-47"><a href="#1-Security-on-the-Web-Node-async-await-AR-js-with-Mikeal-Rogers-Alex-Sexton-amp-Rachel-White-Mar-3-2017，时长：56-47" class="headerlink" title="#1 Security on the Web, Node async/await, AR.js with Mikeal Rogers, Alex Sexton &amp; Rachel White,  Mar 3, 2017，时长：56:47"></a>#1 <a href="https://changelog.com/jsparty/1" target="_blank" rel="external">Security on the Web, Node async/await, AR.js with Mikeal Rogers, Alex Sexton &amp; Rachel White</a>,  Mar 3, 2017，时长：56:47</h2><ul>
<li>这一期主要是讨论 Web 的安全性问题。</li>
<li>SHA1 在 git 中被大量使用。</li>
</ul>
<p>TODO</p>
<h2 id="Meet-Rachel-White-Panelist-of-JS-Party-Feb-24-2017，时长：56-47"><a href="#Meet-Rachel-White-Panelist-of-JS-Party-Feb-24-2017，时长：56-47" class="headerlink" title="Meet Rachel White Panelist of JS Party,  Feb 24, 2017，时长：56:47"></a><a href="https://changelog.com/jsparty/meet-rachel-white" target="_blank" rel="external">Meet Rachel White Panelist of JS Party</a>,  Feb 24, 2017，时长：56:47</h2><ul>
<li>微软 DX 团队的前端工程师，Tech Evangelist 的 Rachel White。曾在 IBM Watson，Adobe Behance 工作。</li>
<li>Rachel 植入了一个 RFID 芯片到手腕里。目前正在学 React</li>
</ul>
<p>TOREVIEW</p>
<h2 id="Meet-Alex-Sexton-Feb-24-2017，时长：37-46"><a href="#Meet-Alex-Sexton-Feb-24-2017，时长：37-46" class="headerlink" title="Meet Alex Sexton, Feb 24, 2017，时长：37:46"></a><a href="https://changelog.com/jsparty/meet-alex-sexton" target="_blank" rel="external">Meet Alex Sexton</a>, Feb 24, 2017，时长：37:46</h2><ul>
<li>Alex 写了12年 Javascript。这四年在 Stripe，在德州奥斯丁远程工作。Alex 参与了 jQuery，是董事会成员。在 Modernizr 也做了很多工作。</li>
</ul>
<p>TODO</p>
<h2 id="Meet-Mikeal-Rogers-Feb-24-2017，时长：37-46"><a href="#Meet-Mikeal-Rogers-Feb-24-2017，时长：37-46" class="headerlink" title="Meet Mikeal Rogers,  Feb 24, 2017，时长：37:46"></a><a href="https://changelog.com/jsparty/meet-mikeal-rogers" target="_blank" rel="external">Meet Mikeal Rogers</a>,  Feb 24, 2017，时长：37:46</h2><ul>
<li>3位主持是 <a href="https://twitter.com/mikeal" target="_blank" rel="external">Mikeal Rogers</a>，<a href="https://twitter.com/adamstac" target="_blank" rel="external">Adam Stacoviak</a>，<a href="https://twitter.com/jerodsanto" target="_blank" rel="external">Jerod Santo</a>。JS Party 的前3期将分别介绍3位主持作为节目的开场。</li>
<li>这一次将介绍 Mikeal Rogers。之前在 Mozilla 工作，写 Python 和 Javascript，现在已经不写 Python 了。四年在 Windmill 项目上(类似 Selenium)。</li>
<li>Mideal 是 io.js 的 leader 之一。</li>
<li>节目末介绍了联系方式。</li>
</ul>
<p>TOREVIEW</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;最后更新时间：Tue Jul 24 23:06:06 CST 2018&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://knarfeh.github.io/tags/Life/"/>
    
      <category term="Blog" scheme="http://knarfeh.github.io/tags/Blog/"/>
    
      <category term="Podcast" scheme="http://knarfeh.github.io/tags/Podcast/"/>
    
      <category term="Javascript" scheme="http://knarfeh.github.io/tags/Javascript/"/>
    
      <category term="Ruby" scheme="http://knarfeh.github.io/tags/Ruby/"/>
    
      <category term="Notes" scheme="http://knarfeh.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>【podcast】The Changelog</title>
    <link href="http://knarfeh.github.io/2017/11/03/%E3%80%90podcast%E3%80%91The%20Changelog/"/>
    <id>http://knarfeh.github.io/2017/11/03/【podcast】The Changelog/</id>
    <published>2017-11-03T09:40:03.000Z</published>
    <updated>2018-07-17T02:36:15.269Z</updated>
    
    <content type="html"><![CDATA[<p>不定期更新。</p>
<p>最后更新时间：Sat Jun  9 15:46:00 CST 2018</p>
<a id="more"></a>
<p>文稿地址：<a href="https://github.com/thechangelog/transcripts/" target="_blank" rel="external">thechangelog/transcripts</a></p>
<h2 id="300-Corporate-interests-in-open-source-and-dev-culture-Jun-6-2018，时长：1-33-42"><a href="#300-Corporate-interests-in-open-source-and-dev-culture-Jun-6-2018，时长：1-33-42" class="headerlink" title="#300 Corporate interests in open source and dev culture,  Jun 6, 2018，时长：1:33:42"></a>#300 <a href="https://changelog.com/podcast/300" target="_blank" rel="external">Corporate interests in open source and dev culture</a>,  Jun 6, 2018，时长：1:33:42</h2><ul>
<li>嘉宾是 </li>
</ul>
<h2 id="299-Curl-turns-20-HTTP-2-and-QUIC-Jun-6-2018，时长：1-33-42"><a href="#299-Curl-turns-20-HTTP-2-and-QUIC-Jun-6-2018，时长：1-33-42" class="headerlink" title="#299 Curl turns 20, HTTP/2, and QUIC Jun 6, 2018，时长：1:33:42"></a>#299 <a href="https://changelog.com/news/9N3J/visit" target="_blank" rel="external">Curl turns 20, HTTP/2, and QUIC</a> Jun 6, 2018，时长：1:33:42</h2><h2 id="287-Truffle-framework-and-decentralized-Ethereum-apps-Mar-13-2018，时长：1-13-09"><a href="#287-Truffle-framework-and-decentralized-Ethereum-apps-Mar-13-2018，时长：1-13-09" class="headerlink" title="#287 Truffle framework and decentralized Ethereum apps,  Mar 13, 2018，时长：1:13:09"></a>#287 <a href="https://changelog.com/podcast/287" target="_blank" rel="external">Truffle framework and decentralized Ethereum apps</a>,  Mar 13, 2018，时长：1:13:09</h2><ul>
<li>Truffle 是一个以太坊 DApp 开发的集成开发环境。嘉宾是 Tim Coulter - <a href="https://twitter.com/timothyjcoulter" target="_blank" rel="external">Twitter</a>，<a href="https://github.com/tcoulter" target="_blank" rel="external">GitHub</a>。</li>
<li><a href="https://www.ethpm.com/docs/integration-guide" target="_blank" rel="external">ethpm</a> 以太坊包管理工具</li>
<li>比特币团队在构建一种名叫 Simplicity 的语言。</li>
<li>Truffle 团队到现在只有6个人。14:00-16:00 类比 Truffle 和 Rails</li>
<li>25:16 解释为什么不用 Python，Javascript。eWASM，笑尿了🤣</li>
<li>32:32 Truffle 的目标之一是让其他的框架也能轻易地写智能合约的测试。</li>
<li>55:35 CryptoKitties</li>
</ul>
<p>TOREVIEW</p>
<h2 id="283-Devhints-TL-DR-for-Developer-Documentation-Feb-9-2018，时长：1-21-57"><a href="#283-Devhints-TL-DR-for-Developer-Documentation-Feb-9-2018，时长：1-21-57" class="headerlink" title="#283 Devhints - TL;DR for Developer Documentation,  Feb 9, 2018，时长：1:21:57"></a>#283 <a href="https://changelog.com/podcast/283" target="_blank" rel="external">Devhints - TL;DR for Developer Documentation</a>,  Feb 9, 2018，时长：1:21:57</h2><ul>
<li><a href="https://devhints.io/" target="_blank" rel="external">devhints</a> 是来自菲律宾的开发者 <a href="https://github.com/rstacruz" target="_blank" rel="external">Rico Sta. Cruz</a> 的作品，devhints 是一个开发者的备忘录，记录了一些语言，框架，工具常用到的细节。Rico 本来是做设计的，后来开始写 Ruby，写 Sinatra 和 Rails</li>
<li>rscss.io 也是基于 docpress 构建的。docpress 类似于 GitBook</li>
</ul>
<p>需要一些前端开发的背景知识才能完全听懂他们在说什么，查了不少里面提到的名词。</p>
<p>TOREVIEW</p>
<h2 id="282-The-Impact-and-Future-of-Kubernetes-Feb-2-2018，时长：0-45-34"><a href="#282-The-Impact-and-Future-of-Kubernetes-Feb-2-2018，时长：0-45-34" class="headerlink" title="#282 The Impact and Future of Kubernetes,  Feb 2, 2018，时长：0:45:34"></a>#282 <a href="https://changelog.com/podcast/282" target="_blank" rel="external">The Impact and Future of Kubernetes</a>,  Feb 2, 2018，时长：0:45:34</h2><ul>
<li>嘉宾是 Brendan Burns，k8s 联合创始人，Gabe Monroy, Deis 作者。</li>
<li>Deis 项目，一个开源的 Heroku</li>
<li>Open Service Broker 项目，比如说运行一个 DB，看起来像是运行一个 DB container，但其实例是云服务厂商如 MySQL 的。</li>
<li>Metaparticle，一个用于开发原生 k8s 应用的库。<a href="https://metaparticle.io/" target="_blank" rel="external">https://metaparticle.io/</a></li>
<li>00:37:51 提到 12factor.net</li>
<li>结尾提到 VIrtual Kubelet</li>
</ul>
<p>TOREVIEW</p>
<h2 id="281-Gitcoin-Sustaining-Open-Source-with-Cryptocurrency-Jan-26-2018，时长：1-16-33"><a href="#281-Gitcoin-Sustaining-Open-Source-with-Cryptocurrency-Jan-26-2018，时长：1-16-33" class="headerlink" title="#281 Gitcoin: Sustaining Open Source with Cryptocurrency,  Jan 26, 2018，时长：1:16:33"></a>#281 <a href="https://changelog.com/podcast/281" target="_blank" rel="external">Gitcoin: Sustaining Open Source with Cryptocurrency</a>,  Jan 26, 2018，时长：1:16:33</h2><h2 id="278-Blockchains-and-Databases-at-OSCON-Dec-14-2017，时长：0-56-54"><a href="#278-Blockchains-and-Databases-at-OSCON-Dec-14-2017，时长：0-56-54" class="headerlink" title="#278 Blockchains and Databases at OSCON,  Dec 14, 2017，时长：0:56:54"></a>#278 <a href="https://changelog.com/podcast/278" target="_blank" rel="external">Blockchains and Databases at OSCON</a>,  Dec 14, 2017，时长：0:56:54</h2><h2 id="271-My-Roadmap-to-Become-a-Blockchain-Engineer-Nov-8-2017，时长：1-04-17"><a href="#271-My-Roadmap-to-Become-a-Blockchain-Engineer-Nov-8-2017，时长：1-04-17" class="headerlink" title="#271 My Roadmap to Become a Blockchain Engineer,  Nov 8, 2017，时长：1:04:17"></a>#271 <a href="https://changelog.com/podcast/271" target="_blank" rel="external">My Roadmap to Become a Blockchain Engineer</a>,  Nov 8, 2017，时长：1:04:17</h2><ul>
<li>嘉宾是 Preethi Kasireddy，两年前的今天，写了一篇 Medium 的文章，Why I left the best job in the world，那个时候在 Andreessen Horowitz。曾经在高盛工作。后面决定去一个创业公司 Andreessen Horowitz。开始时学 Python，放弃了几次，然后学 Javascript，有一个周五直接没有上班学了一整天，后来辞职了，自学了几个月加入了 Coinbase 做全栈工程师。</li>
<li>离职 Coinbase 是因为找到一个 entrepreneur bug</li>
<li>Brendan Eich 参与的 Brave 浏览器，计划发行一种 token，让用户可以在使用浏览器的时候从中受益，36:00，Preethi 对区块链的应用的介绍可以再看几遍。</li>
<li>50:17:00 Preethi 分享学习方法，写博客</li>
<li>Preethi 的<a href="http://preethikasireddy.me/" target="_blank" rel="external">网站</a>，<a href="https://github.com/iam-peekay" target="_blank" rel="external">github</a>，<a href="https://twitter.com/iam_preethi" target="_blank" rel="external">twitter</a></li>
</ul>
<p>TOREVIEW</p>
<h2 id="250-The-Backstory-of-Kubernetes-with-Tim-Hockin-and-Aparna-Sinha-May-21-2017，时长：1-10-43"><a href="#250-The-Backstory-of-Kubernetes-with-Tim-Hockin-and-Aparna-Sinha-May-21-2017，时长：1-10-43" class="headerlink" title="#250 The Backstory of Kubernetes with Tim Hockin and Aparna Sinha,  May 21, 2017，时长：1:10:43"></a>#250 <a href="https://changelog.com/podcast/250" target="_blank" rel="external">The Backstory of Kubernetes with Tim Hockin and Aparna Sinha</a>,  May 21, 2017，时长：1:10:43</h2><ul>
<li>嘉宾是 Tim Hockin，k8s 的 founder，core engineer，Aparna Sinha 首席产品经理</li>
<li>Borg 始于 2003 年，Tim 在使用 Borg 的过程中总是会想，如果没有离开了 Google，没有 Borg 怎么办，我能重建一个 borg 吗？在2013年 docker 横空出世时，他们觉得这东西有点 borg 的意思，只不过它标准化了容器的概念。<a href="https://research.google.com/pubs/pub43438.html" target="_blank" rel="external">Borg 系统</a> 这篇文章的影响力很大，对 Mesos 的发展也有影响。</li>
<li>2014年6月6日，Kubernetes 在 DockerCon 上首次亮相。</li>
<li>Kubernetes 曾经考虑过 Seven 这个名字。『Google 不需要关注 Kubernetes 的 SEO 问题』，『不不不，别瞎说，我们从未操纵过搜索结果』– 来自硅谷的梗</li>
<li>PokémonGo 原来是用 Kubernetes 进行扩容的。</li>
</ul>
<p>TOREVIEW</p>
<h2 id="222-Ethereum-and-Cryptocurrency-with-Gavin-Wood-Sep-30-2016，时长：1-24-47"><a href="#222-Ethereum-and-Cryptocurrency-with-Gavin-Wood-Sep-30-2016，时长：1-24-47" class="headerlink" title="#222 Ethereum and Cryptocurrency with Gavin Wood,  Sep 30, 2016，时长：1:24:47"></a>#222 <a href="https://changelog.com/podcast/222" target="_blank" rel="external">Ethereum and Cryptocurrency with Gavin Wood</a>,  Sep 30, 2016，时长：1:24:47</h2><ul>
<li>嘉宾是 Gavin Wood，以太坊创始人，Solidity 创始人，Ethcore （创建了 Parity）创始人</li>
<li>Gavin Wood 给以太坊的定义是：programmable money</li>
<li>智能合约的概念最早来自90年代的 Nick Szabo</li>
<li>35% 开始讲解 DAO 的概念，Decentralized Autonomous Organization</li>
</ul>
<p>TOREVIEW</p>
<h2 id="204-IPFS-InterPlanetary-File-System-with-Juan-Benet-May-21-2016，时长：1-13-37"><a href="#204-IPFS-InterPlanetary-File-System-with-Juan-Benet-May-21-2016，时长：1-13-37" class="headerlink" title="#204 IPFS (InterPlanetary File System) with Juan Benet,  May 21, 2016，时长：1:13:37"></a>#204 <a href="https://changelog.com/podcast/204" target="_blank" rel="external">IPFS (InterPlanetary File System) with Juan Benet</a>,  May 21, 2016，时长：1:13:37</h2><ul>
<li>嘉宾是 Juan Benet，IPFS 的开发者。<a href="https://ipfs.io" target="_blank" rel="external">ipfs</a></li>
<li>12:10 IPFS, where the idea came from, how it started, the genesis story of this project. 最后提到了一些分布式文件系统的项目，Plan 9，9p，Venti，Fossil</li>
<li>19:46 IPFS is a new way of moving around content on the network.</li>
<li>24:00 how it works.</li>
<li>31:26 谈 IPFS 的激励机制。</li>
<li>34:35 self-certifying namespace, SFS，类似于 git 系统里当前指针的概念，当我们有了新的提交指针指向的是最新的提交。文件系统里的 DNS。</li>
<li>41:12 practical use of IPFS. CDN, package manager, IPFS 使用 GX 这个 go 包管理器进行包管理的。</li>
<li>58:40 CRDT, Convergent Replicated Data Type or Conflict-Free Replicated Data Type or Commutative Replicated Data Type。CRDT 类似于 Google Docs 实现的 operational transform，它保证了所有的操作不会冲突</li>
<li>节目最后讨论了一些 IPFS 的应用场景以及未来展望</li>
</ul>
<p>TOREVIEW</p>
<h2 id="200-JavaScript-and-Robots-Apr-19-2016，时长：1-29-40"><a href="#200-JavaScript-and-Robots-Apr-19-2016，时长：1-29-40" class="headerlink" title="#200 JavaScript and Robots,  Apr 19, 2016，时长：1:29:40"></a>#200 <a href="https://changelog.com/podcast/200" target="_blank" rel="external">JavaScript and Robots</a>,  Apr 19, 2016，时长：1:29:40</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定期更新。&lt;/p&gt;
&lt;p&gt;最后更新时间：Sat Jun  9 15:46:00 CST 2018&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://knarfeh.github.io/tags/Life/"/>
    
      <category term="Golang" scheme="http://knarfeh.github.io/tags/Golang/"/>
    
      <category term="Blog" scheme="http://knarfeh.github.io/tags/Blog/"/>
    
      <category term="Podcast" scheme="http://knarfeh.github.io/tags/Podcast/"/>
    
      <category term="Ruby" scheme="http://knarfeh.github.io/tags/Ruby/"/>
    
      <category term="Notes" scheme="http://knarfeh.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>发布一个-python-包</title>
    <link href="http://knarfeh.github.io/2017/10/20/%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AA-python-%E5%8C%85/"/>
    <id>http://knarfeh.github.io/2017/10/20/发布一个-python-包/</id>
    <published>2017-10-19T16:15:30.000Z</published>
    <updated>2017-10-20T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下发布一个 Python 包这件事。<br><a id="more"></a></p>
<p>这篇文章的目标读者是想要发布一个 Python 包的 Python 新手，以及我自己 – 一个时不时查看自己笔记的人。</p>
<p>对于发布一个 Python 包这件事，最佳实践应该是直接查看官方文档：<a href="https://packaging.python.org/tutorials/distributing-packages/" target="_blank" rel="external">Packaging and Distributing Projects</a> 因为这里是二手知识，只是一份总结，记录了一些要点，一些坑。</p>
<p>会尽可能与最新的，最佳实践同步。</p>
<h2 id="Requirements-前提条件"><a href="#Requirements-前提条件" class="headerlink" title="Requirements / 前提条件"></a>Requirements / 前提条件</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li><a href="https://github.com/pypa/pip" target="_blank" rel="external">pip</a></li>
<li><a href="https://github.com/pypa/setuptools" target="_blank" rel="external">setuptools</a></li>
<li><a href="https://bitbucket.org/pypa/wheel" target="_blank" rel="external">wheel</a></li>
<li><a href="https://github.com/pypa/twine" target="_blank" rel="external">twine</a> 用于上传 Python 包</li>
</ul>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><h4 id="直接使用源码发布"><a href="#直接使用源码发布" class="headerlink" title="直接使用源码发布"></a>直接使用源码发布</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup<span class="selector-class">.py</span> sdist</div></pre></td></tr></table></figure>
<p>安装的时候进行编译，安装包会比较小。</p>
<h4 id="使用-wheels-发布"><a href="#使用-wheels-发布" class="headerlink" title="使用 wheels 发布"></a>使用 wheels 发布</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python setup.py <span class="keyword">bdist_wheel </span>--universal  <span class="comment"># Universal Wheels</span></div><div class="line">python setup.py <span class="keyword">bdist_wheel </span> <span class="comment"># Pure Python Wheels 或 Platform Wheels</span></div></pre></td></tr></table></figure>
<p>打包 Python 代码和扩展 C 语言的一个相对新的方法，它发布的是已经编译好的包，安装包相对源码发布要大，但是安装时不需要编译，所以安装更快。它包括了通用 Wheels，纯 Python Wheels 以及平台 Wheels 这几种类型的 Wheels。通用 Wheels 不包含编译模块扩展，同时支持 Python2 Python3，纯 Python Wheels 不包含编译模块扩展，选择性支持 Python2 和 Python3，平台 Wheels 选择性支持 Linux，macOS，Windows 平台。</p>
<p>更详细的介绍请查阅：<a href="https://packaging.python.org/tutorials/distributing-packages/#wheels" target="_blank" rel="external">https://packaging.python.org/tutorials/distributing-packages/#wheels</a></p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>Python 社区推荐使用 twine 进行上传，可以通过 <code>pip install twine</code> 安装。</p>
<h4 id="pypi-账户"><a href="#pypi-账户" class="headerlink" title="pypi 账户"></a>pypi 账户</h4><p>在官网注册一个 ID: <a href="https://pypi.python.org/pypi?:action=register_form" target="_blank" rel="external">https://pypi.python.org/pypi?:action=register_form</a></p>
<p>账户信息可以写到 <code>~/.pypirc</code> 里面</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">[distutils]</span></div><div class="line"><span class="attr">index-servers</span>=pypi</div><div class="line"><span class="section"></span></div><div class="line">[pypi]</div><div class="line"><span class="attr">repository</span> = https://upload.pypi.org/legacy/</div><div class="line"><span class="attr">username</span> = &lt;username&gt;</div></pre></td></tr></table></figure>
<h4 id="上传-Python-包"><a href="#上传-Python-包" class="headerlink" title="上传 Python 包"></a>上传 Python 包</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">twine</span> upload dist/*</div></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>400 Client Error: This filename has previously been used, you should use a different version.</li>
</ul>
<p>包名加版本号是这个互联网上关于你这个包的唯一标示，你的包一旦上传了，如果你进行了修改，除了更新版本号再上传没有其他办法，即使你在 pypi 的后台页面删除了该版本也不行，上传的包名是永久的。其实很容易理解，你总不想你的用户们抱怨在不同时间段下载了同一个版本的包，但运行行为不一样吧？版本号按照 <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> 的格式，修改一下版本号再上传就行。</p>
<h2 id="Reference-参考文档"><a href="#Reference-参考文档" class="headerlink" title="Reference / 参考文档"></a>Reference / 参考文档</h2><ul>
<li><a href="https://packaging.python.org/tutorials/distributing-packages/" target="_blank" rel="external">Packaging and Distributing Projects</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下发布一个 Python 包这件事。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>github, ready to go?</title>
    <link href="http://knarfeh.github.io/2017/03/26/github-ready-to-go/"/>
    <id>http://knarfeh.github.io/2017/03/26/github-ready-to-go/</id>
    <published>2017-03-25T16:04:32.000Z</published>
    <updated>2017-04-04T14:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>假期的时候给一个 golang 开源项目 <a href="https://github.com/zquestz/s" target="_blank" rel="external">s</a> 贡献了代码，快两个月了，时间也有点久远了😂  我发现给 golang 项目贡献代码的姿势跟给其他语言贡献代码的姿势不太一样，而我当时只是 hack 了一下，也没记录下来，这不，给自己挖坑了，最近又有一位朋友问我怎么给 github 上的 golang 项目贡献代码，为什么会有这样的问题呢，难道 golang 很特殊？听我一一道来。<br><a id="more"></a></p>
<h2 id="问题1：怎么给一个-github-项目贡献代码"><a href="#问题1：怎么给一个-github-项目贡献代码" class="headerlink" title="问题1：怎么给一个 github 项目贡献代码"></a>问题1：怎么给一个 github 项目贡献代码</h2><p>以 <a href="https://github.com/docker/compose/blob/master/CONTRIBUTING.md" target="_blank" rel="external">docker/compose</a> 为例吧，这个项目的 COMTRIBUTING.md 中描述的指导是非常规范的，客官也不必点击链接跳转了，我总结了一下步骤：</p>
<ol>
<li>Fork <a href="https://github.com/docker/compose" target="_blank" rel="external">https://github.com/docker/compose</a></li>
<li>在你的开发机上 <code>git clone git@github.com:username/compose.git</code></li>
<li>配置源仓库地址，在开发过程中与源仓库同步</li>
<li>提交代码后，在页面上点击 New pull request</li>
</ol>
<p>关于如何与源仓库同步，可以看 github 的文章：<a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">https://help.github.com/articles/syncing-a-fork/</a></p>
<p>简单总结一下就是：</p>
<h3 id="增加一个源仓库的地址"><a href="#增加一个源仓库的地址" class="headerlink" title="增加一个源仓库的地址"></a>增加一个源仓库的地址</h3><ul>
<li><code>git remote -v</code></li>
<li><code>git remote add upstream https://github.com/original_owner/original_repository</code></li>
</ul>
<h3 id="保持与源仓库同步"><a href="#保持与源仓库同步" class="headerlink" title="保持与源仓库同步"></a>保持与源仓库同步</h3><ul>
<li><code>git fetch upstream</code></li>
<li><code>git checkout master</code></li>
<li><code>git merge upstream/master</code></li>
</ul>
<h2 id="问题2：golang-有什么特别的"><a href="#问题2：golang-有什么特别的" class="headerlink" title="问题2：golang 有什么特别的"></a>问题2：golang 有什么特别的</h2><p>如果按照上面的做法，比如我 fork 了<a href="https://github.com/zquestz/s" target="_blank" rel="external">s</a> 这个项目，然后使用 go get：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> http<span class="variable">s:</span>//github.<span class="keyword">com</span>/knarfeh/s</div></pre></td></tr></table></figure>
<p>代码就会放在 <code>$GOPATH/src/github.com/knarfeh/s</code> 路径下，然后就修改这份代码吗？不对。问题出在 go 项目的 import path 上，例如：<a href="https://github.com/zquestz/s" target="_blank" rel="external">s</a>  的 <code>cmd/config.go</code> (commit id：4b6657dfa11462864c527f43a86227def63e03f3)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"path/filepath"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/mitchellh/go-homedir"</span></div><div class="line">	<span class="string">"github.com/zquestz/go-ucl"</span></div><div class="line">	<span class="string">"github.com/zquestz/s/providers"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>这个 import 的路径，指向的是 <code>github.com/zquestz/s/</code>，这就尴尬了，难道把这些指向源仓库的 import 全改了，提 PR 的时候再改回来？也太麻烦了。</p>
<h2 id="问题3：给-github-的-golang-项目贡献代码，正确的姿势是什么"><a href="#问题3：给-github-的-golang-项目贡献代码，正确的姿势是什么" class="headerlink" title="问题3：给 github 的 golang 项目贡献代码，正确的姿势是什么"></a>问题3：给 github 的 golang 项目贡献代码，正确的姿势是什么</h2><p>其实很简单，我们可以在源仓库添加我们 fork 的仓库的地址。以 <a href="https://github.com/zquestz/s" target="_blank" rel="external">s</a> 为例，具体步骤：</p>
<ol>
<li>在 github 上 fork 源仓库</li>
<li><code>go get https://github.com/zquestz/s</code></li>
<li>给源仓库加上 fork 的仓库地址，比如：<code>git remote add fork https://github.com/knarfeh/s</code></li>
<li>修改了代码后，<code>git push fork</code> ，然后就可以在 github 上提交 PR 啦</li>
</ol>
<p>回过来一想，也许这才是 github 的正确使用方式呢，这样的话，也不必用 <a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">https://help.github.com/articles/syncing-a-fork/</a> 这种方式跟源仓库同步了，直接 pull master，然后在 fork 的分支上 rebase 就好了，呵呵呵呵呵🙃</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://github.com/docker/compose/blob/master/CONTRIBUTING.md" target="_blank" rel="external">docker/compose</a></li>
<li><a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">sync a fork</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假期的时候给一个 golang 开源项目 &lt;a href=&quot;https://github.com/zquestz/s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;s&lt;/a&gt; 贡献了代码，快两个月了，时间也有点久远了😂  我发现给 golang 项目贡献代码的姿势跟给其他语言贡献代码的姿势不太一样，而我当时只是 hack 了一下，也没记录下来，这不，给自己挖坑了，最近又有一位朋友问我怎么给 github 上的 golang 项目贡献代码，为什么会有这样的问题呢，难道 golang 很特殊？听我一一道来。&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://knarfeh.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>【译】PEP333-Python Web Server Gateway Interface v1.0</title>
    <link href="http://knarfeh.github.io/2017/01/30/%E3%80%90%E8%AF%91%E3%80%91PEP333-Python%20Web%20Server%20Gateway%20Interface%20v1.0/"/>
    <id>http://knarfeh.github.io/2017/01/30/【译】PEP333-Python Web Server Gateway Interface v1.0/</id>
    <published>2017-01-30T15:13:35.000Z</published>
    <updated>2017-08-02T11:27:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.python.org/dev/peps/pep-0333/" target="_blank" rel="external">PEP 333 – Python Web Server Gateway Interface v1.0</a></p>
<p>第一版发布时间：2017-01-30<br>最后更新时间：2017-02-03</p>
<a id="more"></a>
<h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul>
<li><a href="#preface">序言</a></li>
<li><a href="#abstract">摘要</a></li>
<li><a href="#rationaleandgoal">基本原理及目标</a>  </li>
<li><a href="#overview">规范概述</a>  <ul>
<li><a href="#applicationandframework">应用程序/框架 端</a></li>
<li><a href="#serverandgateway">服务器/网关 端</a></li>
<li><a href="#middleware">中间件：可扮演两端角色的组件</a></li>
</ul>
</li>
<li><a href="#detail">规范细则</a>  <ul>
<li><a href="#environ"><code>environ</code> 变量</a><ul>
<li><a href="#input_error">输入和错误流</a></li>
</ul>
</li>
<li><a href="#start_response">可调用 <code>start_response()</code></a><ul>
<li><a href="#content_length">处理 <code>Content-Length</code>头信息</a></li>
</ul>
</li>
<li><a href="#bufferandstreaming">缓冲和流</a><ul>
<li><a href="#middle_block">中间件处理块边界</a></li>
<li><a href="#write">可调用 <code>write()</code></a></li>
</ul>
</li>
<li><a href="#unicode">Unicode 问题</a></li>
<li><a href="#error_handle">错误处理</a></li>
<li><a href="#HTTP1.1"><code>HTTP 1.1 Expect/Continue</code>机制</a></li>
<li><a href="#HTTP_other">HTTP 的其他特性</a></li>
<li><a href="#thread">线程支持</a></li>
</ul>
</li>
<li><a href="#implementandapplication">具体实现/应用程序</a><ul>
<li><a href="#server_api">服务器扩展API</a></li>
<li><a href="#config">应用程序配置</a></li>
<li><a href="#URL">URL 的构建</a></li>
<li><a href="#Python2.2">对 Python2.2 之前的版本的支持</a></li>
<li><a href="#optional">可选的平台相关的文件处理</a></li>
</ul>
</li>
<li><a href="#QA">问题和回答</a></li>
<li><a href="#in_discussion">尚在讨论中的提议</a></li>
<li><a href="#acknowledgements">鸣谢</a></li>
<li><a href="#refrence">参考文献</a></li>
<li><a href="#copyright">版权声明</a></li>
</ul>
<p><a name="preface"></a></p>
<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p><br>注意：关于本规范的后续版本，请参考 <a href="https://www.python.org/dev/peps/pep-3333" target="_blank" rel="external">PEP 3333</a>， PEP 3333 是支持 Python 3.X 的新版本，包含了一些社区勘误，补充，更正的的相关说明信息。</p>
<p><a name="abstract"></a></p>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p><br>这份规范规定了一种在 web 服务器与 web 应用程序/框架之间的标准接口，以确保 web 应用程序在不同的 web 服务器之间具有可移植性。</p>
<p><a name="rationaleandgoal"></a></p>
<h3 id="基本原理和目标"><a href="#基本原理和目标" class="headerlink" title="基本原理和目标"></a>基本原理和目标</h3><p></p>
<p>目前 Python 有大量的 Web 框架，比如 Zope, Quixote, Webware, SkunkWeb, PSO 和 Twisted Web – 这里我仅列举出这么几个 <a name="id1"><a href="#id6">[1]</a></a>。这么多的选择让新手无所适从，因为基本上，选择什么样的框架有时会反过来限制对web服务器的选择，反之亦然。</p>
<p>相比之下，虽然 java 也拥有众多 web 的框架，但是 java 的『servlet』API 使得用任何框架编写出来的应用程序都可以在所有支持 servlet API 的 web 服务器上运行。  </p>
<p>服务器中这种针对 Python 的 API 的使用和普及 – 不管服务器是用 python 写的（如: Medusa），还是内嵌 python（如: mod_python），抑或是通过一种网关协议来调用 Python（如:CGI, FastCGI等） – 把人们从 web 框架的选择和 web 服务器的选择中剥离开来，使他们能够任意选择适合自己的组合，而 web 服务器和 web 框架的开发者们也能够把精力集中到各自的领域。  </p>
<p>鉴于此，这份 PEP 建议在 web 服务器和 web 应用/框架之间建立一种简单通用的接口规范，即 Python Web 服务器网关接口（简称 WSGI）。</p>
<p>然而光有这么一份规范，对于改变 web 服务器和 web 应用/框架的现状是不够的，只有当那些 web 服务器和 web 框架的作者/维护者们真正地实现了 WSGI，这份 WSGI 规范才能起到它该起的作用。  </p>
<p>不过，由于目前还没有任何框架或服务器实现了 WSGI，而那些新转向支持 WSGI 的框架的作者们也不会从我们这得到任何直接的奖励或者好处，所以，我们的这份 WSGI 必须要拟定地足够容易实现，这样才能降低框架作者们在实现接口这件事上的初始投资成本。</p>
<p>由此可见，服务器和框架两边接口实现的简单性，对于提高 WSGI 的实用性来说，绝对是非常重要的，同时，这一点也是任何设计决策的首要依据。</p>
<p>需要注意的是，框架作者实现框架时的简单性和 web 应用程序开发者使用框架时的易用性是两码事。WSGI 为框架作者们提出了一套只包含必需、最基本元素的接口，因为像响应对象以及 cookie 处理等这些花哨的高级功能只会妨碍现有的框架对这些问题的处理。再说一次，WSGI 的目标是使现有的 web 服务器和 web 框架之间更加方便地互联互通，而不是想重新创建一套新的 web 框架。</p>
<p>同时也要注意到，我们的这个目标也限制了 WSGI 不会用到任何当前发布 Python 版本里没有的东西。因此，这一份规范中不会推荐或要求任何新的 Python 标准模块，WSGI 中规定的所有东西都不需要 2.2.2 以上版本的 Python 支持。（当然，在未来版本的 Python 标准库中，如果 Python 自带的标准库中的 web 服务器能够包含对我们这份接口的支持，那将会是一个很不错的主意。)</p>
<p>除了要让现有的以及将要出现的框架和服务器容易实现之外，也应该让创建诸如请求预处理器，响应处理器，及创建其他基于 WSGI 的中间件组件这一类事情变得简单易操作。这里说的中间件组件，概念是这样的：它们对服务器来说它们是应用程序，而对中间件包含的应用程序来说，它们又可以被看作是服务器。</p>
<p>如果中间件既简单又鲁棒，并且 WSGI 广泛地应用在服务器和框架中，那么就有可能出现全新的 Python web 框架：一个由若干个 WSGI 中间件组件组成的松耦合的框架。事实上，现有框架的作者们甚至可能会选择去重构他们框架中已有的服务，使它们变得更像是一些配合 WSGI 使用的库而不是一个完整的框架。这样一来，web 应用程序开发者们就可以为他们想实现的特定功能选择最佳组合的组件，而不用再局限于某一个特定框架并忍受该框架的所有优缺点。</p>
<p>当然，就现在来说，这一天毫无疑问还要等很久。同时，对 WSGI 来说，让每一个框架都能在任何服务器上运行起来，又是一个足够的短期目标。</p>
<p>最后，需要指出的是，当前版本的 WSGI 对于一个应用程序具体该以何种方式部署在 web 服务器或者服务器网关上并没有做具体说明。就现在来看，这个是需要由服务器或网关来负责定义怎么实现的。等到以后，等有了足够多的服务器/网关通过实现了 WSGI 并积累了多样化的部署需求方面的领域经验，那么到时候也许会产生另一份 PEP 来描述 WSGI 服务器和应用框架的部署标准。</p>
<p><a name="overview"></a></p>
<h3 id="规范概述"><a href="#规范概述" class="headerlink" title="规范概述"></a>规范概述</h3><p><br>WSGI 接口有两个部分：『服务器端』或『网关端』和『应用程序』或 『Web 框架端』。服务器端调用一个由应用程序端提供的可调用者对象(callable)，至于它是如何被调用的，这要取决于服务器/网关这一端。我们假定有一些服务器/网关会要求应用程序的部署人员编写一个简短的脚本来启动一个服务器/网关的实例，并提供给服务器/网关一个应用程序对象，而还有的一些服务器/网关则不需要这样，它们会需要一个配置文件又或者是其他机制来指明应该从哪里导入或者获得应用程序对象。</p>
<p>除了『纯粹』的服务器/网关和应用程序/框架，还可以创建一种叫做『中间件』的组件，中间件它对这份规范当中的两端(服务器端和应用程序端)都做了实现，我们可以这样解释中间件，对于包含它们的服务器，中间件是应用程序，而对于包含在中间件当中的应用程序来说，它又扮演着服务器的角色。不仅如此，中间件还可以用来提供可扩展的 API，以及内容转换，导航和其他有用的功能。</p>
<p>在这份规范说明书中，我们将使用术语『一个可调用对象』（a callable），它的意思是『一个函数，方法，类，或者拥有 <code>__call__</code> 方法的一个对象实例』，这取决于服务器，网关，或者应用程序根据需要而选择的合适的实现技术。相反，服务器，网关，或者请求一个可调用者（callable）的应用程序必须<strong>不依赖</strong>可调用者（callable）的具体提供方式。记住，可调用者（callable）只是被调用，不会自省（introspect）。</p>
<p><a name="refrence"></a></p>
<p><a name="applicationandframework"></a></p>
<h4 id="应用程序-框架-端"><a href="#应用程序-框架-端" class="headerlink" title="应用程序/框架 端"></a>应用程序/框架 端</h4><p></p>
<p>简单地说, 一个应用程序对象是一个接受了 2 个参数的可调用对象, 这里的对象并不能理解为它真的需要一个对象实例：一个函数、方法、类、或者带有 <code>__call__</code> 方法的对象实例都可以用来当做应用程序对象。应用程序对象必须可以被多次调用，实质上所有的服务器/网关（除了 CGI）都会产生这样的重复请求。</p>
<p>（注意：虽然我们把它叫做『应用程序』对象，但这并不意味着程序员需要把 WSGI 当做 API 来调用！我们假定应用程序开发者将会仍然使用更高层的框架服务来开发它们的应用程序，WSGI 只是一个提供给框架和服务器开发者们使用的工具，它并没有打算直接向应用程序开发者提供支持。)</p>
<p>这里我们来看两个应用程序对象的示例；其中，一个是函数，另一个是类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_app</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    <span class="string">"""这可能是最简单的应用程序对象了。"""</span></div><div class="line">    status = <span class="string">'200 OK'</span></div><div class="line">    response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</div><div class="line">    start_response(status, response_headers)</div><div class="line">    <span class="keyword">return</span> [<span class="string">'Hello world!\n'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppClass</span>:</span></div><div class="line">    <span class="string">"""生成相同的输出，但是使用的是一个类。</span></div><div class="line">    （注意：这里『AppClass』就是一个『应用程序』，故调用它会返回一个『AppClass』的实例，这个实例就是规范里面说的由一个『可调用的应用程序』（application callable）返回的可迭代者（iterable）。</div><div class="line"></div><div class="line">    如果我们希望使用『AppClass』的实例，而不是应用程序对象，那么我们就必须实现这个『__call__』方法，这个方法将用来执行应用程序，然后我们需要创建一个实例来提供给服务器/网关使用。</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        self.environ = environ</div><div class="line">        self.start = start_response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        status = <span class="string">'200 OK'</span></div><div class="line">        response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</div><div class="line">        self.start(status, response_headers)</div><div class="line">        <span class="keyword">yield</span> <span class="string">"Hello world!\n"</span></div></pre></td></tr></table></figure>
<p><a name="serverandgateway"></a></p>
<h4 id="服务器-网关-端"><a href="#服务器-网关-端" class="headerlink" title="服务器/网关 端"></a>服务器/网关 端</h4><p><br>每一次，当 HTTP 客户端向应用程序发来一个请求，服务器/网关都会调用应用程序可调用对象（callable）。为了阐述方便，这里有一个 CGI 网关，简单的说它就是一个以应用程序对象为参数的函数实现，注意，本例中对错误只做了有限的处理，因为默认情况下没有被捕获到的异常都会被输出到 <code>sys.stderr</code> 并被服务器记录下来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os, sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_with_cgi</span><span class="params">(application)</span>:</span></div><div class="line"></div><div class="line">    environ = dict(os.environ.items())</div><div class="line">    environ[<span class="string">'wsgi.input'</span>]        = sys.stdin</div><div class="line">    environ[<span class="string">'wsgi.errors'</span>]       = sys.stderr</div><div class="line">    environ[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</div><div class="line">    environ[<span class="string">'wsgi.multithread'</span>]  = <span class="keyword">False</span></div><div class="line">    environ[<span class="string">'wsgi.multiprocess'</span>] = <span class="keyword">True</span></div><div class="line">    environ[<span class="string">'wsgi.run_once'</span>]     = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> environ.get(<span class="string">'HTTPS'</span>, <span class="string">'off'</span>) <span class="keyword">in</span> (<span class="string">'on'</span>, <span class="string">'1'</span>):</div><div class="line">        environ[<span class="string">'wsgi.url_scheme'</span>] = <span class="string">'https'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        environ[<span class="string">'wsgi.url_scheme'</span>] = <span class="string">'http'</span></div><div class="line"></div><div class="line">    headers_set = []</div><div class="line">    headers_sent = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(data)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headers_set:</div><div class="line">             <span class="keyword">raise</span> AssertionError(<span class="string">"write() before start_response()"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> headers_sent:</div><div class="line">             <span class="comment"># 在第一次输出之前发送已存储的报头。</span></div><div class="line">             status, response_headers = headers_sent[:] = headers_set</div><div class="line">             sys.stdout.write(<span class="string">'Status: %s\r\n'</span> % status)</div><div class="line">             <span class="keyword">for</span> header <span class="keyword">in</span> response_headers:</div><div class="line">                 sys.stdout.write(<span class="string">'%s: %s\r\n'</span> % header)</div><div class="line">             sys.stdout.write(<span class="string">'\r\n'</span>)</div><div class="line"></div><div class="line">        sys.stdout.write(data)</div><div class="line">        sys.stdout.flush()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> exc_info:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">if</span> headers_sent:</div><div class="line">                    <span class="comment"># 如果报头已发送，则重新抛出原始的异常。</span></div><div class="line">                    <span class="keyword">raise</span> exc_info[<span class="number">0</span>], exc_info[<span class="number">1</span>], exc_info[<span class="number">2</span>]</div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                exc_info = <span class="keyword">None</span>     <span class="comment"># 避免死循环。</span></div><div class="line">        <span class="keyword">elif</span> headers_set:</div><div class="line">            <span class="keyword">raise</span> AssertionError(<span class="string">"Headers already set!"</span>)</div><div class="line"></div><div class="line">        headers_set[:] = [status, response_headers]</div><div class="line">        <span class="keyword">return</span> write</div><div class="line"></div><div class="line">    result = application(environ, start_response)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> result:</div><div class="line">            <span class="keyword">if</span> data:    <span class="comment"># 在报文体出现前不发送报头。</span></div><div class="line">                write(data)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</div><div class="line">            write(<span class="string">''</span>)   <span class="comment"># 如果报文体为空，则发送报头。</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> hasattr(result, <span class="string">'close'</span>):</div><div class="line">            result.close()</div></pre></td></tr></table></figure>
<p><a name="middleware"></a></p>
<h4 id="中间件：可扮演两端角色的组件"><a href="#中间件：可扮演两端角色的组件" class="headerlink" title="中间件：可扮演两端角色的组件"></a>中间件：可扮演两端角色的组件</h4><p></p>
<p>我们注意到，单个对象可以作为请求应用程序的服务器存在，也可以作为被服务器调用的应用程序存在。这样的『中间件』可以执行以下这些功能：</p>
<ul>
<li>在重写相应的 <code>environ</code> 变量之后，根据目标 URL 地址将请求路由到不同的应用程序对象。</li>
<li>允许多个应用程序或框架在同一个进程中并行运行。</li>
<li>通过在网络上转发请求和应答，实现负载均衡和远程处理。</li>
<li>对上下文（content）进行后加工（postprocessing），比如应用 xsl 样式表等。</li>
</ul>
<p>中间件的存在对于『服务器/网关』和『应用程序/框架』来说是透明的，并不需要特殊的支持。想在应用程序中加入中间件的用户只须简单地把中间件当作应用程序提供给服务器，并配置中间件组件以服务器的身份来调用应用程序。当然，中间件组件包裹的『应用程序』也可能是另外一个包裹了应用程序的中间件组件，这样循环下去就构成了我们所说的『中间件栈』了。</p>
<p>别忘了最重要的部分，中间件必须遵循 WSGI 服务器和应用程序两端提出的一些限制和要求，有些时候，对中间件的要求甚至比对单纯的服务器或应用程序还要严格，关于这些我们都会在这份规范文档中指出来。</p>
<p>这里有一个（有趣的）中间件组件的例子，这个中间件使用 Joe Strout 写的 <code>piglatin.py</code> 程序将 <code>text/plain</code> 的响应转换成 pig latin（注意：一个『真实』的中间件组件很可能会使用更加鲁棒的方式来检查上下文的类型和上下文的编码。同样，这个简单的例子还忽略了一个单词还可能跨区块分割的可能性。）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> piglatin <span class="keyword">import</span> piglatin</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LatinIter</span>:</span></div><div class="line"></div><div class="line">    <span class="string">"""如果可以转换的话，将可迭代的输出转换成拉丁语式。</span></div><div class="line"></div><div class="line">    注意『okayness』可能改变，直到应用程序生成（yield）出它自己的第一个非空字符串，所以，『transform_ok』必须是一个可变的真实值。</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, result, transform_ok)</span>:</span></div><div class="line">        <span class="keyword">if</span> hasattr(result, <span class="string">'close'</span>):</div><div class="line">            self.close = result.close</div><div class="line">        self._next = iter(result).next</div><div class="line">        self.transform_ok = transform_ok</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.transform_ok:</div><div class="line">            <span class="keyword">return</span> piglatin(self._next())</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self._next()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Latinator</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># 默认情况下不传送输出。</span></div><div class="line">    transform = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, application)</span>:</span></div><div class="line">        self.application = application</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line"></div><div class="line">        transform_ok = []</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">start_latin</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line"></div><div class="line">            <span class="comment"># 重置 ok 标志位，防止重复的调用。 </span></div><div class="line">            <span class="keyword">del</span> transform_ok[:]</div><div class="line"></div><div class="line">            <span class="keyword">for</span> name, value <span class="keyword">in</span> response_headers:</div><div class="line">                <span class="keyword">if</span> name.lower() == <span class="string">'content-type'</span> <span class="keyword">and</span> value == <span class="string">'text/plain'</span>:</div><div class="line">                    transform_ok.append(<span class="keyword">True</span>)</div><div class="line">                    <span class="comment"># 若出现content-length，则需要strip，否则会出错。</span></div><div class="line">                    response_headers = [(name, value)</div><div class="line">                        <span class="keyword">for</span> name, value <span class="keyword">in</span> response_headers</div><div class="line">                            <span class="keyword">if</span> name.lower() != <span class="string">'content-length'</span></div><div class="line">                    ]</div><div class="line">                    <span class="keyword">break</span></div><div class="line"></div><div class="line">            write = start_response(status, response_headers, exc_info)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> transform_ok:</div><div class="line">                <span class="function"><span class="keyword">def</span> <span class="title">write_latin</span><span class="params">(data)</span>:</span></div><div class="line">                    write(piglatin(data))</div><div class="line">                <span class="keyword">return</span> write_latin</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> write</div><div class="line"></div><div class="line">        <span class="keyword">return</span> LatinIter(self.application(environ, start_latin), transform_ok)</div><div class="line"><span class="comment"># 在Latinator's控制下运行foo_app, 使用示例的CGI网关例子。</span></div><div class="line"><span class="keyword">from</span> foo_app <span class="keyword">import</span> foo_app</div><div class="line">run_with_cgi(Latinator(foo_app))</div></pre></td></tr></table></figure>
<p><a name="detail"></a></p>
<h3 id="规范细则"><a href="#规范细则" class="headerlink" title="规范细则"></a>规范细则</h3><p></p>
<p>应用程序对象必须接受两个位置参数（positional arguments），为了方便说明，我们不妨将它们分别命名为 <code>environ</code> 和 <code>start_response</code>，但是这并不是说它们必须取这两个名字。服务器或网关必须用这两个位置参数（注意不是关键字参数）来调用应用程序对象（比如，像上面展示的那样调用 <code>result = application(environ, start_response)</code>）</p>
<p><code>environ</code> 参数是一个字典对象，也是一个有着 CGI 风格的环境变量。这个对象必须是一个 Python 内建的字典对象（不能是子类、用户字典（UserDict）或其他对字典对象的模拟），应用程序必须允许以任何它需要的方式来修改这个字典， <code>environ</code> 还必须包含一些特定的 WSGI 所需的变量（在后面章节里会提到），有时也可以包含一些服务器相关的扩展变量，变量的命名规范在下文中会提到。</p>
<p><code>start_response</code> 参数是一个可调用对象（callable），它接受两个必要的位置参数和一个可选参数。为方便说明，我们分别将它们命名为 <code>status</code>，<code>response_headers</code> 和 <code>exc_info</code> 。再强调一遍，这并不是说它们一定要用这些名字。应用程序必须用这些位置参数来请求可调用对象 <code>start_response</code>（比如：<code>start_response(status, response_headers)</code>)。</p>
<p><code>status</code> 参数是一个形如『999 Message here』这样的状态字符串。而 <code>response_headers</code> 参数是一个包含有 <code>（header_name,header_value）</code> 参数列表的元组，用来描述 HTTP 的响应头。可选的 <code>exc_info</code> 参数会在接下来的 <a href="#start_response">可调用 <code>start_response()</code></a> 和 <a href="#error">错误处理</a> 两章节中详细描述，它只有在应用程序捕获到了错误并试图在浏览器中显示错误的时候才会被用到。</p>
<p><code>start_response</code> 可调用对象（callable）必须返回一个 <code>write(body_data)</code> 可调用对象（callable），<code>write(body_data)</code> 接受一个位置参数：一个将会被当作HTTP响应体的一部分而输出的字符串（注意：提供可调用对象 <code>write()</code> 只是为了支持一些现有框架的命令式输出 APIs；新的应用程序或框架应当尽量避免使用 <code>write()</code>，详细情况请参照 <a href="#bufferandstreaming">缓冲和流</a> 章节。)</p>
<p>当应用程序被服务器调用的时候，它必须返回一个能够生成0个或多个字符串的可迭代对象（iterable）。这可以通过几种方式来实现，比如通过返回一个包含一系列字符串的列表，或者是让应用程序本身就是一个能生成多个字符串的生成器（generator），又或者是使应用程序本身是一个类并且这个类的实例是一个可迭代者（iterable）。总之，不论通过什么途径完成，应用程序对象必须总是能返回一个能够生成0个或多个字符串的可迭代对象（iterable）。</p>
<p>服务器或者网关必须将产生的字符串以一种无缓冲的方式传送到客户端，并且总是在一个字符串传完之后再去请求下一个字符串。（换句话说，也就是应用程序必须自己负责实现缓冲机制。更多关于应用程序输出应该如何处理的细节，请阅读下面的 <a href="#buffer">缓冲和流</a> 章节。)</p>
<p>服务器或网关应当将产生的字符串看做是一串二进制字节序列来对待：特别地，它必须确保行的结尾没有被修改。应用程序必须负责确保将那些要传送至 HTTP 客户端的字符串以一种与客户端相匹配的编码方式输出（服务器/网关可能会对 HTTP 附加传输编码，或者为了实现一些类似字节范围传输（byte-range transmission）这样的 HTTP 特性而进行一些转换，更多关于 HTTP 特性的细节请参照下文的 <a href="#HTTP_other">HTTP 的其他特性</a> 章节。)</p>
<p>假如服务器成功调用了 <code>len(iterable)</code> 方法，则它会认为此结果是正确的并且信赖这个结果。也就是说，如果应用程序返回的可迭代者（iterable）字符串提供了一个可用的 <code>__len__()</code> 方法，那么服务器就会认为应用程序<strong>确实</strong>是返回了正确的结果。（关于这个方法在一般情况下是如何被使用的，请阅读下文的 <a href="#content_length">处理Content-Length头信息</a>。)</p>
<p>如果应用程序返回的可迭代对象（iterable）有一个叫做 <code>close()</code> 的方法，则不论当前的请求是正常结束还是由于异常而终止，服务器/网关都<strong>必须</strong>在结束该请求之前调用这个方法。（这么做的目的是为了完成应用程序端的资源释放）这份规范将尝试完善对 <a href="https://www.python.org/dev/peps/pep-0325/" target="_blank" rel="external">PEP 325</a> 中生成器的支持，以及其它有 <code>close()</code> 方法的通用可迭代对象（iterable）的支持。</p>
<p>（注意：应用程序<strong>必须</strong>在可迭代对象（iterable）产生第一个报文主体（body）字符串之前请求 <code>start_response()</code> 可调用对象（callable），这样服务器才能在发送任意报文主体（body）内容之前发送响应头。不过，这一调用也可能在可迭代对象（iterable）第一次迭代的时候执行，所以服务器不能假定在它们开始迭代之前 <code>start_response()</code> 已经被调用过了。)</p>
<p>最后要说的是，服务器和网关<strong>不能使用</strong>应用程序返回的可迭代对象（iterable）的任何其他属性，除非是针对服务器或网关的特定类型的实例，比如 <code>wsgi.file_wrapper</code> 返回的『file wrapper』（请阅读 <a href="#optional">可选的平台相关的文件处理</a> 章节)。通常情况下，只有在这里指定的属性，或者通过 <a href="https://www.python.org/dev/peps/pep-0234/" target="_blank" rel="external">PEP 234 iteration APIs</a> 访问的属性才是可以接受的。</p>
<p><a name="environ"></a></p>
<h4 id="environ-变量"><a href="#environ-变量" class="headerlink" title="environ 变量"></a><code>environ</code> 变量</h4><p></p>
<p><code>environ</code> 字典被用来包含这些 CGI 环境变量，这些变量可以在参考文献通用网关接口<a name="id2"><a href="#id7">[2]</a></a>中找到。除非是空字符串，否则下面所列出的这些变量都必须指定，如果下面没有特殊说明，如果是空字符串的情况，会被忽略。 </p>
<hr>
<p><code>__REQUEST_METHOD__</code></p>
<hr>
<p>HTTP 的请求方式，比如『GET』 或『POST』。这个参数永远不可能是空字符串，故必须指定。</p>
<hr>
<p><code>__SCRIPT_NAME__</code></p>
<hr>
<p>URL 请求中『路径』的开始部分，对应了应用程序对象，这样应用程序就知道它的虚拟『位置』。如果该应用程序对应服务器根目录的话， 那么 <code>SCRIPT_NAME</code> 的值<strong>可能</strong>为空字符串。</p>
<hr>
<p><code>__PATH_INFO__</code></p>
<hr>
<p>URL 请求中『路径』的剩余部分，指定请求的目标在应用程序内部的虚拟『位置』。如果请求的目标是应用程序根目录并且末尾没有斜杠符号结尾的话，那么 <code>PATH_INFO</code> <strong>可能</strong>是空字符串 。</p>
<hr>
<p><code>__QUERY_STRING__</code></p>
<hr>
<p>URL 请求中紧跟在『?』后面的那部分，它可以为空或不存在。</p>
<hr>
<p><code>__CONTENT_TYPE__</code></p>
<hr>
<p>HTTP 请求中 <code>Content-Type</code> 字段包含的所有内容，它可以为空或不存在。</p>
<hr>
<p><code>__CONTENT_LENGTH__</code></p>
<hr>
<p>HTTP 请求中 <code>Content-Length</code> 字段包含的所有内容，它可以为空或不存在。</p>
<hr>
<p><code>__SERVER_NAME__，__SERVER_PORT__</code></p>
<hr>
<p>这两个变量可以和 <code>SCRIPT_NAME</code>、<code>PATH_INFO</code>  一起构成一个完整的 URL。然而要注意的是，如果有出现 <code>HTTP_HOST</code> ，那么在重建 URL 请求的时候就应当优先使用 <code>HTTP_HOST</code> 而非 <code>SERVER_NAME</code> 。详细内容请阅读下文的 <a href="#URL">URL重构</a> 这一章节 。<code>SERVER_NAME</code> 和 <code>SERVER_PORT</code> 这两个变量永远不可能是空字符串，并且总是必须指定的。</p>
<hr>
<p><code>__SERVER_PROTOCOL__</code></p>
<hr>
<p>客户端发送请求的时候所使用的协议版本。通常是类似『HTTP/1.0』或『HTTP/1.1』这样的字符串，可以被应用程序用来判断如何处理 HTTP 请求报头。（事实上这个变量更应该被叫做 <code>REQUEST_PROTOCOL</code>，因为这个变量代表的是在请求中使用的协议，而且看起来和服务器响应时使用的协议毫无关系。然而，为了保持和 CGI 的兼容性，这里我们还是沿用已有的名字<code>SERVER_PROTOCOL</code>。）</p>
<hr>
<p><code>HTTP_  变量</code></p>
<hr>
<p>这组变量对应着客户端提供的 HTTP 请求报头（即那些名字以 『HTTP_』 开头的变量）。这组变量的存在与否应和 HTTP 请求中相对应的 HTTP 报头保持一致。</p>
<hr>
<p>一个服务器或网关<strong>应该</strong>尽可能多地提供其他可用的 CGI 变量。另外，如果启用了 SSL，服务器或网关也<strong>应该</strong>尽可能地提供可用的 Apache SSL 环境变量<a name="id5"><a href="#id10">[5]</a></a>，比如 <code>HTTPS=on</code> 和 <code>SSL_PROTOCOL</code>。不过要注意的是，假如一个应用程序使用了上述没有列出的变量，那么对于那些不支持相关扩展的服务器来说，就必然要考虑到不可移植的缺点。（比如，不发布文件的 web 服务器就不应提供一个有意义的 <code>DOCUMENT_ROOT</code> 或 <code>PATH_TRANSLATED</code> 变量。）</p>
<p>一个遵循 WSGI 规范的服务器或网关应该在文档中描述它们自己的定义的同时，适当地说明下它们可以提供哪些变量。而应用程序这边则应该对它们要用到的每一个变量的存在性进行检查，并且在当检测到某些变量不存在时要有备用的措施。</p>
<p>注意: 缺失的变量 （比如当没有发生身份验证时的 <code>REMOTE_USER</code> 变量） 应该被排除在 <code>environ</code> 字典之外。同样需要注意的是，CGI 定义的变量，如果有出现的话，那必须是字符串类型。使用任何除了字符串类型以外的 CGI 变量都是违反本规范的。</p>
<p>除了 CGI 定义的变量，<code>environ</code> 字典也<strong>可以</strong>包含任何操作系统相关的环境变量，并且<strong>必须</strong>包含下面这些 WSGI 定义的变量：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:left">变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">wsgi.version</td>
<td style="text-align:left">元组 tuple (1, 0)，代表 WSGI 版本 1.0。</td>
</tr>
<tr>
<td style="text-align:center">wsgi.url_scheme</td>
<td style="text-align:left">应用程序被调用过程中的一个字符串，表示 URL 中的『scheme』部分。正常情况下，它的值是『http』或者『https』，视场合而定。</td>
</tr>
<tr>
<td style="text-align:center">wsgi.input</td>
<td style="text-align:left">一个能被 HTTP 请求主体（body）读取的输入流（类文件对象） （由于应用程序是不定时发来请求，服务器或网关在读取的时候可能是按需读取。或者它们会预读取客户端的请求体然后缓存在内存或者磁盘中，又或者根据它们自己的参数，利用其他技术来提供这样一种输入流。)</td>
</tr>
<tr>
<td style="text-align:center">wsgi.errors</td>
<td style="text-align:left">输出流（类文件对象），用来写错误信息的，目的是记录程序或者其他标准化及可能的中心化错误。它应该是一个『文本模式』的流；举一个例子，应用程序应该用『\n』作为行结束符，并且默认服务器/网关能将它转换成正确的行结束符。对很多服务器来说，<code>wsgi.errors</code> 是服务器的主要错误日志。当然也有其它选择，比如 <code>sys.stderr</code>，或者干脆是某种形式的日志文件。服务器的文档应当包含以下这类解释：比如该如何配置这些日志，又或者该从哪里去查找这些记录下来的输出。如果需要的话，一个服务器或网关还可以向不同的应用程序提供不同的错误流。</td>
</tr>
<tr>
<td style="text-align:center">wsgi.multithread</td>
<td style="text-align:left">如果一个应用程序对象同时被处于同一个进程中的不同线程调用，则这个参数值应该为『true』，否则就为『false』。</td>
</tr>
<tr>
<td style="text-align:center">wsgi.multiprocess</td>
<td style="text-align:left">如果相同的应用程序对象同时被其他进程调用，则此参数值应该为『true』；否则就为『false』。</td>
</tr>
<tr>
<td style="text-align:center">wsgi.run_once</td>
<td style="text-align:left">如果服务器/网关期待（但不保证）应用程序在它所在的进程生命期间只会被调用一次，则这个值应该为『true』。正常情况下，对于那些基于 CGI（或类似）的网关，这个值只可能是『true』。</td>
</tr>
</tbody>
</table>
<p>最后，这个 <code>environ</code> 字典可能会包含那些服务器定义的变量。这些变量应该用小写，数字，点号及下划线来命名，并且必须定义一个该服务器/网关专有的前缀开头。举个例子，<code>mod_python</code> 在定义变量的时候，就会使用类似 <code>mod_python.some_variable</code> 这样的名字。</p>
<p><a name="input_error"></a></p>
<h5 id="输入和错误流"><a href="#输入和错误流" class="headerlink" title="输入和错误流"></a>输入和错误流</h5><p><br>服务器提供的输入输出流必须提供以下的方法：</p>
<table>
<thead>
<tr>
<th>方法(Method)</th>
<th>流(Stream)</th>
<th>注释(Notes)</th>
</tr>
</thead>
<tbody>
<tr>
<td>read(size)</td>
<td>input</td>
<td>1</td>
</tr>
<tr>
<td>readline()</td>
<td>input</td>
<td>1, 2</td>
</tr>
<tr>
<td>readlines(hint)</td>
<td>input</td>
<td>1, 3</td>
</tr>
<tr>
<td><code>__iter__()</code></td>
<td>input</td>
<td></td>
</tr>
<tr>
<td>flush()</td>
<td>errors</td>
<td>4</td>
</tr>
<tr>
<td>write(str)</td>
<td>errors</td>
<td></td>
</tr>
<tr>
<td>writelines(seq)</td>
<td>errors</td>
</tr>
</tbody>
</table>
<p>除了下面列出的要点外，上表中列出的所有方法的语义在 Python 标准库参考文档里已经写得很具体了。</p>
<ol>
<li>服务器读取的长度不一定非要超过客户端指定的 <code>Content-length</code>， 并且如果应用程序尝试超过那个长度进行读取，则服务器可以模拟一个流结束（end-of-file）条件。而应用程序这边则不应该去尝试读取比指定的 <code>CONTENT_LENGTH</code> 更长的数据。</li>
<li>可选参数 <code>size</code> 是不支持用在 <code>readline()</code> 方法中的，因为它有可能会给开发服务器的开发者们增大困难，所以在实际中它不并常用。</li>
<li>请注意 <code>readlines()</code> 方法中的隐藏参数对于它的调用者和实现者都是可选的。应用程序方可以自由地选择不提供它，同样的，服务器或网关这端也可以自由地选择是否无视它。</li>
<li>由于错误流不能回转（rewound），服务器和网关可以立即选择自由地继续向前写操作（forward write），不需要缓存。在这种情况下，<code>flush()</code> 方法可能就是个空操作(no-op)。不过，一个具备可移植特优点的应用程序千万不能假定这个输出是无缓冲的或假定 flush 是一个空操作。一个可移植的应用程序如果需要确保输出确实已经被写入，则必须调用 <code>flush()</code> 方法。（例如：在多进程下对同一个日志文件写入操作的时候，可以起到最小化数据混杂的作用。）</li>
</ol>
<p>所有遵循此规范的服务器都必须支持上表中所列出的每一个方法。所有遵循此规范的应用程序都不能使用除上表之外的其他方法或属性。特别需要指出的是，应用程序千万不要试图去关闭这些流，就算它们自己有对 <code>close()</code> 方法做处理也不行。</p>
<p><a name="start_response"></a></p>
<h4 id="可调用-start-response"><a href="#可调用-start-response" class="headerlink" title="可调用 start_response()"></a>可调用 <code>start_response()</code></h4><p></p>
<p>传递给应用程序的第二个参数是一个可调用的形式：<code>start_response（status, reponse_headers, exc_info=None）</code>。（同所有的 WSGI 调用类似，它的参数必须是位置参数，而非关键字参数）。 <code>start_response</code> 调用被用来启动一个 HTTP 响应，它必须返回一个 <code>write(body_data)</code> 可调用对象 （具体参考下文的 <a href="#bufferandstreaming">缓冲和流</a> 章节）</p>
<p><code>status</code> 参数是 HTTP 的『status』字符串形式，比如『200 OK』, 『404 Not Found』这样的。也就是说，它是包含了一个状态码和一个原因短语的字符串，用空格分隔并且顺序是状态码在前原因短语在后。<code>status</code> 参数的两头不允许包含其他的字符或空格，（参见 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a>，6.1.1 章节获取更多信息），<code>status</code> 字符串<strong>不能</strong>包含控制字符，末尾也不能有终止符或换行符等其他的组合符号。</p>
<p><code>response_headers</code> 参数是个包含了 <code>（header_name, header_value）</code> 参数列表的元组（Tuple），它必须是一个严格的 Python 列表类型，换句话说，就是对它执行 <code>type(response_headers)</code> 时，返回值必须是 <code>ListType</code> 。如果需要，服务器<strong>可以</strong>随意修改它的内容，每一个 <code>header_name</code> 都必须是合法的 HTTP header 字段名 （参见 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 4.2章节），末尾不能有冒号或其他标点符号。</p>
<p>所有的 <code>header_value</code> 都<strong>不能</strong>包含任何控制字符，如回车或换行符等，中间嵌入或者末尾都不行。（做这样的要求是为了方便那些必须检查响应头的服务器，网关，中间件，使它们将必需的解析工作复杂度降到最低。）  </p>
<p>一般来说，服务器或网关负责确保将正确的头信息发送到客户端，如果应用程序（application）遗漏了必要的头信息（或其他相关的规范信息），则服务器或网关<strong>必须</strong>补上。 比如： <code>HTTP date:</code> 和 <code>Server:</code> 头信息通常是由服务器或网关提供的。 </p>
<p>（这里必须给服务器/网关的作者们提个醒: HTTP 头名称是区分大小写的，所以在检查应用程序提供的头信息时一定要考虑大小写的问题。）</p>
<p>应用程序和中间件禁止使用 HTTP/1.1 的『逐跳路由 （hop-by-hop）』特性或头信息（headers），以及任何 HTTP/1.0 中那些可能会对客户端跟服务器之间的持久连接产生影响的类似特性或头信息。这类特性是现今 Web 服务器的专属负责区域，如果一个应用程序尝试发送这类特性，那么服务器/网关必须将这看作是一个严重错误，并且如果它们是提供给 <code>start_response()</code> 的，则服务器/网关还必须抛出一个异常。 （了解更多『逐跳路由 （hop-by-hop）』的细节和特性，请参阅下面的 <a href="#HTTP_other">HTTP 的其他特性</a> 章节。)</p>
<p><code>start_response</code> 可调用对象<strong>肯定不能</strong>是真实地传送了响应头信息。相反地，它必须储存这类头信息以便服务器/网关用来传送，前提是应用程序返回值的第一次迭代生成了一个非空字符串，或者说在对应用程序的第一次调用中它的 <code>write()</code> 方法可被调用。换句话说，也就是在没有真正的响应体数据可用之前，响应头不能被发送，否则当应用程序到达的时候，可迭代对象都已经被迭代完了。（唯一可能的例外就是当响应头信息里显式地指定了 <code>Content-Length</code> 的值为0。） </p>
<p>响应头信息传输的延迟，是为了确保缓存的和异步的应用程序能够利用出错信息替换掉它们一开始打算的输出，一直到最后一刻。举个例子，在应用程序缓存期间，如果在生成相应内容数据时发生了错误，那么应用程序可能会将响应状态从『200 OK』替换成『500 Internal Error』。</p>
<p>如果有提供 <code>exc_info</code> 参数，则它必须是一个 Python 的 <code>sys.exc_info()</code> 元组（tuple）。该参数只有在 <code>start_response</code> 被一个错误处理程序（error handler）调用时才是必需的。如果提供了 <code>exc_info</code> 参数并且还没有发出任何 HTTP 头信息的请求，那么 <code>start_response</code> 应当使用新提供的 HTTP 响应头去替换掉当前已存储的 HTTP 响应头，从而允许应用程序在错误发生的情况下可以针对输出『改变主意』。</p>
<p>然而，假如提供了 <code>exc_info</code> 参数并且 HTTP 头信息也已经被发送，那么 <code>start_response</code> 必须抛出错误，也必须抛出 <code>exc_info</code> 元组，即： </p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">raise exc_info<span class="string">[0]</span>, exc_info<span class="string">[1]</span>, exc_info<span class="string">[2]</span></div></pre></td></tr></table></figure>
<p>这样会使得应用程序捕捉到的异常被重新抛出，并且原则上应该也会终止应用程序。（一旦 HTTP 信息头已经被发送，则应用程序再试图向浏览器发送错误信息是不安全的。）如果它通过 <code>exc_info</code> 参数调用 <code>start_response</code> 的话，应用程序不应当捕获任何由 <code>start_response</code> 抛出的异常。相反，应用程序应该允许类似这样的异常传送回服务器或者网关。更多信息请参考下文的 <a href="#error_handle">错误处理</a> 章节。</p>
<p>当且仅当 <code>exc_info</code> 参数被提供的时候，应用程序有可能多次调用 <code>start_response</code>。更确切的说是，如果 <code>start_response</code> 已经被当前应用程序调用过了，那么没有提供 <code>exc_info</code> 参数的情况下再调用 <code>start_response</code> 将会是一个很严重的错误。（参考上面 CGI 网关示例来帮助理解准确的逻辑。） </p>
<p>注意：实现了 <code>start_response</code> 的服务器，网关，或者中间件应当确保在函数调用期之外没有保存任何指向 <code>exc_info</code> 参数的引用，这样做的目的是为了避免通过回溯（traceback)及有关帧（frames involved）生成一个循环引用（circular reference），最简单的例子可以是这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> exc_info:</div><div class="line">         <span class="keyword">try</span>:</div><div class="line">             <span class="comment"># 这里处理 w/exc_info</span></div><div class="line">         <span class="keyword">finally</span>:</div><div class="line">             exc_info = <span class="keyword">None</span>    <span class="comment"># 避免循环引用。</span></div></pre></td></tr></table></figure>
<p><a name="content_length"></a></p>
<h5 id="处理-Content-Length-头信息"><a href="#处理-Content-Length-头信息" class="headerlink" title="处理 Content-Length 头信息"></a>处理 <code>Content-Length</code> 头信息</h5><p></p>
<p>如果应用程序没有提供 <code>Content-Length</code> 头信息，则服务器/网关可以有几种方法来处理它，这些方法当中最简单的就是在响应完成的时候关闭客户端连接。</p>
<p>然而在某些情况下，服务器或网关可能会要么自己生成 <code>Content-Length</code> 头，要么至少避免了关闭客户端连接的需求。如果应用程序没有调用 <code>write()</code> 可迭代对象，返回一个长度 <code>len()</code> 为1的可迭代对象，则服务器可以自动地识别出 <code>Content-Length</code> 的长度，这是通过可迭代对象生成的第一个字符串的长度来判断的。</p>
<p>还有，如果服务器和客户端都支持 HTTP/1.1 中的 『分块传输编码（chunked encoding）』<a name="id3"><a href="#id8">[3]</a> </a>特性，那么服务器可以在每一次调用 <code>write()</code> 方法发送数据块（Chunk）或者由可迭代对象迭代生成的字符串时，由此为每个数据块生成 <code>Content-Length</code> 头。如果它希望这么做的话，这样就可以让服务器保持与客户端的长连接。注意，如果真要这么做，则服务器必须完全遵循 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 规范，要不然就转而寻找其它的策略来处理缺少 <code>Content-Length</code> 的问题。</p>
<p>（注意：应用程序和中间件的输出<strong>一定不能</strong>使用任何类型的传输编码（<code>Transfer-Encoding</code>）技术，比如 chunking 或者 gzipping 这些；因为在『逐跳路由（hop-by-hop）』操作中，这些编码都属于服务器/网关的职权范围。详细信息可以参见下文的 <a href="#HTTP_other">HTTP 的其他特性</a> 章节。）</p>
<p><a name="bufferandstreaming"></a></p>
<h4 id="缓冲和流"><a href="#缓冲和流" class="headerlink" title="缓冲和流"></a>缓冲和流</h4><p></p>
<p>一般而言，应用程序都会选择先缓存（适当大小的）输出再一次性发送的方式来提高吞吐量。现有的 Zope 框架就用的这种常见的处理方法：输出首先会被缓存到 <code>StringIO</code> 或类似的对象里面，然后跟着响应头再一次性被传送出去。  </p>
<p>在 WSGI 中，相应的处理方法是让应用程序简单地返回一个单一元素可迭代对象（single-element iterable）比如列表（List），这个单一元素可迭代对象包含一个单字符串形式的响应体（response body ）。渲染那些文本信息很容易被保存到内存的 HTML 页面，这是一种对于绝大多数应用程序都推荐的工作方式。</p>
<p>然而，对于大文件或专门用途的 HTTP 流媒体（如多部分的『服务器推送』），应用程序或许需要以较小块状的方式提供输出（比如说为了避免加载一个很大的文件到内存中这种情况），还有些时候某些响应体的部分内容可能需要花费很长的时间来生成，这种情况下提前发送该响应体中那些已经生成好的部分还是很有必要的。  </p>
<p>在这种情况下，应用程序通常会返回一个可迭代对象（常见的是生成器迭代器（generator-iterator）），这个可迭代者会以逐块（block-by-block）的方式生成输出。并且这些块有可能会被破坏分成小块，有时是为了跟多块分界线（mulitpart boundaries）（比如『服务器推送』）保持相符，又或者是在一些费时任务（比如读取磁盘文件的另一个块）之前。  </p>
<p>WSGI 服务器/网关和中间件不允许延迟传送任何块；它们要么完整地将所有的块都传送给客户端，要么保证它们会继续向客户端传送块，即使是应用程序正在生成下一个块。一个服务器/网关或者中间件可以以下列三种方案中的任意一种提供保证。  </p>
<ol>
<li>在返回控制权给应用程序之前，发送整个块到操作系统(要求所有的O/S缓存被刷新（flushed）)。  </li>
<li>当应用程序在生成下一个块的时候，使用一个不同的线程来确保当前块能被继续传送。  </li>
<li>（仅使用中间件）来发送整个块到它的父级服务器/网关。  </li>
</ol>
<p>通过提供这样的保证措施，WSGI 就能允许应用程序保证在它们输出数据的过程中在任意点上都不会陷入停滞。这对于确保诸如多部分（multipart）『服务器推送（server push）』流的正常工作是至关重要的，因为在这种情况下多块分界线（multipart boundaries）之间的数据应当被完整地传送至客户端。</p>
<p><a name="middle_block"></a></p>
<h5 id="中间件处理块边界"><a href="#中间件处理块边界" class="headerlink" title="中间件处理块边界"></a>中间件处理块边界</h5><p></p>
<p>为了更好地支持异步应用程序及服务器，中间件组件<strong>一定</strong>不能阻塞迭代，该迭代等待从应用程序的可迭代对象（iterable）中返回多个值。如果中间件需要从应用程序中累积更多的数据才能够生成一个输出，那么它<strong>必须</strong>生成（yield）一个空字符串。</p>
<p>让我们换一种方式来表述这个要求，每一次当下层的应用程序生成了一个值，中间件组件都<strong>必须至少生成一个值</strong>。如果中间件什么值都生成不了，那么它也必须至少生成一个空字符串。</p>
<p>这个要求确保了异步的服务器和应用程序能同谋合作，在同时运行给定数量的应用程序实例时，可以减少所需要的线程数量。</p>
<p>同时也需要注意的是，这样的要求也意味着一旦处于下层的应用程序返回了一个可迭代对象（iterable），中间件就必须尽快地返回一个（iterable）。另外，中间件也不被允许利用 <code>write()</code> 可调用对象（callable）来传输由下层应用程序生成的数据。中间件仅可以使用它父级服务器的 <code>write()</code> 可调用对象（callable）来传送由下层应用程序利用中间件提供的 <code>write()</code> 可调用对象（callable）发送来的数据。</p>
<p><a name="write"></a></p>
<h5 id="可调用-write"><a href="#可调用-write" class="headerlink" title="可调用 write()"></a>可调用 write()</h5><p></p>
<p>一些现有框架的 APIs 与 WSGI 的一个不同处理方式是它们支持无缓存的输出，特别需要指出的是，它们提供一个 <code>write</code> 函数或方法来写一个无缓冲的块或数据，或者它们提供一个缓冲的 <code>write</code> 函数和一个『刷新』（<code>flush</code>）机制来刷新缓冲。  </p>
<p>不幸的是，就 WSGI 这样『可迭代』的应用程序返回值来说，除非使用多线程或其他的机制，否则这样的 APIs 并没有办法实现。</p>
<p>因此为了允许这些框架继续使用这些必要的 APIs，WSGI 中包含了一个特殊的 <code>write()</code> 调用，它由 <code>start_response</code> 可调用对象返回。    </p>
<p>如果有办法避免的话，新的 WSGI 应用程序和框架不应该使用 <code>write()</code> 调用。严格说来，这个 <code>write()</code> 调用是用来支持必要的流 APIs 的。一般来说，应用程序应该通过返回的可迭代对象（iterable）来生成输出，因为这样可以使得 web 服务器在同一个 Python 线程中不同任务之间的交互变得可能，整体上来讲是为服务器提供了更好的吞吐量。</p>
<p>这个 <code>write()</code> 调用是由 <code>start_response</code> 可调用对象返回的，它接受一个唯一的参数：一个将作为部分 HTTP 响应体而被写入的字符串，它被看作是已经被迭代生成后的结果。换句话说，在 <code>writer()</code> 返回前，它必须保证传入的字符串要么已经完全发送给客户端，要么已经在应用程序继续处理的过程当中被缓存用做传输了。  </p>
<p><a name="unicode"></a></p>
<h4 id="Unicode-问题"><a href="#Unicode-问题" class="headerlink" title="Unicode 问题"></a>Unicode 问题</h4><p></p>
<p>HTTP 本身并不对 Unicode 提供直接支持，同样，我们这份接口也不支持 Unicode。所有的编码/解码工作都应当由应用程序端来处理；所有传给服务器或从服务器传出的字符串都必须是 Python 标准的字节字符串而不能是 Unicode 对象。倘若在被要求使用字符串对象的地方使用 Unicode 对象，则会产生不可预料的结果。</p>
<p>也要注意，作为状态或响应头传给 <code>start_response()</code> 方法的字符串在编码方面都<strong>必须</strong>遵循 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 规范。也就是说，它们必须使用 ISO-8859-1 字符集，或者使用 <a href="http://www.faqs.org/rfcs/rfc2047.html" target="_blank" rel="external">RFC 2047 </a>MIME编码。</p>
<p>在 Python 平台上，str 或者 StringType 类型实际上是基于 Unicode的（如jython，ironPython，python 3000，等等），本规范中提到的所有的『字符串』都限制在 ISO-8859-1 编码规范中可表示的代码点（<em>code points，包括\u0000-\u00FF</em>）。如果应用程序提供的字符串包含任何其它的 Unicode 字符或代码点，将有可能会发生严重错误。同样地，服务器和网关也<strong>不能</strong>向应用程序提供任何 Unicode 字符。</p>
<p>再次声明，本规范中提到的所有的字符串都<strong>必须</strong>是 str 类型或 StringType 类型，不能是 unicode 或 UnicodeType 类型。并且，针对本规范中所提到的『字符串』这个词，就算是一些平台允许 str/StringType 对象超过 8 bits 字符，也仅仅是该『字符串』的低位的 8 bits 会被用到。</p>
<p><a name="error_handle"></a></p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p></p>
<p>一般来说，应用程序<strong>应当</strong>自己负责捕获自己的内部错误，并且负责向浏览器输出有用的信息。（由应用程序自己来决定哪些是『有用的信息』）</p>
<p>然而，要显示这样的一条信息，并不是说应用程序真的向浏览器发送了数据，真这样做的话有损坏响应体的风险。因此，WSGI 提供了一种机制，要么允许应用程序发送它自己的错误信息，要么就通过使用传递给 <code>start_response</code> 的 <code>exc_info</code> 参数，自动地终止应用程序。这里有个如何使用它的例子。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># 这里是常规的应用程序代码</span></div><div class="line">    status = <span class="string">"200 Froody"</span></div><div class="line">    response_headers = [(<span class="string">"content-type"</span>, <span class="string">"text/plain"</span>)]</div><div class="line">    start_response(status, response_headers)</div><div class="line">    <span class="keyword">return</span> [<span class="string">"正常的程序体（normal body）放这里"</span>]</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="comment"># 在这个简陋的『except:』之前，XXX 应该在一个单独的 handler 里捕捉运行时异常，</span></div><div class="line">    <span class="comment"># 譬如 MemoryError，KeyboardInterrupt 这些...</span></div><div class="line">    status = <span class="string">"500 Oops"</span></div><div class="line">    response_headers = [(<span class="string">"content-type"</span>, <span class="string">"text/plain"</span>)]</div><div class="line">    start_response(status, response_headers, sys.exc_info())</div><div class="line">    <span class="keyword">return</span> [<span class="string">"错误的程序体（error body）放在这里"</span>]</div></pre></td></tr></table></figure>
<p>当有异常发生时，如果输出还没有被写入，则对 <code>start_response</code> 的调用将正常返回，然后应用程序会返回一个错误信息体发送至浏览器。然而如果有部分输出已经被发送到浏览器了，那么 <code>start_response</code> 将会重新抛出预备好的异常。这个异常不应当会被应用程序捕获，因此应用程序它会异常终止。服务器/网关会捕获这个（严重）异常并终止响应。  </p>
<p>服务器应当捕获任何迫使应用程序或应用程序迭代返回值终止的异常，并记录日志。如果应用程序出错的时候已经有一部分响应被写入到浏览器了，则服务器或网关可以尝试添加一个错误消息给到输出，当然前提是已经发送了的头信息里有指示一个 <code>text/* content</code> 类型让服务器就知道应该如何干净地做修改。</p>
<p>一些中间件可能会希望提供额外的异常处理服务，或者拦截并替换应用程序的出错信息。在这种情况下，中间件可以选择不重新抛出提供给 <code>start_response</code> 的 <code>exc_info</code>，转而换作是抛出中间件自己专有的异常，或者也可以在存储了所提供的参数之后简单地返回，不包含任何异常。这将会导致应用程序返回它自己的错误信息体可迭代对象（iterable）（或调用 <code>write()</code>  ），然后让中间件来捕获并修改错误输出。以上这些只有在应用程序的开发者们做到下面这些时才可有作用：  </p>
<ol>
<li>每一次当开始一个错误响应的时候，都提供 <code>exc_info</code>。  </li>
<li>当 <code>exc_info</code> 已经提供了的情况下，不要去捕获由 <code>start_response</code> 产生的异常。 </li>
</ol>
<p><a name="HTTP1.1"></a></p>
<h4 id="HTTP-1-1-Expect-Continue机制"><a href="#HTTP-1-1-Expect-Continue机制" class="headerlink" title="HTTP 1.1 Expect/Continue机制"></a><code>HTTP 1.1 Expect/Continue</code>机制</h4><p></p>
<p>那些实现了 HTTP1.1 的服务器/网关，<strong>必须</strong>提供对 HTTP1.1 中『Expect/Continue』机制的透明支持，这可以通过以下几种方式来实现： </p>
<ol>
<li>对含有 <code>Expect: 100-continue</code> 的那些带有 <code>100 Continue</code> 响应的请求做出回应，并正常处理。</li>
<li>正常处理请求，但是额外提供给应用程序一个<code>wsgi.input</code>流，如果应用程序第一次尝试从输入流中读取的时候就发送一个『100 Continue』响应。这个读取请求必须一直保持阻塞状态直到客户端响应请求。  </li>
<li>一直等待，直到客户端确认服务器不支持 <code>expect/continue</code> 特性，然后客户端自己发来请求体。（这个方法较次，不是很推荐。）  </li>
</ol>
<p>注意，以上这些行为的限制不适用于 HTTP 1.0 请求，也不适用于那些往应用程序对象发送的请求。更多关于 HTTP 1.1 Except/Continue 的信息，请参阅 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 的8.2.3章节和10.1.1章节。</p>
<p><a name="HTTP_other"></a></p>
<h4 id="HTTP-的其他特性"><a href="#HTTP-的其他特性" class="headerlink" title="HTTP 的其他特性"></a>HTTP 的其他特性</h4><p></p>
<p>通常来说，服务器和网关应当『尽少干涉』，应当让应用程序对它们自己的输出有100%的控制权。服务器/网关只做一些小的改动并且这些小改动不会影响到应用程序响应的语义（semantics ）。应用程序的开发者总是有可能通过添加中间件来额外提供一些特性的，所以服务器/网关的开发者在实现服务器/网关的时候可以适当偏保守些。在某种意义上说，一个服务器应当将自己看作是一个HTTP『网关服务器（gateway server）』，应用程序则应当将自己看作是一个HTTP 『源服务器（origin server）』（关于这些术语的定义，请参照 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 的1.3章节）</p>
<p>然而，由于 WSGI 服务器和应用程序并不是通过 HTTP 通信的，<a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 中提到的『逐跳路由（hop-by-hop）』并没有应用到 WSGI 内部通信中。因此，WSGI 应用程序一定不能生成任何『逐跳路由（hop-by-hop）』头信息<a name="id4"><a href="#id9">[4]</a></a>，试图使用 HTTP 中要求它们生成这样的报头的特性，或者依赖任何传入的『逐跳路由（hop-by-hop）』 <code>environ</code> 字典中报头。WSGI 服务器必须自己处理所有已经支持的『逐跳路由（hop-by-hop）』头信息，比如为每一个到达的信息做传输解码，如果有的话，解码也要包括那些分块编码（chunked-encoding）的。</p>
<p>如果将这些原则应用到各种各样的 HTTP 特性中去，应该很容易得知：服务器可以通过 <code>If-None-Match</code> 及 <code>If-Modified-Since</code> 请求头，<code>Last-Modified</code> 及 <code>ETag</code> 响应头等方式来处理缓存验证。然而，这并不是必须的，如果应用程序自身支持的话，则应用程序应当自己负责处理缓存验证，因为服务器/网关就没有说必须要做这样的验证。</p>
<p>同样地，服务器可能会对一个应用程序的响应做重编码或传输编码，不过，应用程序应当对自己发送的内容做适当的编码并且不能做传输编码。如果客户端请求需要，则服务器可能以字节范围（byte ranges）的方式传送应用程序的响应，应用程序并没有对字节范围（byte ranges）提供原生支持。再次申明，如果有需要，应用程序则应当自己执行此功能。</p>
<p>注意，这些对应用程序的限制不是说要求每一个应用程序都重新实现一次所有的 HTTP 特性；中间件可以实现许多 HTTP 特性的全部或者一部分，这样便可以让服务器和应用程序作者从一遍又一遍实现这些特性的痛苦中解放出来。 </p>
<p><a name="thread"></a></p>
<h4 id="线程支持"><a href="#线程支持" class="headerlink" title="线程支持"></a>线程支持</h4><p></p>
<p>除非本身不支持，否则支不支持线程也是取决于服务器自己的。服务器虽然可以同时并行处理多个请求，但也应当提供额外的选择让应用程序可以以单线程的方式运行，这样一来 ，一些不是线程安全的应用程序或框架就可以依旧在这些服务器上运行。</p>
<p><a name="implementandapplication"></a></p>
<h3 id="具体实现-应用程序"><a href="#具体实现-应用程序" class="headerlink" title="具体实现/应用程序"></a>具体实现/应用程序</h3><p></p>
<p><a name="server_api"></a></p>
<h4 id="服务器扩展API"><a href="#服务器扩展API" class="headerlink" title="服务器扩展API"></a>服务器扩展API</h4><p></p>
<p>一些服务器的作者可能希望暴露更多高级的API，让应用程序和框架的作者能用来做更特别的功能。例如，一个基于 <code>mod_python</code> 的网关可能就希望暴露 Apache 部分 API 作为 WSGI 的扩展。</p>
<p>在最简单的情况下，这只需要定义一个 <code>environ</code> 变量，其它的什么都不需要了，比如 <code>mod_python.some_api</code> 。但是，更多情况下，那些可能出现的中间件会就使情况变得复杂的多。比如，一个 API，它提供了访问 <code>environ</code> 变量中出现的同一个 HTTP 报头的功能，如果 <code>environ</code> 变量被中间件修改，则它很可能会返回不一样的值。</p>
<p>通常情况下，任何重复、取代或者绕过部分 WSGI 功能的扩展 API 都会有与中间件组件不兼容的风险。服务器/网关开发者不能寄希望于没人使用中间件，因为有一些框架的作者们明确打算（重新）组织他们的框架，使之几乎完全就像各种中间件一样工作。</p>
<p>所以，为了提供最大的兼容性，提供了扩展 API 来取代部分 WSGI 功能的服务器/网关，必须设计这些 API 以便它们被部分替换过的 API 调用。例如：一个允许访问 HTTP 请求头的扩展 API 需必须要求应用程序传输当前的 <code>environ</code>，以便服务器/网关可以验证那些能被 API 访问的 HTTP 头，验证它们没有被中间件修改过。如果该扩展的 API 不能保证它总是就HTTP报头内容同 <code>environ</code> 达成协议，它就必须拒绝向应用程序提供服务。例如，通过抛出一个错误，返回 None 来代替头信息集合，或者其它任何适合该 API 的东西。</p>
<p>同样地，如果扩展的 API 额外提供了一种方法来写响应数据或头信息，它应当要求 <code>start_response</code> 这个可调用对象在应用程序能获得的扩展的服务之前被传入。如果传入的对象和最开始服务器/网关提供给应用程序的不一样，则它就不能保证正确运转并且必须拒绝给应用程序提供扩展的服务。</p>
<p>这些指南同样适用于中间件，中间件添加类似解析过的 cookies 信息，表单变量，会话 sessions，或者类似 <code>evniron</code>。特别地，这样的中间件提供的这些特性应当像操作 <code>environ</code> 的函数那样，而不仅仅是简单地往 <code>evniron</code> 里面填充值。这样有助于保证来自信息是从 <code>evniron</code> 里计算得来的，在所有中间件完成每一个 URL重写 或对 <code>evniron</code> 做的其它修改之后。</p>
<p>服务器/网关和中间件的开发者们遵守这些『安全扩展』规则是非常重要的，否则以后就可能出现中间件的开发者们为了确保应用程序使用他们扩展的中间件时不被绕过， 而不得不从 <code>environ</code> 中删除一些或者全部的扩展 API 这样的事情。</p>
<p><a name="config"></a></p>
<h4 id="应用程序配置"><a href="#应用程序配置" class="headerlink" title="应用程序配置"></a>应用程序配置</h4><p></p>
<p>这份规范没有定义一个服务器如何选择/获得一个应用程序来调用。因为这和其他一些配置选项一样都是高度取决于服务器的。我们期望那些服务器/网关的作者们能关心并且负责将这些事情文档化：比如如何配置服务器来执行一个特定的应用程序对象，以及需要带什么样的参数（如线程的选项）。</p>
<p>另一方面，Web 框架的作者应当关心这些事情并将它们文档化：比如应该怎样创建一个包装了框架功能的应用程序对象。而已经选定了服务器和应用程序框架的用户，必须将这两者连接起来。然而，现在由于 Web 框架和服务器有了两者之间共同的接口，使得这一切变成了一个机械式的问题，而不再是为了将新的应用程序和服务器配对组合的重大工程了。</p>
<p>最后，一些应用程序，框架，和中间件可能希望使用 <code>evniron</code> 字典来接受一些简单的字符串配置选项。服务器和网关<strong>应当</strong>通过允许应用程序部署者向 <code>evniron</code> 字典里指定特殊的名-值对（name-value pairs）来支持这些。最简单的例子是，由于部署者原则上可以配置这些外部的信息到服务器上，或者在 CGI 的情况下它们可能是通过服务器的配置文件来设置。所以，只从 <code>os.environ</code> 中复制操作系统提供的所有环境变量到<code>environ</code>字典中就可以了。</p>
<p>应用程序本身<strong>应该</strong>尽量保持所需要的变量个数最少，因为并不是所有的服务器都支持简单地配置它们。当然，即使在最槽糕的情况下，部署一个应用程序的人还可以通过创建一个脚本来提供一些必要的选项值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> the_app <span class="keyword">import</span> application</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_app</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    environ[<span class="string">'the_app.configval1'</span>] = <span class="string">'something'</span></div><div class="line">    <span class="keyword">return</span> application(environ, start_response)</div></pre></td></tr></table></figure>
<p>但是，大多数现有的应用程序和框架很大可能只需用到 <code>environ</code> 里面的唯一一个配置值，用来指明它们的应用程序或框架特有的配置文件位置。（当然，应用程序应当缓存这些配置，以避免每次调用都重复读取。）</p>
<p><a name="URL"></a></p>
<h4 id="URL-的构建"><a href="#URL-的构建" class="headerlink" title="URL 的构建"></a>URL 的构建</h4><p></p>
<p>如果应用程序希望重建一个请求的完整URL，则可以使用下面的算法，该算法由 lan Bicking 提供：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</div><div class="line">url = environ[<span class="string">'wsgi.url_scheme'</span>]+<span class="string">'://'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> environ.get(<span class="string">'HTTP_HOST'</span>):</div><div class="line">    url += environ[<span class="string">'HTTP_HOST'</span>]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    url += environ[<span class="string">'SERVER_NAME'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> environ[<span class="string">'wsgi.url_scheme'</span>] == <span class="string">'https'</span>:</div><div class="line">        <span class="keyword">if</span> environ[<span class="string">'SERVER_PORT'</span>] != <span class="string">'443'</span>:</div><div class="line">           url += <span class="string">':'</span> + environ[<span class="string">'SERVER_PORT'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> environ[<span class="string">'SERVER_PORT'</span>] != <span class="string">'80'</span>:</div><div class="line">           url += <span class="string">':'</span> + environ[<span class="string">'SERVER_PORT'</span>]</div><div class="line"></div><div class="line">url += quote(environ.get(<span class="string">'SCRIPT_NAME'</span>, <span class="string">''</span>))</div><div class="line">url += quote(environ.get(<span class="string">'PATH_INFO'</span>, <span class="string">''</span>))</div><div class="line"><span class="keyword">if</span> environ.get(<span class="string">'QUERY_STRING'</span>):</div><div class="line">    url += <span class="string">'?'</span> + environ[<span class="string">'QUERY_STRING'</span>]</div></pre></td></tr></table></figure>
<p>注意，通过这种方式重建出来的 URL 可能跟客户端真实发过来的 URI 有些许差别。举个例子，服务器的重写规则有可能会对客户端发来的最初请求的 URL 做修改，以便让它看起来更规范。</p>
<p><a name="Python2.2"></a></p>
<h4 id="对-Python2-2-之前的版本的支持"><a href="#对-Python2-2-之前的版本的支持" class="headerlink" title="对 Python2.2 之前的版本的支持"></a>对 Python2.2 之前的版本的支持</h4><p></p>
<p>有些服务器，网关或者应用程序可能希望对 Python2.2 之前的版本提供支持。这对于目标平台是 Jython 来说更是如此，因为在我写这篇文档的时候，还没有一个生产版本的 Jython 2.2。</p>
<p>对于服务器和网关来说，这是相当容易做到的：准备使用 Python 2.2 之前的版本的服务器和网关，只需要简单地限定它们自己只使用标准的『for』来循环迭代应用程序返回来的所有可迭代对象（iterable）即可。这是能在代码级别确保 2.2 之前的版本的迭代器协议(后续会讲)跟『现在的』迭代器协议（参照 <a href="https://www.python.org/dev/peps/pep-0234/" target="_blank" rel="external">PEP234</a> ）兼容的唯一方法。</p>
<p>（需要注意的是，这个技巧当然只针对那些由 Python 写的服务器，网关，或者中间件。至于如何正确地在其他语言写的服务器中使用迭代器协议则不在我们这份 PEP 的讨论范围之内。）</p>
<p>不过，对于应用程序这边来说，要提供对 Python2.2 之前的版本的支持则会稍微复杂些：</p>
<ul>
<li><p>由于 Python 2.2 之前，文件并不是可迭代的，故你不能返回一个文件对象并期望它能像一个可迭代对象那样工作。（总体来说，你也不能这么做，因为大部分情况下这样做的表现很糟糕）。可以使用 <code>wsgi.file_wrapper</code> 或者一个应用程序特有的文件包装类。（请参考 <a href="#optional">可选的平台相关的文件处理</a> 章节获取更多关于 <code>wsgi.file_wrapper</code> 的信息，该章节有一个怎么把一个文件包装成一个可迭代对象的例子。）</p>
</li>
<li><p>如果你想返回一个定制加工过的可迭代对象，那么它必须实现 2.2 版本之前的迭代器协议。也就是说，提供一个 <code>__getitem__</code> 方法来接收一个整形的键值，然后在所有数据都取完的时候抛出一个 <code>IndexError</code> 异常。（注意，直接使用内置的序列类型也是可行的，因为它也实现了这个迭代器协议。)</p>
</li>
</ul>
<p>最后，如果中间件也希望对 Python2.2 之前的版本提供支持，迭代应用程序返回的所有值或者由它自己返回一个可迭代对象（又或者是两者都有），那么这些中间件必须遵循以上提到的这些建议。</p>
<p>（另外，为了支持 Python2.2 之前的版本，毫无疑问，任何服务器，网关，应用程序，或者中间件必须只能使用该版本有的语言特性，比如用1和0，而不是 True 和 False，诸如此类。)</p>
<p><a name="optional"></a></p>
<h4 id="可选的平台相关的文件处理"><a href="#可选的平台相关的文件处理" class="headerlink" title="可选的平台相关的文件处理"></a>可选的平台相关的文件处理</h4><p></p>
<p>有些操作环境提供了特殊的高性能文件传输机制，比如 Unix 下的 <code>sendfile()</code> 方法。服务器和网关可以通过 <code>environ</code> 变量中的 <code>wsgi.file_wrapper</code> 这个选项来使用这个机制。应用程序可以使用这样的『文件包装（file wrapper）』来将一个文件或者类文件对象（file-like object ）转换为一个可迭代对象然后返回它。例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="string">'wsgi.file_wrapper'</span> <span class="keyword">in</span> environ:</div><div class="line">    <span class="keyword">return</span> environ[<span class="string">'wsgi.file_wrapper'</span>](filelike, block_size)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">return</span> iter(<span class="keyword">lambda</span>: filelike.read(block_size), <span class="string">''</span>)</div></pre></td></tr></table></figure>
<p>如果一个服务器或网关有提供 <code>wsgi.file_wrapper</code> 选项，则它必须是个可调用对象（callable），并且这个可调用者接受一个必要的位置参数，和一个可选的位置参数。第一个参数是将要发送的类文件对象，第二个参数是可选的，表示分块大小（block size）的建议（这个服务器/网关无需使用）。这个可调用者必须返回一个可迭代的对象（iterable object），并且在服务器/网关真正从应用程序那里接收到了一个可迭代者作为返回值之前，不能执行任何的数据传送（否则会阻碍中间件解析或覆盖响应数据（response data））。</p>
<p>至于那个由应用程序提供的被当作是类文件的对象，它则必须拥有一个 <code>read()</code> 方法并接受一个可选的 size 参数。它可能还需要有一个 <code>close()</code> 方法，如果有，那么由 <code>wsgi.file_wrapper</code> 返回的可迭代对象它必须有一个 <code>close()</code> 方法可以调用最初的类文件对象中的 <code>close()</code> 方法。如果这个『类文件』对象还拥有任何与Python内置的文件对象的属性或方法名相同的方法或属性（例如 <code>fileno()</code> ），那么 <code>wsgi.file_warpper</code> 可能会假设这些方法或属性跟 Python 内置的文件对象的语义（semantics）是相同的。</p>
<p>在真实的实现中，任何平台相关的的文件处理都必须发生在应用程序返回之后，接着服务器/网关会去检查一个包装对象（wrapper object）是否有返回。（再次声明，由于存在中间件，错误处理等等类似的东西，所以并不保证任何生成的包装（wrapper）会被真正地使用到。）</p>
<p>除了处理 <code>close()</code> 方法，从语义上讲，应用程序返回一个包装的文件（file wrapper ）应当看起来就像是应用程序返回了一个可迭代者 <code>iter(filelike.read, &#39;&#39;)</code> 一样。换句话说，当传输开始的时候，应当从文件的当前位置开始传输，并且继续直到最后完成。</p>
<p>当然，平台相关的文件传输 API 通常不接受随意的类文件对象，所以，一个 <code>wsgi.file_wrapper</code> 为了判断类文件对象是否适用于支持的平台相关的 API，不得不对提供的对象做一些类似 <code>fileno()</code>（类Unix 平台下）或者是 <code>java.nio.FileChannel</code>（Jython下）的自省检查。</p>
<p>注意：即使对象不适用与特定的平台 API，<code>wsgi.file_wrapper</code> 必须仍旧返回一个包装了的 <code>read()</code> 和 <code>close()</code> 的迭代，因此应用程序使用这文件包装器便可以在不同平台间移植。这里有个简单的平台无关的文件包装类，适应于旧的（2.2之前）和新的 Python，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileWrapper</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filelike, blksize=<span class="number">8192</span>)</span>:</span></div><div class="line">        self.filelike = filelike</div><div class="line">        self.blksize = blksize</div><div class="line">        <span class="keyword">if</span> hasattr(filelike, <span class="string">'close'</span>):</div><div class="line">            self.close = filelike.close</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">        data = self.filelike.read(self.blksize)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            <span class="keyword">return</span> data</div><div class="line">        <span class="keyword">raise</span> IndexError</div></pre></td></tr></table></figure>
<p>这里是一段来自服务器/网关的小程序，它提供了访问一个特定平台的 API 的办法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">environ[<span class="string">'wsgi.file_wrapper'</span>] = FileWrapper</div><div class="line">result = application(environ, start_response)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">if</span> isinstance(result, FileWrapper):</div><div class="line">        <span class="comment"># 检查 result.filelike 是否为可用的 w/platform-specific API，</span></div><div class="line">        <span class="comment"># 如果是，则使用该API来传送结果。</span></div><div class="line">        <span class="comment"># 如果不是，则按正常情况循环处理可迭代者(iterable)。</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> result:</div><div class="line">        <span class="comment"># etc.</span></div><div class="line"></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="keyword">if</span> hasattr(result, <span class="string">'close'</span>):</div><div class="line">        result.close()</div></pre></td></tr></table></figure>
<p><a name="QA"></a></p>
<h3 id="问题和回答"><a href="#问题和回答" class="headerlink" title="问题和回答"></a>问题和回答</h3><p></p>
<ol>
<li><p>为什么 <code>environ</code> 必须是字典？用子类（subclass）不行吗？<br>用字典的原因是为了最大化地满足在服务器之间的移植性。还有另一种选择就是定义一些字典方法的子集，并以字典的方法作为标准的便捷接口。然而事实上，大多数的服务器可能只需要找到一个合适的字典就足够它们用了，并且框架的作者们往往期待完整可用的字典特性，因为多半情况下是这样的。不过问题是如果有一些服务器选择不用字典，那么尽管这类服务器也『符合』规范，还是会出现互用性的问题。因此强制使用字典的话，就简化了这份规范并且并确保了互用性。<br>注意，以上这些并不妨碍服务器或框架的开发者们向 <code>environ</code> 字典里加入自定义的变量来提供特殊的服务。事实上我们鼓励使用这种方式来提供任意的增值服务。</p>
</li>
<li><p>为什么你既可以调用 <code>write()</code> 又可以生成（yield）字符串/返回一个可迭代对象（iterable）？我们难道不应该只选择一种做法吗？<br>如果我们仅仅使用迭代的做法，那么现存的框架将遭受『推送（push）』可用性的折磨。但是，如果我们只支持通过 <code>write()</code> 推送，那么服务器在传输大文件的时候性能将恶化（如果一个工作线程（worker）没有将所有的输出都发送完成，那么它将无法进行下一个新的请求）。因此，我们做这样的妥协，好处是允许应用程序支持这两种方法，视情况而定，并且比起单纯的 push-only 的方式来说，只会给那些服务器的实现者们增加一点点负担而已。</p>
</li>
<li><p><code>close()</code> 方法是拿来做什么的？<br>在应用程序执行期间，当写动作（writes）完成之后，应用程序可以通过一个 <code>try/finally</code> 代码块来确保资源都被释放了。但是，如果应用程序返回一个可迭代对象（iterable），那么在迭代器被垃圾收集器收集之前任何资源都不会被释放。这里的 <code>close()</code> 惯用法允许应用程序在一个请求完成阶段释放重要资源，并且它向前兼容 <a href="https://www.python.org/dev/peps/pep-0325/" target="_blank" rel="external">PEP 325</a> 里关于迭代器的 <code>try/finally</code> 用法。</p>
</li>
<li><p>为什么这个接口要设计地这么初级？我希望添加更多酷炫的功能！（比如cookies， 会话（sessions）， 持久性（persistence），巴拉巴拉巴拉…)<br>记住，这并不是另一个 Python 的 web 框架，这仅仅是一个框架向 web 服务器通信的方法，反之亦然。如果你想拥有上面所说的这些特性，你需要选一个提供了这些特性的框架。并且如果这个框架让你创建一个 WSGI 应用程序，你将可以让它跑在大多数支持 WSGI 的服务器上面。同样的，一些 WSGI 服务器或许会通过在它们的 <code>environ</code> 字典里提供的对象来提供一些额外的服务；可以参阅这些服务器具体的文档了解详情。（当然，使用这类扩展的应用程序将面临着无法移植到其他基于 WSGI 的服务器上的风险。）</p>
</li>
<li><p>为什么使用 CGI 的变量而不是旧的 HTTP 头呢？并且为什么将它们和 WSGI 定义的变量混在一起呢？<br>许多现有的框架很大程度上是建立在 CGI 规范基础上的，并且现有的 web 服务器知道如何生成CGI变量。相比之下，其他表示u接收的 HTTP 信息的方式不仅分散破碎更缺乏市场支持。因此使用 CGI 『标准』看起来是个不错的办法，它能最大化发挥现有的实现。至于将它们同 WSGI 变量混合在一起，那是因为分它们的话会导致需要传入两个字典参数，显然这样做没什么好处。</p>
</li>
<li><p>那关于状态字符串，我们可不可以仅仅使用数字来代替，比如说传入『200』而不是『200 OK』？<br>这样做会使服务器/网关变得复杂化，因为那样的话服务器/网关就需要一个数值状态和相应信息的映射表。相比之下，让应用程序或框架的作者们在他们处理专门的响应代码时顺便输入一些额外的信息则显得要简单地多，并且事实上，经常是现有的框架已经有一个这样的映射表包含这些需要的信息了。总之，权衡之后，我们认为这个让应用程序/框架来负责要比服务器或网关来负责要更适合些。  </p>
</li>
<li>为什么 <code>wsgi.run_once</code> 不能保证 app 仅仅运行一次？<br>因为它仅仅只是建议应用程序应当『装备妥当但不需要经常性地运行（rig for infrequent running）』。这是因为应用程序框架在操作缓存、会话这些东西的时候有多种模式。在『多重运行（Multiple Run）』模式下，框架可能会预先加载缓存，并且在每个请求之后可能不会有写操作，比如写日志或会话数据到硬盘上等操作。在『单运行（single run）』模式下，框架没有预加载，避免了在每一个请求之后刷新（flush）所有必要的写操作。<br>然而，为了验证在后者的模式下应用程序或框架的正确操作，可能会必要地（或是权宜之计）不止一次调用它。因此，一个应用程序不应当仅仅因为设置了 <code>wsgi.run_once</code> 为 True 就认定它肯定不会被再次运行。  </li>
<li>在应用程序代码里使用 Feature X（字典（dictionaries），可调用对象（callables）等等）这些特性显得很丑陋，难道我们不可以使用对象来代替吗？<br>WSGI 中这些所有特性的实现选择都是为了从另外一个特性中解耦合考虑的；将这些特性重新组装到一个封装完好了的对象之中只会在一定程度上增大写服务器/网关的难度，并且在将来希望写一个中间件来只代替/修改一小部分整体功能的时候，难度会上升一个数量级。<br>本质上，中间件希望有个『职责连』的模式，凭借这个模式它可以在一些功能中被看成是一个『handler』，而同时允许其他功能保持不变。这样的要求，在接口想要保持可扩展性的前提下，用普通的 Python 对象是比较难实现的。例如，你必须使用 <code>__getattr__</code> 或者 <code>__getattribut__</code> 的重写（override）来确保这些扩展（比如未来的 WSGI 版本定义的变量）是被通过的。<br>这种类型的代码是出了名的难以保证100%正确的，并且极少人愿意自己重写。他们倾向于简单地复用别人的实现，可是一旦别人修改了实现的另一处地方时他们却未能及时更新自己的拷贝。<br>进一步讲，这种必需的样本代码将是纯碎的消费税，一种纯粹由中间件开发者们承担的开发者消费税，它的目的仅仅是为了能给应用程序框架开发者们支持稍微『漂亮』点儿的API而已。但是，应用框架开发者们往往只会更新一个框架来支持 WSGI，这只占他们所有框架的非常有限的部分。这很可能是他们的第一个（也可能是唯一一个）WSGI实现，因此他们很有可能去实现这份现成的规范。这样，花时间利用对象的属性或诸如此类的东西让这些 API 看起来『更漂亮』，对正在读此文的你们来说，可能就是浪费时间。<br>我们鼓励那些希望在直接的 Web 应用程序编程（相对于 web 框架开发）中有更漂亮的（或是改进的）WSGI 接口的人，鼓励他们去开发 APIs 或者框架来包装 WSGI，使 WSGI 对那些应用程序开发者们更加便利。这样的话，WSGI 就不仅可以在底层维持对服务器或中间件的便利性，同时对应用程序开发者来说又不会显得太『丑陋』。</li>
</ol>
<p><a name="in_discussion"></a></p>
<h3 id="尚在讨论中的提议"><a href="#尚在讨论中的提议" class="headerlink" title="尚在讨论中的提议"></a>尚在讨论中的提议</h3><p></p>
<p>下面这些项都还正在 Web-SIG 或其他地方讨论中，或者说还在 PEP 作者的计划清单中：</p>
<ul>
<li><code>wsgi.input</code> 是否改成一个迭代器而不是一个文件？这对于那些异步应用程序和分块编码（ chunked-encoding）的输入流是有帮助的。   </li>
<li>我们正在讨论可选的扩展，它们将用来暂停一个应用程序输出的迭代，直到输入可用或者发生一个回调事件。</li>
<li>添加一个章节，关于同步 vs 异步应用程序和服务器，相关的线程模型，以及这方面的问题/设计目标。</li>
</ul>
<p><a name="acknowledgements"></a></p>
<h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p></p>
<p>感谢那些 Web-SIG 邮件组里面的人，没有他们周全的反馈，将不可能有我这篇修正草案。我还要特别感谢：   </p>
<ul>
<li><code>mod_python</code> 的作者 Gregory “Grisha” Trubetskoy，是他毫不留情地指出了我的第一版草案没有提供任何比『普通旧版的CGI』有优势的地方，他的批评促进了我去寻找更好的方法。    </li>
<li>Ian Bicking，是他总是唠叨着要我适当地提供多线程（multithreading）及多进程（multiprocess）相关选项，对了，他还不断纠缠我让我提供一种机制可以让服务器向应用程序提供自定义的扩展数据。  </li>
<li>Tony Lownds，是他提出了 <code>start_response</code> 函数的概念，提供给它 status 和 headers 两个参数然后返回一个 write 函数。他的这个想法为我后来设计异常处理功能提供了灵感，尤其是在考虑到中间件重写(overrides)应用程序的错误信息这方面。  </li>
<li>Alan Kennedy, 一个有勇气去尝试实现 <code>WSGI-on-Jython</code>（在我的这份规范定稿之前）的人，他帮助我形成了 <a href="#Python2.2">对Python2.2之前的版本的支持</a> 这一章节，以及可选的 <code>wsgi.file_wrapper</code> 套件。  </li>
<li>Mark Nottingham，是他为这份规范的 HTTP RFC 发行规范做了大量的后期校对工作，特别针对 HTTP/1.1 特性，没有他的指出，我甚至不知道有这东西存在。  </li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><br><a name="id6"><br><a href="#id1">[1]</a>    The Python Wiki “Web Programming” topic ( <a href="http://www.python.org/cgi-bin/moinmoin/WebProgramming" target="_blank" rel="external">http://www.python.org/cgi-bin/moinmoin/WebProgramming</a> )<br></a><br><a name="id7"><br><a href="#id2">[2]</a>    The Common Gateway Interface Specification, v 1.1, 3rd Draft ( <a href="http://ken.coar.org/cgi/draft-coar-cgi-v11-03.txt" target="_blank" rel="external">http://ken.coar.org/cgi/draft-coar-cgi-v11-03.txt</a> )<br></a><br><a name="id8"><br><a href="#id3">[3]</a>    “Chunked Transfer Coding” – HTTP/1.1, section 3.6.1 ( <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1" target="_blank" rel="external">http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1</a> )<br></a><br><a name="id9"><br><a href="#id4">[4]</a>    “End-to-end and Hop-by-hop Headers” – HTTP/1.1, Section 13.5.1 ( <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.5.1" target="_blank" rel="external">http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.5.1</a> )<br></a><br><a name="id10"><br><a href="#id5">[5]</a>    mod_ssl Reference, “Environment Variables” ( <a href="http://www.modssl.org/docs/2.8/ssl_reference.html#ToC25" target="_blank" rel="external">http://www.modssl.org/docs/2.8/ssl_reference.html#ToC25</a> )<br></a></p>
<p><a name="copyright"></a></p>
<h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p><br>这篇文档属于公共领域。<br>原始文档: <a href="https://hg.python.org/peps/file/tip/pep-0333.txt" target="_blank" rel="external">https://hg.python.org/peps/file/tip/pep-0333.txt</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://www.python.org/dev/peps/pep-0333/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PEP 333 – Python Web Server Gateway Interface v1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一版发布时间：2017-01-30&lt;br&gt;最后更新时间：2017-02-03&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://knarfeh.github.io/tags/Web/"/>
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Redis 入门指北</title>
    <link href="http://knarfeh.github.io/2016/12/04/Redis%20%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97/"/>
    <id>http://knarfeh.github.io/2016/12/04/Redis 入门指北/</id>
    <published>2016-12-04T03:26:27.000Z</published>
    <updated>2018-08-18T04:17:16.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是团队内部分享 <a href="http://knarfeh.com/Introduction-to-Redis/#/" target="_blank" rel="external">Introduction-to-Redis</a> 之后的总结。不是完整的演讲稿，与演讲的内容有一定出入。</p>
<a id="more"></a>
<h2 id="Redis-是什么"><a href="#Redis-是什么" class="headerlink" title="Redis 是什么"></a><a href="https://zh.wikipedia.org/wiki/Redis" target="_blank" rel="external">Redis</a> 是什么</h2><p>Redis 最开始是 <a href="https://github.com/antirez" target="_blank" rel="external">Salvatore Sanfilippo</a> 个人开发的项目，09年开发完成，到现在也不过7年时间，目前已经是最流行的键值对存储数据库。Redis 的作者 antirez 对 Redis 的定义是：一种实现了 TCP 协议的，操作抽象数据类型的守护进程。</p>
<h2 id="为什么要学习，使用-Redis"><a href="#为什么要学习，使用-Redis" class="headerlink" title="为什么要学习，使用 Redis"></a>为什么要学习，使用 Redis</h2><p>Redis 作为一个开源、支持网络、基于内存、键值对存储的数据库，有以下特点 </p>
<ul>
<li>简单，稳定，却不失灵活</li>
<li>存储结构丰富，包括<ul>
<li>字符串类型</li>
<li>散列类型</li>
<li>列表类型</li>
<li>集合类型</li>
<li>有序集合类型</li>
</ul>
</li>
<li>基本只使用内存，可以高速读写</li>
</ul>
<p>更进一步的，我们也可以钻研一下 Redis 的源代码，甚至加入到这个项目来。Redis 正在持续的开发中，就在昨天，antriz 还在他的博客上发了一篇文章：<a href="http://antirez.com/news/110" target="_blank" rel="external">The first release candidate of Redis 4.0 is out</a>。就我个人来说，当我接触一个工具，我会学会怎么使用它，除此之外我还会想要知道它内部的原理。Redis 是一个很有意思的东西，这个项目时间不长，源代码也不多，而且文档丰富。代码很有价值，深入研读一下 redis 的源代码，造造轮子练习一下，当然是很好玩的，这里就不扩展了，之后有更多积累了再写写 Redis 实现的细节。  </p>
<h2 id="Redis-宣言"><a href="#Redis-宣言" class="headerlink" title="Redis 宣言"></a><a href="http://oldblog.antirez.com/post/redis-manifesto.html" target="_blank" rel="external">Redis 宣言</a></h2><p>正式学习前，先来了解一下 Redis 的『内核』吧，antriz 曾经在他的博客上写了几点<a href="http://oldblog.antirez.com/post/redis-manifesto.html" target="_blank" rel="external">关于 Redis 的原则</a>：</p>
<ul>
<li>Redis 是一种实现了 TCP 协议的，操作抽象数据类型的守护进程，本质上是 DSL(Domain Specific language)</li>
</ul>
<p>第一点谈到 Redis 定义的数据结构非常重要，不仅仅与 Redis 的数据类型相关联，还关系着整个系统的时间复杂度和空间复杂度。Redis 设计与实现的第一部分就是数据结构和对象，花了7章，分别从简单动态字符串，链表，字典，跳跃表，整数集合，压缩列表，对象来进行剖析。</p>
<ul>
<li><p>内存存储是第一位的。因为内存操作很快，保证了 Redis 的性能。Redis 会尝试其他的存储方式，实现持久化等，但主线剧情一定在内存上。</p>
</li>
<li><p>为最基本的 API 提供最基本的数据结构，Redis 会避免直接与 API 层接触。『Keep It Simple, Stupid』</p>
</li>
<li><p>代码像诗一样。我们乐于使用其他的库，但是在 Redis 这个小故事里，我们想尽可能地自己执笔。『Keep It Simple, Stupid』</p>
</li>
<li><p>我们讨厌复杂。设计一个系统的过程就是跟复杂做斗争的过程。一个 feature 最好在1000行以内，保持简单的方式是直接不去考虑这个 feature. 『Keep It Simple, Stupid』</p>
</li>
<li><p>有两种层次的 API，一种是为了分布式 Redis 而诞生的，一种是为了支持多键值而诞生的（更复杂）</p>
</li>
<li><p>把优化性能作为一种爱好</p>
</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>all data is in memory(data can be optionally stored on disk)</li>
<li>handles huge workloads easily</li>
<li>mostly O(1) behavior</li>
<li>ideal for write-heavy workloads</li>
<li>support for atomic operations</li>
<li>support for transactions</li>
<li>has pub/sub functionality</li>
<li>tons of client libraries for all major languages</li>
<li>single thread, uses aync. IO</li>
<li>internal scripting with LUA</li>
</ul>
<p>为什么那么多公司都在使用 Redis 呢，实际上和 redis 的功能类似的软件也不少，比如 Memcached，一句话来概括，因为 redis 简单而且强大，Redis 是单线程的模型，而 Memcached 支持多线程，所以对于多核的单例来说，Memecached 的性能会好一点，但是 Redis 的性能已经足够好了，在绝大多数情况下不会有性能瓶颈，除非是数据量太大，IO 会花费一些时间，如果出现瓶颈，一般来自机器内存或网络带宽，而不会来自 CPU。而 Redis 3.0 推出之后，Memcached 几乎所以的功能都成了 Redis 的子集，而且 Redis 自带了集群功能，虽然还不够成熟。基本上 Redis 的性能是非常好的，大多数操作的时间复杂度是常数，支持原子操作，支持事务，发布/订阅的功能，几乎所以流行的语言都有客户端，支持用 lua 做脚本。</p>
<p>Redis 与其他数据库的对比：</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/2016-12-18/redis_memcached_mysql.png" alt="compare"></p>
<h2 id="Redis-初体验"><a href="#Redis-初体验" class="headerlink" title="Redis 初体验"></a>Redis 初体验</h2><p>先简单地尝试一下 Redis</p>
<p>上面有谈到，Redis 有5种基本类型，字符串，列表，集合，散列，有序集合。Redis 可以存储键和5种不同数据类型之间的映射。最简单的，也最基本的是字符串：</p>
<p>Redis 中最基础的概念是键值对：你可以获得符合符合规则类型的键名列表，判断一个键是否存在，删除键，获得键值的数据类型等等</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>典型用例：</p>
<ol>
<li>增加，减少指定的整数</li>
<li>增加指定浮点数</li>
<li>向尾部追加值</li>
<li>获取字符串长度</li>
<li>同时获得/设置多个键值</li>
<li>位操作</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ redis-cli</div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> set hello <span class="string">"world"</span></div><div class="line">OK</div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> get hello</div><div class="line"><span class="string">"world"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> del hello</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> get hello</div><div class="line">(<span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>这是最简单也最常用的 key，value 的对应，你可以令一个 key 对应一个 value，通过 key 拿到 value 的值，删除这个 key-value，简单来说就是，set 可以设置存储在给定键中的值，get 可以获取给定键中的值，del 删除存储在给定键中的值，</p>
<p>当然你的 value 也可以是整数的形式。可以通过 mget 获得多个键的值。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">foo</span> <span class="selector-tag">bar</span></div><div class="line"><span class="selector-tag">OK</span></div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">getset</span> <span class="selector-tag">foo</span> <span class="selector-tag">baz</span></div><div class="line">"<span class="selector-tag">bar</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">foo</span></div><div class="line">"<span class="selector-tag">baz</span>"</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setnx</span> <span class="selector-tag">foo</span> <span class="selector-tag">bar</span></div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">setnx</span> <span class="selector-tag">foo</span> <span class="selector-tag">baz</span></div><div class="line">(<span class="selector-tag">integer</span>) 0</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">foo</span></div><div class="line">"<span class="selector-tag">bar</span>"</div></pre></td></tr></table></figure>
<p>我们有时候需要一些命令的组合，一般的组合命令在 redis 中已经有原生的实现了，可以直接用这些原子操作。比如 get 了一个值，set 一个新的值，你可以用 getset 方法；如果某个键不存在，才进行 set 操作(setnx 是 Set if Not eXists)</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>接下来我们讲一下列表，redis 支持链表的操作，这里有几个比较典型的命令，你可以在左右两端进行 push，pop 的操作，时间复杂度是O(n)</p>
<p>rpush, lrange, lindex, lpop<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">rpush </span><span class="built_in">list-key</span> <span class="string">item</span></div><div class="line">(<span class="string">integer)</span> 1</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">rpush </span><span class="built_in">list-key</span> <span class="string">item1</span></div><div class="line">(<span class="string">integer)</span> 2</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">rpush </span><span class="built_in">list-key</span> <span class="string">item2</span></div><div class="line">(<span class="string">integer)</span> 3</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">lrange </span><span class="built_in">list-key</span> 0 -1</div><div class="line">1) <span class="string">"item"</span></div><div class="line">2) <span class="string">"item1"</span></div><div class="line">3) <span class="string">"item2"</span></div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">lindex </span><span class="built_in">list-key</span> 1</div><div class="line"><span class="string">"item1"</span></div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">lpop </span><span class="built_in">list-key</span></div><div class="line"><span class="string">"item"</span></div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">lrange </span><span class="built_in">list-key</span> 0 -1</div><div class="line">1) <span class="string">"item1"</span></div><div class="line">2) <span class="string">"item2"</span></div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">RPOP </span><span class="built_in">list-key</span></div><div class="line"><span class="string">"item2"</span></div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">lrange </span><span class="built_in">list-key</span> 0 -1</div><div class="line">1) <span class="string">"item1"</span></div></pre></td></tr></table></figure></p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>然后是集合，Redis 的集合和列表都可以存储多个字符串，它们之间的不同在于，列表可以存储多个相同的字符串，而集合通过散列表来保证自己存储的每个字符串都是各不相同的。集合采用的是无序方式存储元素。sadd 可以给集合增加元素，smembers 可以获取包含所有元素的集合，通过 sismember 判断某个元素是不是某个集合里的，使用 srem 移除元素时，会返回被移除元素的数量。</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">sadd </span><span class="built_in">set-key</span> <span class="string">item</span></div><div class="line">(<span class="string">integer)</span> 1</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">sadd </span><span class="built_in">set-key</span> <span class="string">item1</span></div><div class="line">(<span class="string">integer)</span> 1</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">sadd </span><span class="built_in">set-key</span> <span class="string">item2</span></div><div class="line">(<span class="string">integer)</span> 1</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">sadd </span><span class="built_in">set-key</span> <span class="string">item</span></div><div class="line">(<span class="string">integer)</span> 0</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">smembers </span><span class="built_in">set-key</span></div><div class="line">1) <span class="string">"item"</span></div><div class="line">2) <span class="string">"item2"</span></div><div class="line">3) <span class="string">"item1"</span></div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">sismember </span><span class="built_in">set-key</span> <span class="string">item3</span></div><div class="line">(<span class="string">integer)</span> 0</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">sismember </span><span class="built_in">set-key</span> <span class="string">item</span></div><div class="line">(<span class="string">integer)</span> 1</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">srem </span><span class="built_in">set-key</span> <span class="string">item1</span></div><div class="line">(<span class="string">integer)</span> 1</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">srem </span><span class="built_in">set-key</span> <span class="string">item1</span></div><div class="line">(<span class="string">integer)</span> 0</div><div class="line"><span class="string">127.</span>0.0.<span class="string">1:6379&gt;</span> <span class="string">smembers </span><span class="built_in">set-key</span></div><div class="line">1) <span class="string">"item"</span></div><div class="line">2) <span class="string">"item2"</span></div></pre></td></tr></table></figure>
<h3 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h3><p>Redis 的散列可以存储多个键值对之间的映射。散列其实像是一个缩略版的 Redis，看起来也像是关系数据库中的行。</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hset hash-key<span class="built_in"> sub-key0 </span>value0</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; hset hash-key<span class="built_in"> sub-key1 </span>value1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; hset hash-key<span class="built_in"> sub-key2 </span>value2</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; hgetall hash-key</div><div class="line">1) <span class="string">"sub-key0"</span></div><div class="line">2) <span class="string">"value0"</span></div><div class="line">3) <span class="string">"sub-key1"</span></div><div class="line">4) <span class="string">"value1"</span></div><div class="line">5) <span class="string">"sub-key2"</span></div><div class="line">6) <span class="string">"value2"</span></div><div class="line">127.0.0.1:6379&gt; hdel hash-key<span class="built_in"> sub-key1</span></div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; hgetall hash-key</div><div class="line">1) <span class="string">"sub-key0"</span></div><div class="line">2) <span class="string">"value0"</span></div><div class="line">3) <span class="string">"sub-key2"</span></div><div class="line">4) <span class="string">"value2"</span></div></pre></td></tr></table></figure>
<h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><p>有序集合和散列有点像，都存储键值对，但是有序集合的键叫做成员（member），每个成员都是各不相同的，有序集合的值称为分值，分值必须为浮点数。注意，有序集合的键和值跟集合的键和值的位置是相反的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">zset-key</span> 728 <span class="selector-tag">member1</span></div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">zset-key</span> 729 <span class="selector-tag">member0</span></div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">zset-key</span> 729 <span class="selector-tag">member0</span></div><div class="line">(<span class="selector-tag">integer</span>) 0</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">zset-key</span> 730 <span class="selector-tag">member2</span></div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">zrange</span> <span class="selector-tag">zset-key</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span></div><div class="line">1) "<span class="selector-tag">member1</span>"</div><div class="line">2) "728"</div><div class="line">3) "<span class="selector-tag">member0</span>"</div><div class="line">4) "729"</div><div class="line">5) "<span class="selector-tag">member2</span>"</div><div class="line">6) "730"</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrangebyscore zset-key <span class="number">0</span> <span class="number">800</span> withscores</div><div class="line"><span class="number">1</span>) <span class="string">"member1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"728"</span></div><div class="line"><span class="number">3</span>) <span class="string">"member0"</span></div><div class="line"><span class="number">4</span>) <span class="string">"729"</span></div><div class="line"><span class="number">5</span>) <span class="string">"member2"</span></div><div class="line"><span class="number">6</span>) <span class="string">"730"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrangebyscore zset-key <span class="number">0</span> <span class="number">729</span> withscores</div><div class="line"><span class="number">1</span>) <span class="string">"member1"</span></div><div class="line"><span class="number">2</span>) <span class="string">"728"</span></div><div class="line"><span class="number">3</span>) <span class="string">"member0"</span></div><div class="line"><span class="number">4</span>) <span class="string">"729"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrem zset-key member1</div><div class="line">(integer) <span class="number">1</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrem zset-key member1</div><div class="line">(integer) <span class="number">0</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrange zset-key <span class="number">0</span> -<span class="number">1</span> withscores</div><div class="line"><span class="number">1</span>) <span class="string">"member0"</span></div><div class="line"><span class="number">2</span>) <span class="string">"729"</span></div><div class="line"><span class="number">3</span>) <span class="string">"member2"</span></div><div class="line"><span class="number">4</span>) <span class="string">"730"</span></div></pre></td></tr></table></figure>
<p>通过 zrangebyscore，指定分数的范围，就可以获得对应的有序集合。其他的操作和集合，散列的命令类似，这里就不多说了。了解了有序集合是什么，我们就能想到它能做什么了，比如像 hackernews，twitter 这样的页面，就可以用到。</p>
<h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><p>简单介绍了 redis 的5种数据类型，字符串，列表，集合，散列，有序集合，我们来说说更好玩的。</p>
<h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">expire</span> <span class="selector-tag">foo</span> 20</div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">foo</span></div><div class="line">(<span class="selector-tag">integer</span>) 18</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">foo</span></div><div class="line">(<span class="selector-tag">integer</span>) 10</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">foo</span></div><div class="line">(<span class="selector-tag">integer</span>) 7</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">foo</span></div><div class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-2</span></div></pre></td></tr></table></figure>
<p>我们在实际的开发中经常会遇到一些有时效的数据，比如限时的优惠活动、缓存、验证码等，这些数据可能过了一定时间就要删除。如果是用关系型数据库，需要一个额外的字段来记录到期的时间，定期检测过期的数据，在 Redis 中可以用 expire 来设置一个键的过期时间，到时间后 Redis 会自动删除</p>
<h3 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h3><p>发布</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> publish channel1.<span class="number">1</span> <span class="string">'hello'</span></div><div class="line">(integer) <span class="number">1</span></div></pre></td></tr></table></figure>
<p>订阅</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; subscribe channel1<span class="number">.1</span></div><div class="line"><span class="function"><span class="title">Reading</span></span> messages... (press Ctrl-C to quit)</div><div class="line"><span class="number">1</span>) <span class="string">"subscribe"</span></div><div class="line"><span class="number">2</span>) <span class="string">"channel1.1"</span></div><div class="line"><span class="number">3</span>) (<span class="keyword">integer</span>) <span class="number">1</span></div><div class="line"><span class="number">1</span>) <span class="string">"message"</span></div><div class="line"><span class="number">2</span>) <span class="string">"channel1.1"</span></div><div class="line"><span class="number">3</span>) <span class="string">"hello"</span></div></pre></td></tr></table></figure>
<p>Redis 提供了一组命令让开发者实现『发布/订阅』模式，订阅者可以订阅一个或多个频道（可以通过 pattern 进行订阅），发布者可以向指定的频道发送消息，所有订阅该频道的订阅者都会收到此消息。需要注意的是，这里发布的消息是不会持久化的。订阅的复杂度是：O(1)，发布消息的复杂度是 O(n)</p>
<h3 id="lua-脚本"><a href="#lua-脚本" class="headerlink" title="lua 脚本"></a>lua 脚本</h3><p>Redis 的脚本功能在2.6版推出，它允许开发者写 lua 脚本上传到 redis server 端执行，使用 lua 脚本的好处有：</p>
<ol>
<li>减少网络开销</li>
<li>原子操作</li>
<li>可以复用脚本</li>
</ol>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ cat random_list.lua</div><div class="line"><span class="comment">--[[</span></div><div class="line">Random lpush a list key-value</div><div class="line">KEYS[1]:key name</div><div class="line">ARGV[1]:ramdom seed value</div><div class="line">ARGV[2]:add element count</div><div class="line">--]]</div><div class="line"></div><div class="line"><span class="built_in">math</span>.randomseed(ARGV[<span class="number">1</span>]);</div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>, ARGV[<span class="number">2</span>], <span class="number">1</span> <span class="keyword">do</span></div><div class="line">    redis.call(<span class="string">"lpush"</span>, KEYS[<span class="number">1</span>], <span class="built_in">math</span>.random());</div><div class="line"><span class="keyword">end</span></div><div class="line">redis.log(redis.LOG_NOTICE, <span class="string">"lpush "</span> .. KEYS[<span class="number">1</span>]);</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">$ redis-cli <span class="comment">--eval random_list.lua r_list , 3 6</span></div></pre></td></tr></table></figure>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ redis-cli <span class="keyword">lrange</span> r_list <span class="number">0</span> <span class="number">-1</span></div><div class="line"><span class="number">1</span>) <span class="string">"0.43370221947957865"</span></div><div class="line"><span class="number">2</span>) <span class="string">"0.54186119723220416"</span></div><div class="line"><span class="number">3</span>) <span class="string">"0.26702763618297298"</span></div><div class="line"><span class="number">4</span>) <span class="string">"0.31170834336043723"</span></div><div class="line"><span class="number">5</span>) <span class="string">"0.86367337352767282"</span></div><div class="line"><span class="number">6</span>) <span class="string">"0.7832349621612742"</span></div></pre></td></tr></table></figure>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ul>
<li>RDB</li>
<li>AOF</li>
</ul>
<p>Redis 支持两种方式的持久化，一种是 RDB（Relational database） 方式，一种是 AOF(Append-only file) 方式。简单概括一下就是：RDB 是根据指定的规则『定时』将内存中的数据存储在硬盘上，AOF 是指每次执行完命令后，将命令本身记录下来。</p>
<h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>优点:</p>
<ul>
<li>compact, single-file, point-in-time</li>
<li>very good for disaster recovery</li>
<li>maximizes Redis performances, just fork a child</li>
<li>RDB allows faster restarts with big datasets compared to AOF</li>
</ul>
<p>缺点:</p>
<ul>
<li>is NOT good if you need to minimize the chance of data loss in case Redis stops working</li>
<li>Fork() can be time consuming if the dataset is big</li>
</ul>
<p>RDB 是一个非常紧凑的文件，它保存了 redis 在某个时间点上的数据集。这个时间点你是可以自己定的，比如每小时，每个月第一天，它非常适用于灾难恢复，父进程在保存 RDB 文件的时候，唯一需要做的是fork 出一个子进程，父进程不需要进行 IO 操作。在数据集比较大的情况下，RDB 的恢复速度比 AOF 的恢复速度要快，缺点是有可能丢数据，因为这是一个完全备份，而不是一个增量备份。 如果发生故障，那么你至少会丢几分钟的数据。还有一个缺点是，每次保存 RDB 的时候，Redis 都需要 fork 出一个进程，如果数据量比较大，CPU 时间比较紧张，fork 本身这个操作可能会比较费时，可能会导致暂时的不响应。</p>
<h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>优点:</p>
<ul>
<li>much more durable: you can have different fsync policies</li>
<li>AOF log is an append only log</li>
<li>automatically rewrite the AOF in background when it gets too big</li>
<li>AOF contains a log of all the operations one after the other in an easy to understand and parse format</li>
</ul>
<p>使用 AOF 你可以让数据持久化更灵活，比如 fsync 的策略，你可以每秒 sync，或者每次写入命令的时候 sync，默认是每秒 sync，这种配置下，redis 还是可以保持良好的性能，就算发生了宕机，最多丢一秒数据，AOF 文件是一个只进行追加操作的日志文件（append only log），如果磁盘满了，redis-check-aof 工具可以修复这种问题。AOF 文件体积过大时，可以自动在后台对 AOF 文件重写。重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合，因为是最小集合，所以容易被人读懂，容易被解析</p>
<p>缺点:</p>
<ul>
<li>usually bigger than the equivalent RDB files </li>
<li>AOF can be slower than RDB depending on the exact fsync policy</li>
<li>experienced rare bugs in specific commands </li>
</ul>
<p>缺点是，AOF 的体积一般要比 RDB 的体积大，如果是使用 fsync，使用 AOF 的性能一般要比 RDB 的性能差。还有一个缺点是，有可能出现比较严重的 bug，因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样，比如 BRPOPLPUSH 这种阻塞命令，曾经引起过这样的 bug，这种 bug 当然是比较少的，而 RDB 就基本不会有这样的 bug。</p>
<h4 id="AOF-还是-RDB？"><a href="#AOF-还是-RDB？" class="headerlink" title="AOF 还是 RDB？"></a>AOF 还是 RDB？</h4><p>antirez 的建议是两种持久化的功能都用，如果你可以忍受几分钟之内的数据丢失，你可以只使用 RDB 持久化，不推荐只使用 AOF 的方式，因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份，RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><ul>
<li>复制</li>
<li>哨兵</li>
<li>Redis 集群</li>
</ul>
<p>刚才我们谈到持久化功能，Redis 保证了即使在服务器重启的情况下也不会损失（或少量损失）数据，然而单点的情况还是没有改变，如果这台服务器出现了硬盘故障，就会导致数据丢失，为了避免单点故障，我们需要集群（广义集群，非特指 Redis 集群功能）的功能。</p>
<h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><ul>
<li>Monitoring</li>
<li>Notification</li>
<li>Automatic failover</li>
<li>Configuration provider</li>
</ul>
<p>哨兵是 Redis 在2.8版本推出的功能。主要包括四个方面：  </p>
<ol>
<li>监控，不断检查主服务器和从服务器是否运作正常  </li>
<li>提醒，当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。   </li>
<li>自动故障迁移， 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器。   </li>
<li>提供配置信息，哨兵可以用作客户端的服务发现，他可以高速客户端 master 的地址。Redis Sentinel  也是一个分布式的系统，可以单独起一个哨兵程序，也可以启动一个运行在 sentinel 模式下的 Redis 服务器。即使是使用哨兵的功能，这时的 redis 集群的每个数据库仍然存有集群中的所有数据，从而导致集群的总数据存储量受限于可用存储内存最小的数据库节点，因为 redis 中的所有数据都是基于内存的，所以这个问题会比较突出。 因此 Redis 在3.0版本正式推出了官方支持的集群模式</li>
</ol>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/redis-master-slave.jpg" alt="redis-master-slave"></p>
<p>Redis 提供了复制（replication）的功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上。 master 数据库可以进行读写操作，当写操作导致数据发生变化的时候，自动将数据同步给从数据库， slave 数据库一般是只读的。一个主数据库可以有多个从数据库，从数据库只能有一个主数据库。从数据库不仅可以接收主数据库的同步数据，自己也可以作为主数据库。需要特别注意的是：开启了复制功能，并且主数据库关闭持久化功能时，一定不要用 Supervisor 以及类似的进程工具自动重启主数据库，否则一旦进行了同步，所有的数据都会被清空。为了提高性能，一般从数据库会启用持久化，主数据库会禁用持久化，从数据库崩溃重启了，主数据库会把数据同步过来。主数据库崩溃了，如果是手工通过从数据库恢复，需要严格按照两个步骤进行:  </p>
<p>1 在从数据库中使用 slaveof no one 把从数据库提升为主数据库<br>2 启动崩溃的主数据库，用 slaveof 把主数据库变为主数据库的从数据库，数据就可以恢复回来。 所以说手工恢复是比较麻烦的，我们可以用 redis 提供的哨兵功能来实现这个过程。</p>
<h3 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h3><p>上面的复制模式，Redis 集群的每个数据库存有集群中的所有数据，集群的总数据存储量受限于可用存储内存最小的数据库节点，形成木桶效应。</p>
<p>以往的 redis 集群，我们可以通过客户端分片来解决，有多个数据库节点的时候，由客户端决定每个键交由哪个数据库节点存储。这样就实现了整个数据库分布在 N 个数据库节点中，每个节点只存放总数据量的1/N。这样你需要扩容的时候，得对数据做手工的迁移，为了保证数据的一致性，还有可能让集群暂时下线，相对比较复杂。客户端分片有很多缺点，维护成本高，增加，移除节点比较繁琐，而且维护相同的分片逻辑成本很大，比如系统中有一个 redis 集群，一套业务系统是 Python 写的，一套的 golang 写的，为了保证分片逻辑的一致性，分片逻辑在两套系统中都得实现，开发成本比较大。于是在 redis cluster 模式推出之前，有一些公司做了 redis 集群的代理模式，比较有名的是 twitter 的 Twemproxy：</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/twemproxy.jpg" alt="twemproxy"></p>
<p>Twemproxy 的优点是：  </p>
<ol>
<li>客户端像连接 Redis 实例一样连接 Twemproxy，不需要改任何的代码逻辑。   </li>
<li>支持无效 Redis 实例的自动删除。  </li>
<li>Twemproxy 与 Redis 实例保持连接，减少了客户端与Redis实例的连接数。   </li>
</ol>
<p>也有以下不足：  </p>
<ol>
<li>由于 Redis 客户端的每个请求都经过 Twemproxy 代理才能到达Redis服务器，这个过程中会产生性能损失，当然只有20%。  </li>
<li>没有友好的监控管理后台界面，不利于运维监控。  </li>
<li>最大的问题是 Twemproxy 无法平滑地增加 Redis 实例。对于运维人员来说，当因为业务需要增加 Redis 实例时工作量很大   </li>
</ol>
<p>但这是很长一段时间内最被广泛使用，稳定性最高的 redis 代理。Codis 可以解决 Twemproxy 的不足，可以平滑增加 redis 实例，这里我就不赘述了，目前没有太多研究，也没有什么经验。</p>
<p>Redis 推出了官方的集群功能，采用 P2P 的模式，完全去中心化。</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/redis-cluster-workflow.jpg" alt="redis-cluster-workflow"></p>
<p>Redis 的工作模式如上图，Redis 集群使用数据分片（sharding）而非一致性哈希（consistency hashing）来实现： 一个 Redis 集群包含 16384 个哈希槽（hash slot）， 数据库中的每个键都属于这 16384 个哈希槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。如果用户将新节点 D 添加到集群中， 那么集群只需要将节点 A 、B 、 C 中的某些槽移动到节点 D 就可以了。因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线。 我们这里假设1负责处理 0 号至 5500 号哈希槽，2负责处理 5501 号至 11000 号哈希槽，3负责处理 11001 号至 16384 号哈希槽。如果节点 2 下线了， 那么集群将无法正常运行， 因为集群找不到节点来处理 5501 号至 11000 号的哈希槽。另一方面， Redis 集群对节点使用了主从复制功能，我们可以给2号设置一个从节点，这种情况就跟 replication 的情况一样了，如果节点 2号的 master 和 slave 都下线，Redis 集群还是会停止工作。 </p>
<p>目前 Redis 3.0 的集群方案有以下两个问题：</p>
<ul>
<li><p>一个 Redis 实例具备了『数据存储』和『路由重定向』，完全去中心化的设计，部署是很简单，但很难对业务进行无痛升级，如果哪天 Redis 集群出了什么严重的 Bug，只能回滚整个 Redis 集群。</p>
</li>
<li><p>对协议进行了较大的修改，对应的 Redis 客户端也需要升级。</p>
</li>
</ul>
<h3 id="如何使用好-Redis"><a href="#如何使用好-Redis" class="headerlink" title="如何使用好 Redis"></a>如何使用好 Redis</h3><p>最后，抛砖引玉，说说我们可以怎么最大程度地利用好 Redis？</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/2016-12-13/lizi.jpg" alt="example"></p>
<h4 id="在首页列出最新的评论"><a href="#在首页列出最新的评论" class="headerlink" title="在首页列出最新的评论"></a>在首页列出最新的评论</h4><p>没有 Redis<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> foo <span class="keyword">WHERE</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">time</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>使用 Redis<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FUNCTION get_latest_comments(start,num_items):</div><div class="line">    id_list = redis.<span class="keyword">lrange</span>(<span class="string">"latest.comments"</span>,start,start+num_items<span class="number">-1</span>)</div><div class="line">    IF id_list.length &lt; num_items</div><div class="line">        id_list = SQL_DB(<span class="string">"SELECT ... ORDER BY time LIMIT ..."</span>)</div><div class="line">    END</div><div class="line">    RETURN id_list</div><div class="line">END</div></pre></td></tr></table></figure></p>
<p>比如有这样一类问题，我们需要查询最新的10条数据，这里就抽象为最新的10条评论吧，如果没有 Redis，我们每次都需要从数据库里面查询数据，如果我们用 Redis 的话，可以将最新的评论保存在 Redis 的列表里，有新的评论就 push 进入，当然 push 进 Redis 的列表后也需要写数据库，取最新评论的时候从 Redis 去取就行了。</p>
<h3 id="实时排名相关问题"><a href="#实时排名相关问题" class="headerlink" title="实时排名相关问题"></a>实时排名相关问题</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZADD leaderboard <span class="tag">&lt;<span class="name">score</span>&gt;</span> <span class="tag">&lt;<span class="name">username</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZRANK leaderboard <span class="tag">&lt;<span class="name">username</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Redis 还可以解决跟排名相关的应用，利用 Redis 我们可以高效地实现排序，比如游戏榜单的实时排序，我们可以用一个有序集合来存储，有一个新的数据时，可以用 ZADD 添加数据，需要获得某个用户的排名时，可以用 ZRANK 来获得。 如果只用数据库，比如苹果的 game center，热门的游戏可能有几百万人在玩，如果查数据库的话，实时排名基本就不可能了。</p>
<h4 id="根据用户点赞行为和事件排序的问题"><a href="#根据用户点赞行为和事件排序的问题" class="headerlink" title="根据用户点赞行为和事件排序的问题"></a>根据用户点赞行为和事件排序的问题</h4><p>Redis 可以实时对所有数据进行排序，比如 hacker news，通过一定的公式来对所有的文章进行排序。</p>
<h4 id="计数相关问题"><a href="#计数相关问题" class="headerlink" title="计数相关问题"></a>计数相关问题</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INCR ip:&lt;<span class="built_in">id</span>&gt;</div><div class="line">EXPIRE ip:&lt;<span class="built_in">id</span>&gt; <span class="number">60</span></div></pre></td></tr></table></figure>
<p>我相信大家都有过这样的需求：给某个值加一个计数器。有一个跟我们平台相关的例子，比如我们需要统计某个时间段内的注册人数，如果5分钟内有几千个注册用户，那么很有可能是被人攻击了，或者我们要分析某个被频繁请求的 api 是否正常，我们可以统计60秒内的独立 ip 访问次数，如果是恶意的请求，我们可以把这个 ip 加入黑名单。如果是存数据库的话，我们确实可以加一个字段，但这是一个频繁写的操作，会比较影响性能。如果是用 Redis 的话，可以很简单地实现这个功能，而且性能比较高</p>
<h4 id="给定时间内的唯一值"><a href="#给定时间内的唯一值" class="headerlink" title="给定时间内的唯一值"></a>给定时间内的唯一值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SADD page:day1:<span class="tag">&lt;<span class="name">page_id</span>&gt;</span> <span class="tag">&lt;<span class="name">user_id</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SCARD <span class="string">page:</span><span class="string">day1:</span>&lt;page_id&gt;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SISMEMBER page:day1:<span class="tag">&lt;<span class="name">page_id</span>&gt;</span> <span class="tag">&lt;<span class="name">user_id</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当我们需要判断一个时间段内某个集合内是否已经存在某个值，比如记录今天访问过某个页面的用户，我们可以用一个集合来记录，当一个用户访问了某个页面，我们把这个值记录在集合里，当我们需要知道某个页面的独立用户个数，可以用：SCARD，当我们需要了解某个用户是否访问过某个页面，可以用：SISMEMBER </p>
<h4 id="数据实时分析，反垃圾"><a href="#数据实时分析，反垃圾" class="headerlink" title="数据实时分析，反垃圾"></a>数据实时分析，反垃圾</h4><p>像这种实时分析的服务，一般不需要考虑数据的持久化的问题，但你可能需要大量缓存数据。所以我们可以用 redis 进行数据的实时分析。</p>
<h4 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h4><blockquote>
<p>Redis Pub/Sub is very very simple to use, stable, and fast, with support for pattern matching, ability to subscribe/unsubscribe to channels on the run,</p>
</blockquote>
<p>这个前面有提到，Redis 的订阅/发布功能非常容易使用，简单的订阅/发布功能可以用 redis</p>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>A common usage of Redis as a queue is the <a href="https://github.com/blog/542-introducing-resque" target="_blank" rel="external">Resque</a> library, implemented and popularized by Github’s folks.</p>
<p>Redis 可以当做队列使用。github 的 resque 就是基于 Redis 实现的队列系统，这个东西是 ruby 栈的。 </p>
<h2 id="管理-Redis"><a href="#管理-Redis" class="headerlink" title="管理 Redis"></a>管理 Redis</h2><h3 id="安全层面"><a href="#安全层面" class="headerlink" title="安全层面"></a>安全层面</h3><p>还记得 antirz 的 Redis 宣言吗？以简洁为美。在安全层面，Redis 并没有做太多工作。你可以给 Redis 设置一个密码，只需要更改 redis.conf 文件，修改 requirepass 参数的值。</p>
<p>需要注意的是，Redis 的性能极高，并且输入密码错误后 Redis 并不会主动延迟，所以攻击者可以通过穷举的方式破解 Redis 的密码（一秒钟十几万次）。</p>
<h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><ul>
<li>redis-cli</li>
<li>phpRedisAdmin</li>
<li>Rdbtools</li>
</ul>
<h2 id="更多资源"><a href="#更多资源" class="headerlink" title="更多资源"></a>更多资源</h2><h3 id="书"><a href="#书" class="headerlink" title="书"></a>书</h3><p>推荐三本书</p>
<p><a href="https://book.douban.com/subject/26419240/" target="_blank" rel="external"><img src="https://img3.doubanio.com/lpic/s28104066.jpg" alt="Redis 入门指南"></a></p>
<p><a href="https://book.douban.com/subject/26612779/" target="_blank" rel="external"><img src="https://img3.doubanio.com/lpic/s28296984.jpg" alt="Redis 实战"></a></p>
<p><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="external"><img src="https://img1.doubanio.com/lpic/s27297117.jpg" alt="Redis 设计与实现"></a></p>
<p>一本入门，打开新世界的大门，一本实战，教你怎么使用这门功夫，一本内功心法，教你如何融会贯通。</p>
<h3 id="一些常用链接"><a href="#一些常用链接" class="headerlink" title="一些常用链接"></a>一些常用链接</h3><ul>
<li><a href="https://redis.io/" target="_blank" rel="external">redis.io</a></li>
<li><a href="https://redisdoc.com/" target="_blank" rel="external">中文文档</a></li>
<li><a href="http://antirez.com/latest/0" target="_blank" rel="external">antirez.com</a></li>
<li><a href="https://github.com/antirez/redis" target="_blank" rel="external">source code</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章是团队内部分享 &lt;a href=&quot;http://knarfeh.com/Introduction-to-Redis/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction-to-Redis&lt;/a&gt; 之后的总结。不是完整的演讲稿，与演讲的内容有一定出入。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://knarfeh.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>bottlepy 一叶知秋</title>
    <link href="http://knarfeh.github.io/2016/11/13/bottlepy%20%E4%B8%80%E5%8F%B6%E7%9F%A5%E7%A7%8B/"/>
    <id>http://knarfeh.github.io/2016/11/13/bottlepy 一叶知秋/</id>
    <published>2016-11-13T01:29:17.000Z</published>
    <updated>2018-08-11T09:06:40.405Z</updated>
    
    <content type="html"><![CDATA[<p>在工作的微服务实践中，发现同事写的一个 proxy 用了 <a href="http://www.bottlepy.org" target="_blank" rel="external">bottle</a> 这个框架，感觉挺有意思，于是稍稍研究了一下。</p>
<p>这篇文章会总结一下 <a href="http://bottlepy.org" target="_blank" rel="external">bottle</a>，但不会讲解 bottle 的使用方法。</p>
<a id="more"></a>
<h2 id="为什么要搞定-bottlepy"><a href="#为什么要搞定-bottlepy" class="headerlink" title="为什么要搞定 bottlepy"></a>为什么要搞定 bottlepy</h2><p>因为搞定一个 Web 框架会对 Web 开发有更深刻的理解。</p>
<p>bottle 是一个高效、简洁、轻量的 web 框架，整个框架只有一个 bottle.py 文件，最新版本 0.12.10 只有 3751行。只有一个文件，没有其他依赖，这一点就已经很酷了。它和 Flask 很像，同样是用装饰器来表现路由，同样都是微框架，那么搞定 bottle.py 有意义吗，直接看 Flask 源代码不好吗？当然有意义，Flask 基于 Werkzeug(WSGI 工具集) 和 jinja2(模板引擎)， 代码量不多，很优雅，扩展性也很强，但和单文件的 bottle.py 相比就显得厚重了。从 bootle.py 的源代码中，我们可以学到的是 Web 框架的核心是什么，掌握了核心思想，再去处理一些 Web 开发过程中的一些边边角角的问题就只需要利用经验了。</p>
<h2 id="Web-应用框架"><a href="#Web-应用框架" class="headerlink" title="Web 应用框架"></a>Web 应用框架</h2><p>首先我们应该对 Web 应用框架有一个简单的了解。在我看来，基本所有的 Web 应用框架都做了一件最基本的事情：接受 HTTP 请求，（这个请求可能是 GET，POST，PUT等等）接收到请求后，Server 端进行一些处理，返回给客户端一个回应，就这么简单。一般来说，Web 应用框架，还会将一些通用的功能集成在一起，比如数据库访问接口、模板、会话管理，异常处理等等，提高代码的复用性，减轻 Web 开发时程序员的工作负荷。</p>
<h2 id="bottlepy-概述"><a href="#bottlepy-概述" class="headerlink" title="bottlepy 概述"></a>bottlepy 概述</h2><p>『Bottle 是一个快速，简单，轻量级的 Python <a href="http://www.wsgi.org/" target="_blank" rel="external">WSGI</a> Web 框架。单一文件，只依赖 Python 标准库』</p>
<p>功能特点（翻译自官网）：</p>
<ul>
<li><strong>URL 映射（Routing）：</strong> 将 URL 请求映射到 Python 函数，支持动态 URL，且 URL 更简洁。</li>
<li><strong>模板（Template）：</strong> 快速且 pythonic 的<a href="http://bottlepy.org/docs/dev/tutorial.html#tutorial-templates" target="_blank" rel="external">内置模板引擎</a>，同时支持 <a href="http://www.makotemplates.org/" target="_blank" rel="external">mako</a>，<a href="http://jinja.pocoo.org/" target="_blank" rel="external">jinja2</a> 和 <a href="http://www.cheetahtemplate.org/" target="_blank" rel="external">cheetah</a></li>
<li><strong>基础功能（Utilities）：</strong> 方便地访问表单数据，上传文件，cookie，HTTP header 以及其他的元数据</li>
<li><strong>服务器（Server）：</strong> 内置了开发服务器，且支持 <a href="http://pythonpaste.org/" target="_blank" rel="external">paste</a>, <a href="https://github.com/william-os4y/fapws3" target="_blank" rel="external">fapws3</a>, <a href="https://github.com/jonashaag/bjoern" target="_blank" rel="external">bjoern</a>, <a href="https://developers.google.com/appengine/" target="_blank" rel="external">gae</a>, <a href="http://www.cherrypy.org/" target="_blank" rel="external">cherrypy</a> 等符合 <a href="http://www.wsgi.org/" target="_blank" rel="external">WSGI</a> 标准的 HTTP 服务器。</li>
</ul>
<p>Bottle 的功能是很基础的，单文件，很酷，也有一些让人讨厌的地方：</p>
<ul>
<li>代码风格不规范，对于有代码洁癖的我来说简直是折磨</li>
<li>request，response 都是全局变量</li>
<li>完全使用标准库的内容，没有使用 <a href="https://pypi.python.org/pypi/six" target="_blank" rel="external">six</a> 这样的包来解决 python2，python3的兼容性</li>
</ul>
<h2 id="bottlepy-源码解析"><a href="#bottlepy-源码解析" class="headerlink" title="bottlepy 源码解析"></a>bottlepy 源码解析</h2><p>在看 bottle.py 的代码之前，我们应该先对 wsgi 以及基于 python 的 web 应用的典型流程有所了解。</p>
<p>wsgi 全称 Web Server Gateway Interface，也就是 Web 服务器网关接口，它实际上是一种规范，定义了 Python 世界中，Web 服务器与 Web 应用程序之间的接口，这个规范即 <a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external">pep-3333</a>。</p>
<p>基于 bottle 的 web 应用的典型流程是这样的：</p>
<ol>
<li>wsgi 启动后，加载 bottle 应用，监听某个端口</li>
<li>请求进来之后，会调用 WSGI 应用程序的 <code>__call__</code> 方法，<code>__call__</code> 方法能接收到 <code>environ</code>, <code>start_response</code> 参数，这些都是 wsgi 协议中定义好的。这时 Bottle 开始作为 Web 应用开始处理请求了</li>
<li>bottle 会根据传过来的 environ 字典，初始化 request，response 对象，根据 url 的值，匹配代码中装饰器生成的路由器对象，找到相应的处理函数</li>
<li>调用处理函数，根据调用的参数返回结果</li>
<li>结果被封装为 wsgi 规范规定的格式，通过 <code>start_response</code> 返回给 wsgi 服务器。这时请求得到回应，即完成了一次 HTTP 协议的请求的响应过程。</li>
</ol>
<h3 id="wsgi-server"><a href="#wsgi-server" class="headerlink" title="wsgi server"></a>wsgi server</h3><p>首先要知道的是，每写一个 bottle 应用，我们都需要一个 bottle.py 中定义的 app，即有一个初始化的过程，在 bottle.py 中，这个入口在最后几行。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app = default_app = AppStack<span class="comment">()</span></div><div class="line">app.push<span class="comment">()</span></div></pre></td></tr></table></figure>
<p>而 AppStack 会用栈的形式保存所有 Application，一个 Application 就是一个 <code>Bottle</code> 实例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppStack</span><span class="params">(list)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self[<span class="number">-1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, value=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, Bottle):</div><div class="line">            value = Bottle()</div><div class="line">        self.append(value)</div><div class="line">        <span class="keyword">return</span> value</div></pre></td></tr></table></figure>
<p>Bottle 类中跟 wsgi 规范相关的代码是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bottle</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, catchall=True, autojson=True)</span>:</span></div><div class="line">		<span class="comment"># balabala</span></div><div class="line">		<span class="keyword">pass</span></div><div class="line">	...</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            out = self._cast(self._handle(environ))</div><div class="line">            <span class="keyword">if</span> response._status_code <span class="keyword">in</span> (<span class="number">100</span>, <span class="number">101</span>, <span class="number">204</span>, <span class="number">304</span>)\</div><div class="line">            <span class="keyword">or</span> environ[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'HEAD'</span>:</div><div class="line">                <span class="keyword">if</span> hasattr(out, <span class="string">'close'</span>): out.close()</div><div class="line">                out = []</div><div class="line">            start_response(response._status_line, response.headerlist)</div><div class="line">            <span class="keyword">return</span> out</div><div class="line">        <span class="keyword">except</span> (KeyboardInterrupt, SystemExit, MemoryError):</div><div class="line">            <span class="keyword">raise</span></div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.catchall: <span class="keyword">raise</span></div><div class="line">            err = <span class="string">'&lt;h1&gt;Critical error while processing request: %s&lt;/h1&gt;'</span> \</div><div class="line">                  % html_escape(environ.get(<span class="string">'PATH_INFO'</span>, <span class="string">'/'</span>))</div><div class="line">            <span class="keyword">if</span> DEBUG:</div><div class="line">                err += <span class="string">'&lt;h2&gt;Error:&lt;/h2&gt;\n&lt;pre&gt;\n%s\n&lt;/pre&gt;\n'</span> \</div><div class="line">                       <span class="string">'&lt;h2&gt;Traceback:&lt;/h2&gt;\n&lt;pre&gt;\n%s\n&lt;/pre&gt;\n'</span> \</div><div class="line">                       % (html_escape(repr(_e())), html_escape(format_exc()))</div><div class="line">            environ[<span class="string">'wsgi.errors'</span>].write(err)</div><div class="line">            headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=UTF-8'</span>)]</div><div class="line">            start_response(<span class="string">'500 INTERNAL SERVER ERROR'</span>, headers, sys.exc_info())</div><div class="line">            <span class="keyword">return</span> [tob(err)]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.wsgi(environ, start_response)</div></pre></td></tr></table></figure>
<p>WSGI 规范中提到，Web 框架必须向 WSGI Server 提供 application 对象，用于处理用户请求，在 Bottle 中，application 对象就是一个 Bottle 实例，而且它是一个 callable 对象，<code>Bottle</code> 的 <code>__call__</code> 直接调用 <code>wsgi</code> 方法，<code>wsgi()</code> 方法会生成输出，调用 <code>start_response()</code> 回调函数通过 WSGI Server 响应请求，而请求的处理逻辑在 <code>_handle()</code> 方法中，我们接着看 <code>_handle</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle</span><span class="params">(self, environ)</span>:</span></div><div class="line">    path = environ[<span class="string">'bottle.raw_path'</span>] = environ[<span class="string">'PATH_INFO'</span>]</div><div class="line">    <span class="keyword">if</span> py3k:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            environ[<span class="string">'PATH_INFO'</span>] = path.encode(<span class="string">'latin1'</span>).decode(<span class="string">'utf8'</span>)</div><div class="line">        <span class="keyword">except</span> UnicodeError:</div><div class="line">            <span class="keyword">return</span> HTTPError(<span class="number">400</span>, <span class="string">'Invalid path string. Expected UTF-8'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        environ[<span class="string">'bottle.app'</span>] = self</div><div class="line">        request.bind(environ)</div><div class="line">        response.bind()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.trigger_hook(<span class="string">'before_request'</span>)</div><div class="line">            route, args = self.router.match(environ)</div><div class="line">            environ[<span class="string">'route.handle'</span>] = route</div><div class="line">            environ[<span class="string">'bottle.route'</span>] = route</div><div class="line">            environ[<span class="string">'route.url_args'</span>] = args</div><div class="line">            <span class="keyword">return</span> route.call(**args)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            self.trigger_hook(<span class="string">'after_request'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">except</span> HTTPResponse:</div><div class="line">        <span class="keyword">return</span> _e()</div><div class="line">    <span class="keyword">except</span> RouteReset:</div><div class="line">        route.reset()</div><div class="line">        <span class="keyword">return</span> self._handle(environ)</div><div class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemExit, MemoryError):</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.catchall: <span class="keyword">raise</span></div><div class="line">        stacktrace = format_exc()</div><div class="line">        environ[<span class="string">'wsgi.errors'</span>].write(stacktrace)</div><div class="line">        <span class="keyword">return</span> HTTPError(<span class="number">500</span>, <span class="string">"Internal Server Error"</span>, _e(), stacktrace)</div></pre></td></tr></table></figure>
<p>可以看到，<code>_handle</code> 其实就做了两件事，1. 根据 environ 的值匹配路由 2. 调用路由对应的处理函数，返回处理结果，匹配路由进行处理的过程我们在下文会继续深入。回到 <code>out = self._cast(self._handle(environ))</code> 这一行，我们继续看  <code>def _cast(self, out, peek=None)</code></p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">def _cast(self, <span class="keyword">out</span>, peek=None):</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">out</span>:</div><div class="line">        <span class="keyword">if</span> <span class="symbol">'Content</span>-Length' <span class="keyword">not</span> <span class="keyword">in</span> response:</div><div class="line">            response[<span class="symbol">'Content</span>-Length'] = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    <span class="keyword">if</span> isinstance(<span class="keyword">out</span>, (tuple, list))\</div><div class="line">    <span class="keyword">and</span> isinstance(<span class="keyword">out</span>[<span class="number">0</span>], (bytes, unicode)):</div><div class="line">        <span class="keyword">out</span> = <span class="keyword">out</span>[<span class="number">0</span>][<span class="number">0</span>:<span class="number">0</span>].join(<span class="keyword">out</span>) # b<span class="symbol">'abc</span>'[<span class="number">0</span>:<span class="number">0</span>] -&gt; b''</div><div class="line">    <span class="keyword">if</span> isinstance(<span class="keyword">out</span>, unicode):</div><div class="line">        <span class="keyword">out</span> = <span class="keyword">out</span>.encode(response.charset)</div><div class="line">    <span class="keyword">if</span> isinstance(<span class="keyword">out</span>, bytes):</div><div class="line">        <span class="keyword">if</span> <span class="symbol">'Content</span>-Length' <span class="keyword">not</span> <span class="keyword">in</span> response:</div><div class="line">            response[<span class="symbol">'Content</span>-Length'] = len(<span class="keyword">out</span>)</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">out</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isinstance(<span class="keyword">out</span>, HTTPError):</div><div class="line">        <span class="keyword">out</span>.apply(response)</div><div class="line">        <span class="keyword">out</span> = self.error_handler.get(<span class="keyword">out</span>.status_code, self.default_error_handler)(<span class="keyword">out</span>)</div><div class="line">        <span class="keyword">return</span> self._cast(<span class="keyword">out</span>)</div><div class="line">    <span class="keyword">if</span> isinstance(<span class="keyword">out</span>, HTTPResponse):</div><div class="line">        <span class="keyword">out</span>.apply(response)</div><div class="line">        <span class="keyword">return</span> self._cast(<span class="keyword">out</span>.<span class="keyword">body</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hasattr(<span class="keyword">out</span>, <span class="symbol">'read</span>'):</div><div class="line">        <span class="keyword">if</span> <span class="symbol">'wsgi.file_wrapper</span>' <span class="keyword">in</span> request.environ:</div><div class="line">            <span class="keyword">return</span> request.environ[<span class="symbol">'wsgi.file_wrapper</span>'](<span class="keyword">out</span>)</div><div class="line">        elif hasattr(<span class="keyword">out</span>, <span class="symbol">'close</span>') <span class="keyword">or</span> <span class="keyword">not</span> hasattr(<span class="keyword">out</span>, '__iter__'):</div><div class="line">            <span class="keyword">return</span> WSGIFileWrapper(<span class="keyword">out</span>)</div><div class="line"></div><div class="line">    try:</div><div class="line">        iout = iter(<span class="keyword">out</span>)</div><div class="line">        first = next(iout)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> first:</div><div class="line">            first = next(iout)</div><div class="line">    except StopIteration:</div><div class="line">        <span class="keyword">return</span> self._cast('')</div><div class="line">    except HTTPResponse:</div><div class="line">        first = _e()</div><div class="line">    except (KeyboardInterrupt, SystemExit, MemoryError):</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    except <span class="keyword">Exception</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.catchall: <span class="keyword">raise</span></div><div class="line">        first = HTTPError(<span class="number">500</span>, <span class="symbol">'Unhandled</span> <span class="keyword">exception</span>', _e(), format_exc())</div><div class="line"></div><div class="line">    <span class="keyword">if</span> isinstance(first, HTTPResponse):</div><div class="line">        <span class="keyword">return</span> self._cast(first)</div><div class="line">    elif isinstance(first, bytes):</div><div class="line">        new_iter = itertools.chain([first], iout)</div><div class="line">    elif isinstance(first, unicode):</div><div class="line">        encoder = lambda x: x.encode(response.charset)</div><div class="line">        new_iter = imap(encoder, itertools.chain([first], iout))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        msg = <span class="symbol">'Unsupported</span> response <span class="keyword">type</span>: %s' % <span class="keyword">type</span>(first)</div><div class="line">        <span class="keyword">return</span> self._cast(HTTPError(<span class="number">500</span>, msg))</div><div class="line">    <span class="keyword">if</span> hasattr(<span class="keyword">out</span>, <span class="symbol">'close</span>'):</div><div class="line">        new_iter = _closeiter(new_iter, <span class="keyword">out</span>.close)</div><div class="line">    <span class="keyword">return</span> new_iter</div></pre></td></tr></table></figure>
<p><code>_cast()</code> 对结果进行处理，转换为符合 WSGI 标准的格式，最终返回给 wsgi server。</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Bottle 中与路由相关的属性是 <code>routes</code>，<code>router</code>。</p>
<p>routes 是一个列表，存放该应用所有的 Route 对象，而 <code>router</code> 是一个 <code>Router</code> 实例，它将请求映射到对应的 <code>Route</code> 对象，<code>Route</code> 对象会调用对应的处理函数处理请求。</p>
<p>记得 <a href="http://bottlepy.org/docs/dev/" target="_blank" rel="external">bottle 官方文档</a> 中给出的例子是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> route, run, template</div><div class="line"></div><div class="line"><span class="meta">@route('/hello/&lt;name&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> template(<span class="string">'&lt;b&gt;Hello &#123;&#123;name&#125;&#125;&lt;/b&gt;!'</span>, name=name)</div><div class="line"></div><div class="line">run(host=<span class="string">'localhost'</span>, port=<span class="number">8080</span>)</div></pre></td></tr></table></figure>
<p>我们先来看看这个使用装饰器路由的功能是怎么实现的。</p>
<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, path=None, method=<span class="string">'GET'</span>, callback=None, name=None,</span></span></div><div class="line">          apply=None, skip=None, **config):</div><div class="line">    <span class="keyword">if</span> callable(path): path, callback = <span class="keyword">None</span>, path</div><div class="line">    plugins = makelist(apply)</div><div class="line">    skiplist = makelist(skip)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(callback)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(callback, basestring): callback = load(callback)</div><div class="line">        <span class="keyword">for</span> rule <span class="keyword">in</span> makelist(path) <span class="keyword">or</span> yieldroutes(callback):</div><div class="line">            <span class="keyword">for</span> verb <span class="keyword">in</span> makelist(method):</div><div class="line">                verb = verb.upper()</div><div class="line">                route = Route(self, rule, verb, callback, name=name,</div><div class="line">                              plugins=plugins, skiplist=skiplist, **config)</div><div class="line">                self.add_route(route)</div><div class="line">        <span class="keyword">return</span> callback</div><div class="line">    <span class="keyword">return</span> decorator(callback) <span class="keyword">if</span> callback <span class="keyword">else</span> decorator</div></pre></td></tr></table></figure>
<p><code>route()</code> 方法是一个带参数的装饰器，使用 <code>@route()</code> 装饰器时，它会根据 rule, verb, callback 等变量实例化一个 Route 对象，并调用 <code>add_route</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_route</span><span class="params">(self, route)</span>:</span></div><div class="line">        self.routes.append(route)</div><div class="line">        self.router.add(route.rule, route.method, route, name=route.name)</div><div class="line">        <span class="keyword">if</span> DEBUG: route.prepare()</div></pre></td></tr></table></figure>
<p><code>add_route</code> 会将该 <code>Route</code> 实例加入到 <code>self.routes</code> 列表，同时在 <code>self.router</code> 注册该对象。注册路由会构成一个『路径-&gt;处理方法』的匹配，我们深入的 <code>Router</code> 的 add 方法看看这个路由注册是怎么实现的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, rule, method, target, name=None)</span>:</span></div><div class="line">    anons     = <span class="number">0</span></div><div class="line">    keys      = []</div><div class="line">    pattern   = <span class="string">''</span></div><div class="line">    filters   = []</div><div class="line">    builder   = []</div><div class="line">    is_static = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> key, mode, conf <span class="keyword">in</span> self._itertokens(rule):</div><div class="line">        <span class="keyword">if</span> mode:</div><div class="line">            is_static = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> mode == <span class="string">'default'</span>: mode = self.default_filter</div><div class="line">            mask, in_filter, out_filter = self.filters[mode](conf)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key:</div><div class="line">                pattern += <span class="string">'(?:%s)'</span> % mask</div><div class="line">                key = <span class="string">'anon%d'</span> % anons</div><div class="line">                anons += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                pattern += <span class="string">'(?P&lt;%s&gt;%s)'</span> % (key, mask)</div><div class="line">                keys.append(key)</div><div class="line">            <span class="keyword">if</span> in_filter: filters.append((key, in_filter))</div><div class="line">            builder.append((key, out_filter <span class="keyword">or</span> str))</div><div class="line">        <span class="keyword">elif</span> key:</div><div class="line">            pattern += re.escape(key)</div><div class="line">            builder.append((<span class="keyword">None</span>, key))</div><div class="line"></div><div class="line">    self.builder[rule] = builder</div><div class="line">    <span class="keyword">if</span> name: self.builder[name] = builder</div><div class="line"></div><div class="line">    <span class="keyword">if</span> is_static <span class="keyword">and</span> <span class="keyword">not</span> self.strict_order:</div><div class="line">        self.static.setdefault(method, &#123;&#125;)</div><div class="line">        self.static[method][self.build(rule)] = (target, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        re_pattern = re.compile(<span class="string">'^(%s)$'</span> % pattern)</div><div class="line">        re_match = re_pattern.match</div><div class="line">    <span class="keyword">except</span> re.error:</div><div class="line">        <span class="keyword">raise</span> RouteSyntaxError(<span class="string">"Could not add Route: %s (%s)"</span> % (rule, _e()))</div><div class="line"></div><div class="line">    <span class="keyword">if</span> filters:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getargs</span><span class="params">(path)</span>:</span></div><div class="line">            url_args = re_match(path).groupdict()</div><div class="line">            <span class="keyword">for</span> name, wildcard_filter <span class="keyword">in</span> filters:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    url_args[name] = wildcard_filter(url_args[name])</div><div class="line">                <span class="keyword">except</span> ValueError:</div><div class="line">                    <span class="keyword">raise</span> HTTPError(<span class="number">400</span>, <span class="string">'Path has wrong format.'</span>)</div><div class="line">            <span class="keyword">return</span> url_args</div><div class="line">    <span class="keyword">elif</span> re_pattern.groupindex:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getargs</span><span class="params">(path)</span>:</span></div><div class="line">            <span class="keyword">return</span> re_match(path).groupdict()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        getargs = <span class="keyword">None</span></div><div class="line"></div><div class="line">    flatpat = _re_flatten(pattern)</div><div class="line">    whole_rule = (rule, flatpat, target, getargs)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (flatpat, method) <span class="keyword">in</span> self._groups:</div><div class="line">        <span class="keyword">if</span> DEBUG:</div><div class="line">            msg = <span class="string">'Route &lt;%s %s&gt; overwrites a previously defined route'</span></div><div class="line">            warnings.warn(msg % (method, rule), RuntimeWarning)</div><div class="line">        self.dyna_routes[method][self._groups[flatpat, method]] = whole_rule</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.dyna_routes.setdefault(method, []).append(whole_rule)</div><div class="line">        self._groups[flatpat, method] = len(self.dyna_routes[method]) - <span class="number">1</span></div><div class="line"></div><div class="line">    self._compile(method)</div></pre></td></tr></table></figure>
<p>add 方法可以增加或替换一个已存在的路由。同一个视图函数，可以使用多个路由装饰器来装饰，这里首先会遍历某个路由装饰器指定的路由规则，确定是静态路由还是动态路由，如果是静态路由，添加到 static 字典里就 return 了。如果是动态路由，其实处理规则也类似，只是需要先编译正则表达式再加入 <code>dyna_routes</code> 字典里</p>
<h4 id="匹配路由"><a href="#匹配路由" class="headerlink" title="匹配路由"></a>匹配路由</h4><p>路由已经构建好了，接下来我们看看 http 请求进来时，路由是怎么匹配的。还记得 <code>_handle</code> 方法中，处理 <code>request</code> 请求时有这么一行：<code>route, args = self.router.match(environ)</code>，我们看看这个方法是怎么实现路由匹配的。</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">def <span class="keyword">match</span>(<span class="keyword">self</span>, environ):</div><div class="line">    verb = environ[<span class="symbol">'REQUEST_METHOD</span>'].upper()</div><div class="line">    path = environ[<span class="symbol">'PATH_INFO</span>'] or <span class="string">'/'</span></div><div class="line">    target = <span class="literal">None</span></div><div class="line">    <span class="keyword">if</span> verb == <span class="symbol">'HEAD</span>':</div><div class="line">        methods = [<span class="symbol">'PROXY</span>', verb, <span class="symbol">'GET</span>', <span class="symbol">'ANY</span>']</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        methods = [<span class="symbol">'PROXY</span>', verb, <span class="symbol">'ANY</span>']</div><div class="line"></div><div class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> methods:</div><div class="line">        <span class="keyword">if</span> method <span class="keyword">in</span> <span class="keyword">self</span>.<span class="keyword">static</span> and path <span class="keyword">in</span> <span class="keyword">self</span>.<span class="keyword">static</span>[method]:</div><div class="line">            target, getargs = <span class="keyword">self</span>.<span class="keyword">static</span>[method][path]</div><div class="line">            <span class="keyword">return</span> target, getargs(path) <span class="keyword">if</span> getargs <span class="keyword">else</span> &#123;&#125;</div><div class="line">        elif method <span class="keyword">in</span> <span class="keyword">self</span>.dyna_regexes:</div><div class="line">            <span class="keyword">for</span> combined, rules <span class="keyword">in</span> <span class="keyword">self</span>.dyna_regexes[method]:</div><div class="line">                <span class="keyword">match</span> = combined(path)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">match</span>:</div><div class="line">                    target, getargs = rules[<span class="keyword">match</span>.lastindex - <span class="number">1</span>]</div><div class="line">                    <span class="keyword">return</span> target, getargs(path) <span class="keyword">if</span> getargs <span class="keyword">else</span> &#123;&#125;</div><div class="line"></div><div class="line">    allowed = set([])</div><div class="line">    nocheck = set(methods)</div><div class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> set(<span class="keyword">self</span>.<span class="keyword">static</span>) - nocheck:</div><div class="line">        <span class="keyword">if</span> path <span class="keyword">in</span> <span class="keyword">self</span>.<span class="keyword">static</span>[method]:</div><div class="line">            allowed.add(verb)</div><div class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> set(<span class="keyword">self</span>.dyna_regexes) - allowed - nocheck:</div><div class="line">        <span class="keyword">for</span> combined, rules <span class="keyword">in</span> <span class="keyword">self</span>.dyna_regexes[method]:</div><div class="line">            <span class="keyword">match</span> = combined(path)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</div><div class="line">                allowed.add(method)</div><div class="line">    <span class="keyword">if</span> allowed:</div><div class="line">        allow_header = <span class="string">","</span>.join(sorted(allowed))</div><div class="line">        raise HTTPError(<span class="number">405</span>, <span class="string">"Method not allowed."</span>, Allow=allow_header)</div><div class="line"></div><div class="line">    raise HTTPError(<span class="number">404</span>, <span class="string">"Not found: "</span> + repr(path))</div></pre></td></tr></table></figure>
<p>首先从 environ 变量中拿到 http 方法和请求的路径，首先匹配注册的静态路由，匹配不成功，接着匹配动态路由，调用 <code>dyna_regexes</code> 中已经编译好的正则表达式进行匹配。如果匹配上了，返回该路径对应的路由以及相应的参数，如果还是没有匹配上，匹配相同路径的其他方法，如果匹配上了，返回 405 Method not allowed 错误，否则返回 404 Not found 错误。成功匹配后，通过 <code>route.call(**args)</code> 进行调用。</p>
<h3 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h3><p><code>Bottle</code> 对每一次请求都会把参数保存在当前线程中，通过继承 <code>threading.local</code> 实现线程安全。请求和相应分别存储在全局变量 <code>request</code> 和 <code>response</code> 中，这样一来，我们就可以用类似 <code>request.headers.get(&#39;Authorization&#39;)</code> 这样的代码获取 request 对象中的一些信息。在 bottle.py 中有：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">request</span> = LocalRequest()</div><div class="line"><span class="attr">response</span> = LocalResponse()</div></pre></td></tr></table></figure>
<p>他们是线程安全的，当前的请求总是在当前的 request/response 变量中。</p>
<h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>深入到 LocalRequest 中。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">LocalRequest</span>(<span class="type">BaseRequest</span>):</span></div><div class="line">    bind = <span class="type">BaseRequest</span>.__init__</div><div class="line">    environ = local_property()</div></pre></td></tr></table></figure>
<p>可以看到，<code>LocalRequest</code> 实际上继承于 <code>BaseReuest</code>，<code>BaseRequest</code> 类的内容很多，这里我们只捡典型的来看。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ=None)</span>:</span></div><div class="line">    self.environ = &#123;&#125; <span class="keyword">if</span> environ <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> environ</div><div class="line">    self.environ[<span class="string">'bottle.request'</span>] = self</div></pre></td></tr></table></figure>
<p>首先看 <code>__init__</code> 方法，<code>BaseRequest</code> 对 environ 进行了封装，在其他方法中可以利用 <code>self.environ</code> 直接访问。</p>
<p>在 request 中有很多属性，比如我们可以通过 <code>request.body</code> 来得到 http 请求中的 body。其中大部分为一般属性，用 Python 的 @property 装饰器定义，还有部分属性使用 bottle.py 自定义的 <code>DictProperty</code> 来定义，这样可以设置只读属性，还可以使用 attr，key 两级的索引。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DictProperty</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, attr, key=None, read_only=False)</span>:</span></div><div class="line">        self.attr, self.key, self.read_only = attr, key, read_only</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></div><div class="line">        functools.update_wrapper(self, func, updated=[])</div><div class="line">        self.getter, self.key = func, self.key <span class="keyword">or</span> func.__name__</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, cls)</span>:</span></div><div class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> self</div><div class="line">        key, storage = self.key, getattr(obj, self.attr)</div><div class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> storage: storage[key] = self.getter(obj)</div><div class="line">        <span class="keyword">return</span> storage[key]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.read_only: <span class="keyword">raise</span> AttributeError(<span class="string">"Read-Only property."</span>)</div><div class="line">        getattr(obj, self.attr)[self.key] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.read_only: <span class="keyword">raise</span> AttributeError(<span class="string">"Read-Only property."</span>)</div><div class="line">        <span class="keyword">del</span> getattr(obj, self.attr)[self.key]</div></pre></td></tr></table></figure>
<p>当我们使用 <code>@DictProperty(&#39;environ&#39;, &#39;bottle.request.headers&#39;, read_only=True)</code> 这样的装饰器时，被装饰的函数的返回值实际在 <code>self.environ[&#39;bottle.request.headers&#39;]</code> 中，而且可以确保这个属性只是可读的。<br>还记得 <code>LocalRequest</code> 中的 <code>environ = local_property()</code> 这行，它确保了 environ 是线程安全的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_property</span><span class="params">(name=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> name: depr(<span class="string">'local_property() is deprecated and will be removed.'</span>) <span class="comment">#0.12</span></div><div class="line">    ls = threading.local()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fget</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>: <span class="keyword">return</span> ls.var</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"Request context not initialized."</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fset</span><span class="params">(self, value)</span>:</span> ls.var = value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fdel</span><span class="params">(self)</span>:</span> <span class="keyword">del</span> ls.var</div><div class="line">    <span class="keyword">return</span> property(fget, fset, fdel, <span class="string">'Thread-local property'</span>)</div></pre></td></tr></table></figure>
<h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><p>response 和 request 非常类似，不过没有只可读的属性，因为 response 的使用场景是用户设置如 <code>cookie</code>，<code>header</code>，<code>body</code> 之类的返回的值，它将通过 WSGI 返回给发送请求的用户。</p>
<h4 id="trigger-hook-钩子函数"><a href="#trigger-hook-钩子函数" class="headerlink" title="trigger_hook 钩子函数"></a>trigger_hook 钩子函数</h4><p>在 <code>_handle</code> 方法中，我们记得有这么一行：<code>self.trigger_hook(&#39;before_request&#39;)</code>，实际上在 Bottle 中，我们可以在对 request 处理前和处理后添加钩子函数，这样的话在 request 的处理前后可以自动调用这些函数，目前支持三种钩子函数，<code>before_request</code>, <code>after_request</code>, <code>app_reset</code>，比如在 request 处理前修改 <code>REQUEST_METHOD</code> 这样的场景就可以使用 <code>before_request</code> 函数。</p>
<p>增加一个 hook，可以通过调用 <code>add_hook</code>，或使用 hook 装饰器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_hook</span><span class="params">(self, name, func)</span>:</span></div><div class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> self.__hook_reversed:</div><div class="line">        self._hooks[name].insert(<span class="number">0</span>, func)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self._hooks[name].append(func)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook</span><span class="params">(self, name)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        self.add_hook(name, func)</div><div class="line">        <span class="keyword">return</span> func</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
<p>当需要 trigger 时，调用 <code>trigger_hook</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_hook</span><span class="params">(self, __name, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">return</span> [hook(*args, **kwargs) <span class="keyword">for</span> hook <span class="keyword">in</span> self._hooks[__name][:]]</div></pre></td></tr></table></figure>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>Bottle 内置了一个称为 SimpleTemplate 的模板引擎，利用 <code>StplParser</code> 进行模板渲染。同时通过 adapter 的方式支持 <code>mako</code>，<code>cheetah</code>，<code>jinja2</code> 模板渲染。通过 <code>from bottle import template</code> 导入模板函数后，利用 <code>template(&#39;&lt;b&gt;Hello &lt;/b&gt;!&#39;, name=name)</code> 这种方式传入相应调用即可得到渲染后的结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">template</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    tpl = args[<span class="number">0</span>] <span class="keyword">if</span> args <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">    adapter = kwargs.pop(<span class="string">'template_adapter'</span>, SimpleTemplate)</div><div class="line">    lookup = kwargs.pop(<span class="string">'template_lookup'</span>, TEMPLATE_PATH)</div><div class="line">    tplid = (id(lookup), tpl)</div><div class="line">    <span class="keyword">if</span> tplid <span class="keyword">not</span> <span class="keyword">in</span> TEMPLATES <span class="keyword">or</span> DEBUG:</div><div class="line">        settings = kwargs.pop(<span class="string">'template_settings'</span>, &#123;&#125;)</div><div class="line">        <span class="keyword">if</span> isinstance(tpl, adapter):</div><div class="line">            TEMPLATES[tplid] = tpl</div><div class="line">            <span class="keyword">if</span> settings: TEMPLATES[tplid].prepare(**settings)</div><div class="line">        <span class="keyword">elif</span> <span class="string">"\n"</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">"&#123;"</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">"%"</span> <span class="keyword">in</span> tpl <span class="keyword">or</span> <span class="string">'$'</span> <span class="keyword">in</span> tpl:</div><div class="line">            TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> TEMPLATES[tplid]:</div><div class="line">        abort(<span class="number">500</span>, <span class="string">'Template (%s) not found'</span> % tpl)</div><div class="line">    <span class="keyword">for</span> dictarg <span class="keyword">in</span> args[<span class="number">1</span>:]: kwargs.update(dictarg)</div><div class="line">    <span class="keyword">return</span> TEMPLATES[tplid].render(kwargs)</div><div class="line"></div><div class="line">mako_template = functools.partial(template, template_adapter=MakoTemplate)</div><div class="line">cheetah_template = functools.partial(template, template_adapter=CheetahTemplate)</div><div class="line">jinja2_template = functools.partial(template, template_adapter=Jinja2Template)</div></pre></td></tr></table></figure>
<p>template 封装了所有模板引擎的使用，默认使用 <code>SimpleTemplate</code>，最终会调用 <code>render</code> 方法，这里我们只看 <code>SimpleTemplate</code>。<code>SimpleTemplate</code> 继承自 <code>BaseTemplate</code>，<code>prepare</code>，<code>render</code> 是一个必须实现的方法，<code>SimpleTemplate</code> 的 <code>render</code> 会调用 <code>execute</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, _stdout, kwargs)</span>:</span></div><div class="line">    env = self.defaults.copy()</div><div class="line">    env.update(kwargs)</div><div class="line">    env.update(&#123;<span class="string">'_stdout'</span>: _stdout, <span class="string">'_printlist'</span>: _stdout.extend,</div><div class="line">        <span class="string">'include'</span>: functools.partial(self._include, env),</div><div class="line">        <span class="string">'rebase'</span>: functools.partial(self._rebase, env), <span class="string">'_rebase'</span>: <span class="keyword">None</span>,</div><div class="line">        <span class="string">'_str'</span>: self._str, <span class="string">'_escape'</span>: self._escape, <span class="string">'get'</span>: env.get,</div><div class="line">        <span class="string">'setdefault'</span>: env.setdefault, <span class="string">'defined'</span>: env.__contains__ &#125;)</div><div class="line">    eval(self.co, env)</div><div class="line">    <span class="keyword">if</span> env.get(<span class="string">'_rebase'</span>):</div><div class="line">        subtpl, rargs = env.pop(<span class="string">'_rebase'</span>)</div><div class="line">        rargs[<span class="string">'base'</span>] = <span class="string">''</span>.join(_stdout) <span class="comment">#copy stdout</span></div><div class="line">        <span class="keyword">del</span> _stdout[:] <span class="comment"># clear stdout</span></div><div class="line">        <span class="keyword">return</span> self._include(env, subtpl, **rargs)</div><div class="line">    <span class="keyword">return</span> env</div></pre></td></tr></table></figure>
<p>execute 将用户传入的参数和辅助函数加入到 <code>env</code> 字典中，通过 eval 执行编译后的模板代码，其中 <code>code</code> 和 <code>co</code> 都是使用 <code>cached_property</code> 装饰器进行装饰可以缓存的属性，<code>code</code> 调用 <code>StplParser</code> 获得模板中的可解析的 Python 代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@cached_property</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">(self)</span>:</span></div><div class="line">    source = self.source</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> source:</div><div class="line">        <span class="keyword">with</span> open(self.filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">            source = f.read()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        source, encoding = touni(source), <span class="string">'utf8'</span></div><div class="line">    <span class="keyword">except</span> UnicodeError:</div><div class="line">        depr(<span class="string">'Template encodings other than utf8 are no longer supported.'</span>) <span class="comment">#0.11</span></div><div class="line">        source, encoding = touni(source, <span class="string">'latin1'</span>), <span class="string">'latin1'</span></div><div class="line">    parser = StplParser(source, encoding=encoding, syntax=self.syntax)</div><div class="line">    code = parser.translate()</div><div class="line">    self.encoding = parser.encoding</div><div class="line">    <span class="keyword">return</span> code</div></pre></td></tr></table></figure>
<p><code>StplParser</code> 这里不再展开，实际上没那么复杂，它的作用是用正则表达式匹配 Python 代码然后组装在一起返回，<code>co</code> 返回根据 <code>code</code> 编译的结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@cached_property</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">co</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> compile(self.code, self.filename <span class="keyword">or</span> <span class="string">'&lt;string&gt;'</span>, <span class="string">'exec'</span>)</div></pre></td></tr></table></figure>
<p>对于模板的使用，还有另一种方法，那就是使用 <code>view</code> 装饰器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(tpl_name, **defaults)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            result = func(*args, **kwargs)</div><div class="line">            <span class="keyword">if</span> isinstance(result, (dict, DictMixin)):</div><div class="line">                tplvars = defaults.copy()</div><div class="line">                tplvars.update(result)</div><div class="line">                <span class="keyword">return</span> template(tpl_name, **tplvars)</div><div class="line">            <span class="keyword">elif</span> result <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> template(tpl_name, defaults)</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line">mako_view = functools.partial(view, template_adapter=MakoTemplate)</div><div class="line">cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)</div><div class="line">jinja2_view = functools.partial(view, template_adapter=Jinja2Template)</div></pre></td></tr></table></figure>
<p>对于返回时调用 template 的代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name=<span class="string">'World'</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> template(<span class="string">'hello_template'</span>, name=name)</div></pre></td></tr></table></figure>
<p>可以改为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@view('hello_template')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name=<span class="string">'World'</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'name'</span>: name&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Bottle 是一个小而巧的框架，它可以用来进行原型开发或构建比较小的 Web 应用或服务，但缺乏很多高级功能，比如 ORM，表单验证等等，如果需求是开发一个复杂的应用，使用 Django 或 Flask 可能更合适。有意思的是 Flask 的诞生和 Bottle 有很大的关系，如果希望使用 Bottle 的一系列装饰器的语法糖，可以使用 Flask。</p>
<p>从源码的角度来看，阅读 bottle.py 的源码是一件很有价值的事情，可以在 4000 行代码内了解一个 Python web 框架需要做的事情本身就很有趣。需要注意的是，bottle 的代码只引用了 python 标准库，但它是同时支持 python2，python3 的，代码比较啰嗦，对于同时兼容 python2，python3，six 库的实践可能更有参考意义，其次，代码本身很多地方不遵循 PEP8 规范，这对于有代码洁癖的人来说还是挺难受的。</p>
<p>代码解析的部分内容不是很多，只写了一些比较关键的功能实现，虽然 bottle.py 的代码不多，把每一行代码都解释一遍再记录下来也没有必要，不过未来有时间的话，可以继续深入如插件功能，描述符和装饰器的运用等代码片段。</p>
<p>总的来说，bottle.py 的代码还是非常值得阅读，参考。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/Web%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6" target="_blank" rel="external">Web 应用框架</a></li>
<li><a href="https://en.wikipedia.org/wiki/Web_framework" target="_blank" rel="external">Web Framework</a></li>
<li><a href="https://github.com/alex/what-happens-when" target="_blank" rel="external">What happens when</a></li>
<li><a href="https://www.zhihu.com/question/34873227" target="_blank" rel="external">在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作的微服务实践中，发现同事写的一个 proxy 用了 &lt;a href=&quot;http://www.bottlepy.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle&lt;/a&gt; 这个框架，感觉挺有意思，于是稍稍研究了一下。&lt;/p&gt;
&lt;p&gt;这篇文章会总结一下 &lt;a href=&quot;http://bottlepy.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottle&lt;/a&gt;，但不会讲解 bottle 的使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://knarfeh.github.io/tags/Web/"/>
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>写给新手看的Flask+uwsgi+Nginx+Ubuntu部署教程</title>
    <link href="http://knarfeh.github.io/2016/06/11/%E5%86%99%E7%BB%99%E6%96%B0%E6%89%8B%E7%9C%8B%E7%9A%84%20Flask+uwsgi+Nginx+Ubuntu%20%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    <id>http://knarfeh.github.io/2016/06/11/写给新手看的 Flask+uwsgi+Nginx+Ubuntu 部署教程/</id>
    <published>2016-06-11T13:40:38.000Z</published>
    <updated>2017-02-05T15:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习 Flask，写了一个 Flask 应用需要部署的时候，就想着折腾自己的服务器。根据搜索的教程照做，对于原理一知半解，磕磕碰碰，只要运行起来了，谢天谢地然后不再折腾了，到下一次还需要部署时，这样的过程就会重复一次。不知道多少人的膝盖中箭了呢？我也这样干过，这么做确实很蠢，所以我决定写一篇 Flask+uwsgi+Nginx+Ubuntu 的部署教程，解答一些我自己在这个过程中的疑问，从原理到方案，以一个小白的角度，总结一下部署、运维这件事，应该对初学 Flask (或其他 Python Web 框架)，从未接触过部署，运维的同学有些帮助。<br><a id="more"></a></p>
<h2 id="环境简介"><a href="#环境简介" class="headerlink" title="环境简介"></a>环境简介</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>我使用的 Ubuntu 系统版本是 14.04，用过几个 Linux 发行版，现在挑选系统的第一选择基本就是 Ubuntu 了，因为 Ubuntu 有商业公司 <a href="https://en.wikipedia.org/wiki/Canonical_%28company%29" target="_blank" rel="external">Canonical</a> 做开发维护；使用的人多，有庞大的社区支持；遇到问题容易解决。我折腾过很长时间的 Linux 系统，我对新手的建议是，不要把时间浪费在这上面，应该以解决实际问题为导向，踏实点提高编程能力。装系统、优化系统、记各种酷炫的命令对于提高编程能力并没有实际帮助。所以你问我资瓷不资瓷 Ubuntu，我当然是资瓷的啦，用 Ubuntu 当然也会遇到坑，但相比于其他系统会少一些，也会容易解决一点。事实上，Ubuntu 已经成为了服务器的首选，AWS 上被选择最多的 Linux 发行版就是 Ubuntu。Quora 用的 Linux 发行版也是 Ubuntu，创始人 Adam D’Angelo 在这个<a href="https://www.quora.com/Which-Linux-flavor-does-Quora-use-Why" target="_blank" rel="external">回答</a>里解释了原因。总的来说，没有特别的理由的话，Ubuntu 理应是首选，经验多一些之后，如果对某个发行版感兴趣，或者想要做一些特别的尝试，跳出舒适区，试试其他系统也无妨。</p>
<h3 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h3><p>我们知道 Flask 中自带了 web server，通过 Werkzeug，我们可以搭建 WSGI 服务，运行我们的网站，但 Flask 是 Web 框架，并不是 Web 服务器，尽管 Werkzeug 很强大，但只能用于开发，一般不能用于生产，对于 Web 服务器，我们有更专业的选择，那就是 uWSGI, uWSGI 是一个全站式的托管服务，它实现了应用服务器（支持多种编程语言）、代理、进程管理器、监视器。取名为 uWSGI 是因为它最早实现了 Python 语言的 WSGI。</p>
<p>uWSGI 包括四个部分：  </p>
<ul>
<li>uwsgi 协议</li>
<li>web server 内置支持协议模块</li>
<li>application 服务器协议支持模块</li>
<li>进程控制程序</li>
</ul>
<p>uWSGI 是 C 语言写的，性能比较高。</p>
<p>推荐阅读：</p>
<ul>
<li>项目主页地址在<a href="https://github.com/unbit/uwsgi" target="_blank" rel="external">这</a></li>
<li>官方文档在<a href="https://uwsgi-docs.readthedocs.io/en/latest/" target="_blank" rel="external">这</a></li>
<li><a href="http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html" target="_blank" rel="external">快速入门</a>  </li>
</ul>
<h3 id="WSGI-uWSGI-uwsgi-的区别"><a href="#WSGI-uWSGI-uwsgi-的区别" class="headerlink" title="WSGI, uWSGI, uwsgi 的区别"></a>WSGI, uWSGI, uwsgi 的区别</h3><p>当我们部署完一个应用程序，浏览网页时具体的过程是怎样的呢？首先我们得有一个 Web 服务器来处理 HTTP 协议的内容，Web 服务器获得客户端的请求，交给应用程序，应用程序处理完，返回给 Web 服务器，这时 Web 服务器再返回给客户端。Web 服务器与应用程序之间显然要进行交互，这时就出现了很多 Web 服务器与应用程序之间交互的规范，最早出现的是 <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface" target="_blank" rel="external">CGI</a>，后来又出现了改进 CGI 性能的FasgCGI，Java 专用的 Servlet 规范，对于 Python 来说，这个规范就是 WSGI。有了统一标准，程序的可移植性就大大提高了。这里我们只介绍 WSGI。</p>
<p>WSGI 全称是 Web Server Gateway Interface，也就是 Web 服务器网关接口，它是 <strong>Python 语言</strong>定义出来的 Web 服务器和 Web 应用程序之间的简单而通用的接口，基于现存的 CGI 标准设计，后来在很多其他语言中也出现了类似的接口。 总的来说，WSGI 可以分为服务器和应用程序两个部分，实际上可以将 WSGI 理解为服务器与应用程序之间的一座桥，桥的一边是服务器，另一边是应用程序。  </p>
<p>按照 web 组件分类，WSGI 内部可以分为三类，web 应用程序，web 服务器，web 中间件。应用程序端的部分通过 Python 语言的各种 Web 框架实现，比如 Flask，Django 这些，有了框架，开发者就不需要处理 HTTP 协议的底层规范，框架会帮忙解决这些，开发者只需处理 HTTP 请求和响应等等，web 服务器的部分就要复杂一点，可以通过 uWSGI 实现，也可以用最常见的 Web 服务器，比如 Apache、Nginx，但这些 Web 服务器没有内置 WSGI 的实现，是通过扩展完成的。如 Apache，通过扩展模块 mod_wsgi 来支持WSGI，Nginx 可以通过代理的方式，将请求封装好，交给应用服务器，比如 uWSGI。uWSGI 可以完成 WSGI 的服务端，进程管理以及对应用的调用。WSGI 中间件的部分可以这样理解：我们把 WSGI 看做桥，这个桥有两个桥墩，一个是应用程序端，另一个是服务器端，那么桥面就是 WSGI 中间件，中间件同时具备服务器、应用程序端两个角色，当然也需要同时遵守 WSGI 服务器和 WSGI 应用程序两边的限制和需要。更详细的内容可以看<a href="https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides" target="_blank" rel="external">PEP-333 中间件的描述</a></p>
<p>Flask 依赖的 Werkzeug 就是一个 WSGI 工具包，官方文档的定义是 Werkzeug 是为 Python 设计的 HTTP和 WSGI 实用程序库。需要注意的是，Flask 自带的 Werkzeug 是用来开发的，并不能用于生产环境，Flask 是 Web 框架，而 Werkzeug 不是 Web框架，不是 Web 服务器，它只是一个 WSGI 工具包，它在 Flask 的作用是作为 Web 框架的底层库，方便我们的开发。</p>
<p>我们将 uwsgi 和 uWSGI 放在一起讲解。uWSGI 是一个 Web 服务器程序，WSGI，上面已经谈到，是一种协议，uwsgi 也是一种协议，uWSGI 实现了 uwsgi、WSGI、http 等协议。 uwsgi 的介绍可以看<a href="http://uwsgi-docs.readthedocs.io/en/latest/Protocol.html" target="_blank" rel="external">这里</a>，uwsgi 是 uWSGI 使用的一个自有的协议，它用4个字节来定义传输数据类型描述。尽管都是协议，uwsgi 和 WSGI 并没有联系，我们需要区分这两个词。</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx 是高效的 Web 服务器和反向代理服务器，可以用作负载均衡（当有 n 个用户访问服务器时，可以实现分流，分担服务器的压力），与 Apache 相比，Nginx 支持高并发，可以支持百万级的 TCP 连接，十万级别的并发连接，部署简单，内存消耗少，成本低，但 Nginx 的模块没有 Apache 丰富。Nginx 支持 uWSGI 的 uwsgi 协议，因此我们可以将 Nginx 与 uWSGI 结合起来，Nginx 通过 <code>uwsgi_pass</code> 将动态内容交给 uWSGI 处理。</p>
<p>官方文档在<a href="https://www.nginx.com/resources/wiki/" target="_blank" rel="external">这</a>  </p>
<p>最好的 Nginx 教程在<a href="http://openresty.org/download/agentzh-nginx-tutorials-zhcn.html" target="_blank" rel="external">这</a></p>
<h3 id="uWSGI-和-Nginx-的关系"><a href="#uWSGI-和-Nginx-的关系" class="headerlink" title="uWSGI 和 Nginx 的关系"></a>uWSGI 和 Nginx 的关系</h3><p>从上面的讲解中，我们知道，uWSGI 可以起到 Web 服务器的作用，那么为什么有了 uWSGI 还需要 Nginx 呢？    </p>
<p>最普遍的说法是 Nginx 对于处理静态文件更有优势，性能更好。其实如果是小网站，没有静态文件需要处理，只用 uWSGI 也是可以的，但加上 Nginx 这一层，优势可以很具体：  </p>
<ol>
<li><p>对于运维来说比较方便，如果服务器被某个 IP 攻击，在 Nginx 配置文件黑名单中添加这个 IP 即可，如果只用 uWSGI，那么就需要在代码中修改了。另一方面，Nginx 是身经百战的 Web 服务器了，在表现上 uWSGI 显得更专业，比如说 uWSGI 在早期版本里是不支持 https 的，可以说 Nginx 更安全。</p>
</li>
<li><p>Nginx 的特点是能够做负载均衡和 HTTP 缓存，如果不止一台服务器，Nginx 基本就是必选项了，通过 Nginx，将资源可以分配给不同的服务器节点，只有一台服务器，也能很好地提高性能，因为 Nginx 可以通过 headers 的 Expires or E-Tag，gzip 压缩等方式很好地处理静态资源，毕竟是 C 语言写的，调用的是 native 的函数，针对 I/O做了优化，对于动态资源来说，Nginx 还可以实现缓存的功能，配合 CDN 优化（这是 uWSGI 做不到的）。Nginx 支持epoll/kqueue 等高效网络库，能够很好地处理高并发短连接请求，性能比 uWSGI 不知道高到哪里去了。</p>
</li>
<li><p>如果服务器主机上运行了 PHP，Python 等语言写的多个应用，都需要监听 80 端口，这时候 Nginx 就是必须的了。因为我们需要一个转发的服务。</p>
</li>
</ol>
<p>所以说，Nginx 基本也是必选项。</p>
<h2 id="部署准备工作"><a href="#部署准备工作" class="headerlink" title="部署准备工作"></a>部署准备工作</h2><p>这里我假设我们拿到的是一台全新的服务器。 一般来说，Linux 系统都会预装 Python 的，但不一定装了 easy_install 工具，我们可以通过 <code>apt-get install python-setuptools</code> 来安装 easy_install，再通过 easy_install 安装 pip。</p>
<h3 id="搞定-Python-环境"><a href="#搞定-Python-环境" class="headerlink" title="搞定 Python 环境"></a>搞定 Python 环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-setuptools</div><div class="line">$ sudo easy_install pip</div></pre></td></tr></table></figure>
<p>我们也可以直接装 pip： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-pip</div></pre></td></tr></table></figure>
<p>这样，我们就可以通过 pip 安装 virtualenv，为 flask 项目构建虚拟环境。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install virtualenv</div></pre></td></tr></table></figure>
<h3 id="Nginx-1"><a href="#Nginx-1" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-<span class="keyword">get</span> install nginx</div></pre></td></tr></table></figure>
<p>启动 nginx ：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx start</span></div></pre></td></tr></table></figure>
<p>这时候在浏览器地址栏输入服务器的 ip 地址，看到下面的页面就表明 Nginx 已经启动了：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/etc_init_d_nginx_start.png" alt="etc_init_d_nginx_start"></p>
<h3 id="安装-uWSGI"><a href="#安装-uWSGI" class="headerlink" title="安装 uWSGI"></a>安装 uWSGI</h3><p>在安装 uWSGI 前，需要解决 uWSGI 的依赖问题，因为 uWSGI 是一个 C 语言写的应用，所以我们需要 C 编译环境，以及 python 开发相关组件：  </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get <span class="keyword">install </span><span class="keyword">build-essential </span>python-dev</div><div class="line">$ sudo pip <span class="keyword">install </span>uwsgi</div></pre></td></tr></table></figure>
<p>到这，我们就安装好了 uWSGI，</p>
<h2 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h2><p>首先，我们把应用程序上传到服务器中，我在用 git 管理项目，这里就用 git clone 来示意一下：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone http:<span class="regexp">//u</span>rl<span class="regexp">/of/y</span>ou<span class="regexp">/git/</span>repo</div></pre></td></tr></table></figure>
<p>如果你需要从本地上传项目文件，可以用 scp, rsync 这样的命令，这里就不啰嗦用法了。总之我们将项目文件放到服务器，就可以用 virtualenv 管理 Python 环境：  </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>virtualenv ENV</div><div class="line"><span class="variable">$ </span>source ENV/bin/activate         <span class="comment"># 激活虚拟环境</span></div><div class="line"><span class="variable">$ </span>pip install -r requirement.txt  <span class="comment"># 解决依赖问题</span></div><div class="line"><span class="variable">$ </span>deactivate 							 <span class="comment"># 退出依赖环境</span></div></pre></td></tr></table></figure>
<p>这里就用 Flask 的 7 行代码做示例吧，我新建了一个文件夹，名为 helloflask，将下面的内容：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5001</span>)</div></pre></td></tr></table></figure>
<p>保存为 hello.py，运行试试，在浏览器输入服务器公网 ip 地址，加端口号 5001 就可以看到结果。</p>
<p>好了，现在我们用 Nginx 来承担 Web 服务。</p>
<p>删掉 Nginx 的默认配置文件：  </p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo rm <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span><span class="keyword">default</span></div></pre></td></tr></table></figure>
<p>有心的话，其实可以从 Nginx 默认配置中了解一些配置参数，当然最靠谱的途径还是看  Nginx 的<a href="http://wiki.nginx.org/Configuration" target="_blank" rel="external">文档</a>。这里只简单尝试 Nginx，下面给出一个简单的配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> your.website.url</div><div class="line">    charset utf-<span class="number">8</span>;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">75M</span>;</div><div class="line">    <span class="attribute">location</span> / &#123; <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@yourapplication</span>; &#125;</div><div class="line">    <span class="attribute">location</span> <span class="variable">@yourapplication</span> &#123;</div><div class="line">        <span class="attribute">include</span> uwsgi_params;</div><div class="line">        <span class="attribute">uwsgi_pass</span> unix:/home/frank/Documents/helloflask/helloflask_uwsgi.sock;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以将上述内容保存为 <code>helloflask_nginx.conf</code>，稍作解释：<code>server_name</code> 可以是域名，也可以写 ip 地址，uwsgi_pass 是表明 Nginx 与 uwsgi 的交流方式，我这里用的是 sock 文件，当然你也可以用指定端口号的形式，具体可以看<a href="http://uwsgi-docs.readthedocs.io/en/latest/Nginx.html" target="_blank" rel="external">这里</a>。将 Nginx 配置文件用软链接链接到 Nginx 配置文件夹中：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s <span class="regexp">/home/</span>frank<span class="regexp">/Documents/</span>helloflask<span class="regexp">/helloflask_nginx.conf /</span>etc<span class="regexp">/nginx/</span>conf.d<span class="regexp">/</span></div></pre></td></tr></table></figure>
<p>重启 Nginx：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx restart</span></div></pre></td></tr></table></figure>
<p>这时刷新一下之前打开的服务器公网 ip（或绑定的域名），这时看到的就不是「Welcome to Nginx」，而是「502 Bad Way」，因为我们还没有启动 uWSGI，现在我们将下面的内容保存为 helloflask_uwsgi.ini(用 xml 的格式也是可以的，具体可以看文档):  </p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#application's base folder</span></div><div class="line"><span class="attr">base</span> = /home/frank/Documents/helloflask</div><div class="line"></div><div class="line"><span class="comment">#python module to import</span></div><div class="line"><span class="attr">app</span> = hello</div><div class="line"><span class="attr">module</span> = %(app)</div><div class="line"></div><div class="line"><span class="attr">home</span> = %(base)/ENV</div><div class="line"><span class="attr">pythonpath</span> = %(base)</div><div class="line"></div><div class="line"><span class="comment">#socket file's location</span></div><div class="line"><span class="attr">socket</span> = /home/frank/Documents/helloflask/%n.sock</div><div class="line"></div><div class="line"><span class="comment">#permissions for the socket file</span></div><div class="line"><span class="attr">chmod-socket</span>    = <span class="number">666</span></div><div class="line"></div><div class="line"><span class="comment">#the variable that holds a flask application inside the module imported at line #6</span></div><div class="line"><span class="attr">callable</span> = app</div><div class="line"></div><div class="line"><span class="comment">#location of log files</span></div><div class="line"><span class="attr">logto</span> = /home/frank/Documents/helloflask/%n.log</div></pre></td></tr></table></figure>
<p>稍稍解释一下，socket 指定的是与 nginx 进行通信的端口文件。其他的参数，如线程数，处理器数等，可以查看文档后进行配置。上面的内容都是可以通过 uwsgi 命令的参数指定的，在命令行中敲入一行命令就可以了，为了「可持续发展」，当然是用文件保存下来比较好。</p>
<p>通过 uwsgi 命令，–ini 参数：  </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uwsgi --ini helloflask_uwsgi<span class="selector-class">.ini</span> &amp;</div></pre></td></tr></table></figure>
<p>指定配置文件，后台运行 uwsgi， 这时再刷新一下之前打开的页面，就可以看到应用正常运行了。</p>
<p>我尝试了在一台服务器上运行多个应用，其实只需要改一下文件名，分别处理 uWSGI 和 Nginx 的配置文件即可（Nginx 的配置，可以写在同一个文件中，写两个 server 就行了）</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h3><p>启动命令：  </p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo nginx</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="regexp">/usr/</span>sbin<span class="regexp">/nginx</span></div></pre></td></tr></table></figure></p>
<p>停止 nginx</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo nginx -s <span class="built_in">stop</span></div></pre></td></tr></table></figure>
<p>平滑启动 nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure>
<p>所谓平滑启动就是在不停止 nginx 的情况下，重启 nginx，重新加载配置文件，用新的工作进程代替旧的工作进程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>曾经玩过 PHP，相比于 PHP 的几乎一键式部署，Python 的部署确实要繁琐很多，但 Python 的强大之处在于语言简洁优雅，毕竟人生苦短，有得便有失，不过我相信这个繁琐是暂时的。  </p>
<p>最后给出的一个简单的示例，其实是不够规范的，比如应用文件应该放在 /var/www/ 下，log 文件应该放到系统的 log 文件夹下等等，这个只是简单示例，更多配置内容，我们应该通过 uWSGI、Nginx 的文档学习。</p>
<p>参考资料：  </p>
<ol>
<li><a href="http://serverfault.com/questions/590819/why-do-i-need-nginx-when-i-have-uwsgi" target="_blank" rel="external">Why do I need nginx when I have uWSGI</a>  </li>
<li><a href="http://www.tianmaying.com/blog/8ab3eda84daf4e54014daf68ff09000b" target="_blank" rel="external">Web开发技术发展历史 </a></li>
<li><a href="http://uwsgi-docs.readthedocs.io/en/latest/" target="_blank" rel="external">uWSGI 文档</a></li>
<li><a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" target="_blank" rel="external">Web Server Gateway Interface</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external">PEP-3333</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04" target="_blank" rel="external">digitalocean tutorials</a></li>
<li><a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface" target="_blank" rel="external">CGI wiki</a></li>
<li><a href="http://wiki.woodpecker.org.cn/moin/WSGI" target="_blank" rel="external">啄木鸟社区 wsgi 介绍</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习 Flask，写了一个 Flask 应用需要部署的时候，就想着折腾自己的服务器。根据搜索的教程照做，对于原理一知半解，磕磕碰碰，只要运行起来了，谢天谢地然后不再折腾了，到下一次还需要部署时，这样的过程就会重复一次。不知道多少人的膝盖中箭了呢？我也这样干过，这么做确实很蠢，所以我决定写一篇 Flask+uwsgi+Nginx+Ubuntu 的部署教程，解答一些我自己在这个过程中的疑问，从原理到方案，以一个小白的角度，总结一下部署、运维这件事，应该对初学 Flask (或其他 Python Web 框架)，从未接触过部署，运维的同学有些帮助。&lt;br&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://knarfeh.github.io/tags/Life/"/>
    
      <category term="Flask" scheme="http://knarfeh.github.io/tags/Flask/"/>
    
      <category term="code" scheme="http://knarfeh.github.io/tags/code/"/>
    
      <category term="uwsgi" scheme="http://knarfeh.github.io/tags/uwsgi/"/>
    
      <category term="Nginx" scheme="http://knarfeh.github.io/tags/Nginx/"/>
    
      <category term="Ubuntu" scheme="http://knarfeh.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>【译】Python 的下划线</title>
    <link href="http://knarfeh.github.io/2016/06/08/%E3%80%90%E8%AF%91%E3%80%91Python%20%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/"/>
    <id>http://knarfeh.github.io/2016/06/08/【译】Python 的下划线/</id>
    <published>2016-06-08T03:05:07.000Z</published>
    <updated>2017-02-01T11:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://shahriar.svbtle.com/underscores-in-python" target="_blank" rel="external">Underscores in Python</a><br><a id="more"></a></p>
<p>这篇博客讨论 Python 的<code>_</code>字符，我们将看到，和 Python 中很多东西一样，下划线很多用法在大多数情况（并不绝对）下是一种惯例。  </p>
<h2 id="单一下划线（"><a href="#单一下划线（" class="headerlink" title="单一下划线（_)"></a>单一下划线（<code>_</code>)</h2><p>有典型的3种情况： </p>
<ol>
<li><p><strong>在解释器中</strong>: <code>_</code> 存放的是交互式解释器会话中上一次执行的语句的结果。这个做法是标准 CPython 解释器最先采用的，其他的解释器也跟着采用了这种方式。  </p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="number">_</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">NameError:</span> name <span class="string">'_'</span> is <span class="keyword">not</span> <span class="keyword">defined</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="number">42</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="number">_</span></div><div class="line"><span class="number">42</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'alright!'</span> if <span class="number">_</span> else <span class="string">':('</span></div><div class="line"><span class="string">'alright!'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="number">_</span></div><div class="line"><span class="string">'alright!'</span></div></pre></td></tr></table></figure>
</li>
<li><p>作为名称(比如<code>_shahriar</code>): 这与上面那点有点联系，<code>_</code>作为临时性的名称使用，别人在读你的代码的时候就会知道，你分配了一个特定的名字，但之后不会再用。举个例子，你对下面循环中的实际值不感兴趣:  </p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">42</span> </div><div class="line"><span class="keyword">for</span> <span class="symbol">_</span> <span class="keyword">in</span> <span class="built_in">range</span>(n): </div><div class="line">    do_something()</div></pre></td></tr></table></figure>
</li>
<li><p>国际化：也许你看过<code>_</code>被当做函数使用，这种情况，通常用于实现国际化和本地化字符串之间的对应关系查找，这个似乎是源自、遵循相应的 C 语言惯例。<br>例如，在<a href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/" target="_blank" rel="external">Diango 翻译文档</a>，你可以看到：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext <span class="keyword">as</span> _</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></div><div class="line">    output = _(<span class="string">"Welcome to my site."</span>)</div><div class="line">    <span class="keyword">return</span> HttpResponse(output)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看到，第2点和第3点是可能冲突的，我们应该避免在国际化查找过程的代码块中同时使用<code>_</code>作为临时名称。</p>
<h2 id="名称前的单下划线（如：-shahriar）"><a href="#名称前的单下划线（如：-shahriar）" class="headerlink" title="名称前的单下划线（如：_shahriar）"></a>名称前的单下划线（如：<code>_shahriar</code>）</h2><p>对于程序员来说，名称以单一下划线开头，表明这个名称属性为私有。这个貌似是惯例，它让其他人（或自己）看到这些代码时知道以<code>_</code>开头的变量是用于内部使用的。正如 Python 文档中所述：  </p>
<blockquote>
<p>以<code>_</code>为前缀的名称（如<code>_spam</code>）应该被视为 API 中非公开的部分（不管是函数、方法还是数据成员）。此时，应该将它们看做实现细节，修改时无需对外部通知。  </p>
</blockquote>
<p>这是一种惯例，因为它对解释器来说确实有一定意义，如果你 <code>from &lt;module/package&gt; import *</code>，以<code>_</code>开头的名称不会被导入，除非模块或包的<code>__all__</code>列表显式地写明了。可以看看<a href="http://shahriar.svbtle.com/importing-star-in-python" target="_blank" rel="external">import * in Python</a>获得更多信息。</p>
<h2 id="名称前的双下划线（如：-shahriar）"><a href="#名称前的双下划线（如：-shahriar）" class="headerlink" title="名称前的双下划线（如： __shahriar）"></a>名称前的双下划线（如： <code>__shahriar</code>）</h2><p>名称（特指方法名）前使用双下划线（<code>__</code>)并不是一种惯例，对解释器来说它有特定的意义。Python <a href="https://en.wikipedia.org/wiki/Name_mangling" target="_blank" rel="external">修饰</a>这些名称用来避免与子类定义的名称冲突，<a href="https://docs.python.org/3.4/tutorial/classes.html#tut-private" target="_blank" rel="external">Python 文档指出</a>，<code>__spam</code>这种形式（至少两个前导下划线，<strong>最多一个后续下划线</strong>）的任何标示符会被<code>_classname__spam</code>这种形式替换，在这里<code>_classname</code>是去掉前缀下划线的当前类名，例如：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">_internal_use</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__method_name</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(A())</div><div class="line">[<span class="string">'_A__method_name'</span>, ..., <span class="string">'_internal_use'</span>]</div></pre></td></tr></table></figure>
<p>正如所预料的，<code>_internal_use</code>并未改变，而<code>__method_name</code>被修饰为<code>_ClassName__method_name</code>，此时，如果你创建一个 A 的子类 B（呃，烂名字，烂名字，烂名字），你就不能轻易重载 A 类的 <code>__method_name</code> 方法了：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__method_name</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(B())</div><div class="line">[<span class="string">'_A__method_name'</span>, <span class="string">'_B__method_name'</span>, ..., <span class="string">'_internal_use'</span>]</div></pre></td></tr></table></figure>
<p>这个行为几乎和 Java 的 final 方法以及 C++ 的标准方法（非虚方法）一样。</p>
<h2 id="名称前后的双下划线（如：-init-）"><a href="#名称前后的双下划线（如：-init-）" class="headerlink" title="名称前后的双下划线（如：__init__）"></a>名称前后的双下划线（如：<code>__init__</code>）</h2><p>这是 Python 的<a href="https://docs.python.org/3.4/reference/datamodel.html#specialnames" target="_blank" rel="external">特殊方法名</a>，其实这是一个惯例，对于 Python 系统来说，它可以确保不会与用户定义的名称冲突，通常情况下，你需要覆盖这些方法，在里面实现你需要的功能，以便 Python 调用它们，例如当写一个类时，你通常需要定义<code>__init__</code>方法。  </p>
<p>没有什么可以阻止你编写你自己的特殊方法名（但，请不要这么做）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__mine__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(C)</div><div class="line"><span class="meta">... </span>[..., <span class="string">'__mine__'</span>, ...]</div></pre></td></tr></table></figure>
<p>尽量离这种方式的命名远一点，只让 Python 内部定义的特殊名称遵循这种方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://shahriar.svbtle.com/underscores-in-python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Underscores in Python&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
      <category term="git" scheme="http://knarfeh.github.io/tags/git/"/>
    
      <category term="Translate" scheme="http://knarfeh.github.io/tags/Translate/"/>
    
  </entry>
  
  <entry>
    <title>记一次游戏通关</title>
    <link href="http://knarfeh.github.io/2016/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%B8%E6%88%8F%E9%80%9A%E5%85%B3/"/>
    <id>http://knarfeh.github.io/2016/06/05/记一次游戏通关/</id>
    <published>2016-06-05T15:33:34.000Z</published>
    <updated>2016-09-16T15:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间发现了 <a href="https://github.com/csu/quora-api" target="_blank" rel="external">quora-api</a> 这个项目，当时心想我应该写个知乎的版本试试，正好可以用用flask，然后因为毕业论文和答辩的事情就一直拖着，现在终于开始动手了。</p>
<a id="more"></a>
<p>稍稍瞄了一眼 <a href="https://github.com/csu/quora-api" target="_blank" rel="external">quora-api</a> 这个项目，发现这个项目跟我想的思路是一样的，写爬虫获得数据，再通过 flask 搭建 api 服务即可，从 commit 的记录来看，quora 的爬虫部分最开始是写在 <a href="https://github.com/csu/quora-api" target="_blank" rel="external">quora-api</a> 里面的，后来作者把这部分分离出去:  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/movepyquora.png" alt="pyquora">  </p>
<p>单独打了一个包：<a href="https://github.com/csu/pyquora" target="_blank" rel="external">pyquora</a>。  </p>
<p>我想我也应该如此，毕竟已经写过不少爬虫了，重点在于熟悉flask，就用现成的吧，把爬虫的部分分离出去，也便于维护。比较了几个关于知乎爬虫的repo，找到了 <a href="https://github.com/7sDream/zhihu-oauth" target="_blank" rel="external">zhihu-oauth</a>，其实 <a href="https://github.com/7sDream" target="_blank" rel="external">7sDream</a> 在新建这个 repo 的时候我就 star 了，但并没有仔细看，现在看来这个并不是简单的爬虫。我从这篇游戏攻略开始了旅程：<a href="http://zhihu-oauth.readthedocs.io/zh_CN/latest/for-dev/oauth/game.html" target="_blank" rel="external">zhihu-oauth-doc</a>  </p>
<p>7sDream 在文档里写着：「本来想的是写一篇博客的，但是果然还是不要太张扬，写在文档里算了」，我却在博客里宣传了，好像不是很道德？嗯，还是不要给自己加那么多束缚吧。我不打算把攻略重写一遍，只是记录一下遇到的坑，反正我的博客基本没人知道，没几个人看，github 对百度搜索引擎做了限制，百度爬取不到，Google 倒是可以，但是用 Google 搜中文资料的也太少了吧？如果影响不好我就删掉这篇。</p>
<p>我照着这篇攻略开始了。攻略里写的准备工作是：  </p>
<blockquote>
<ul>
<li>一台 Android 设备（我用的是 Nexus 7， 6.0.1，CM 13）</li>
<li>一台电脑，系统随意，有 Android studio 最好，没有也行</li>
<li>支持 HTTPS 的抓包工具（我用的是 Android 上的 Packet Capture）</li>
<li>APK 反编译工具（我用的是 jadx）</li>
</ul>
<p>在 Android 设备上安装上知乎客户端，如果已经安装了的话就强行停止， 然后清除数据和缓存。</p>
</blockquote>
<p>手边暂时没有 Android 设备，用的是 iPhone ，在 iPhone 上抓包好像挺麻烦？果断用电脑抓包啊，也便于分析，如果不是抓https协议的内容，只抓http协议的内容，用 Wireshark 就够了，有过这样的尝试，见<a href="http://weibo.com/2753500945/DeXd83CZf?from=page_1005052753500945_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1464658571029" target="_blank" rel="external">这条微博</a>。要保证安全性，APP的数据传输一般会用https，因为可以用ssl层来加密，知乎客户端用的是https。Wireshark 当然可以抓https协议的内容，但抓手机端的就有点麻烦，见<a href="https://imququ.com/post/http2-traffic-in-wireshark.html" target="_blank" rel="external">这篇博客</a>，果断跳过这个坑。我的方案是用 <a href="https://www.charlesproxy.com://www.charlesproxy.com/" target="_blank" rel="external">charles for mac</a> + iPhone。</p>
<p>用 charles 抓取 APP 网络请求的大致步骤是：  </p>
<ul>
<li>手机和电脑连接同一个局域网</li>
<li>在手机端改 http 代理</li>
</ul>
<p>在 Charles的 Proxy Setting 可以看到默认的端口号：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/proxy%20setting.png" alt="Charles Proxy Setting">  </p>
<p>用 ifconfig 查看 mac 的 ip 地址：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/ifconfig%20mac%20ip.png" alt="mac ip"></p>
<p>在手机上改成对应的即可：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/iPhoneproxysetting.jpg" alt="iPhoneproxysetting"></p>
<ul>
<li><p>在手机上需要打开 <a href="http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/" target="_blank" rel="external">legacy-ssl-proxying</a>，安装 SSL 证书</p>
</li>
<li><p>在 Charles SSL Proxying 设置界面打开 ssl 的 抓取：  </p>
</li>
</ul>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/ssl%20proxying%20setting.png" alt="SSL Proxying setting"></p>
<p>与 Wireshark 不同的是，Charles 打开即开始抓包，抓去过程中我遇到一个坑，是编码问题，有不少乱码，搜索了一下，有这样的方案：<a href="http://iam42.iteye.com/blog/2186630" target="_blank" rel="external">使用Charles，在mac环境下对android app抓包</a>，但我的 info.plist 并没有 vmoptions，看来我用的 Charles 比较新，求助 google，最终解决了，info.plist 改动的部分：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/jvmoptions.png" alt="jvmoptions">  </p>
<p>解决了乱码问题。  </p>
<p>实现了抓包，就可以开始分析知乎的 api 到底怎么用了。</p>
<p>在手机上重新登陆，抓取登陆时的网络请求，发送的登陆参数如下：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/login_https.jpg" alt="login_https"></p>
<p>逐个解释这些参数：  </p>
<ul>
<li><p>第一项是 client_id，这是 OAuth 里需要申请的，表明一个应用的 APPID 值，我申请过 twitter 的 api，貌似这个每个 APPID 都应该不一样才对？攻略里写的是 「Android 知乎客户端的这个值应该都是一样的」，看来目前只有两个，一个表明是 Android 端，一个表明是 iOS 端，以后知乎开放了 api 开发者拿到的 id 应该就是唯一的了。  </p>
</li>
<li><p>第二项是授权类型，「password 表示我们通过提供用户账户的密码 来获取用户令牌。其他的方式大概还有 OAuth 登录（就是像微博那样弹个小网页让你登录）， 第三方登录（通过微博，QQ什么的）」</p>
</li>
<li><p>第三项 密码</p>
</li>
<li><p>第四项 请求签名，这个显然是一种加密措施，这个是最难搞的。7sDream 说 「为了破解这个签名，我费了挺大功夫的，大概一晚上加一早上吧」（啊哈哈哈 我不信）</p>
</li>
<li><p>第五项 source，请求来源，目前应该就两种，一个 Android 端，一个 iOS 端</p>
</li>
<li><p>第六项 时间戳，请求签名的加密算法会用到</p>
</li>
<li><p>第七项 用户名，这里我用的是邮箱账号</p>
</li>
</ul>
<p>除了请求签名，其他都是很容易构造的，所以最关键的就是搞定知乎的加密算法了。  </p>
<p>（写到这，真的挺佩服7sDream，貌似是天津大学的大三学生？曾跟他聊过几句，非常有极客风范，而且他还比我小，唉真是惭愧，要好好加油。）  </p>
<p>文档中记录了破解加密算法的过程。总结一下，掌握一定的逆向工程技术是必须的，7sDream 用 jadx 这个工具反编译了知乎的 Android 应用包，找到了 Authorisation.java 中的 createBaseAuthorisation 方法，根据代码尝试，然后推测知乎用的是 Google 推荐的 OAuth 的签名方法，文档在这：<a href="https://developers.google.com/maps/documentation/static-maps/get-api-key#url-" target="_blank" rel="external">get-api-key</a>。思路非常棒，不过他说的「大概一晚上加一早上吧」 我是真的不信。。。。。</p>
<p>搞定加密算法，用程序模拟客户端发送请求即可，可以收到客户端返回的结果：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/login_response.jpg" alt="login_response">  </p>
<p>接下来请求 api 数据的时候只需要加上 access_token 这个值即可获取，例如请求首页的数据：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/zhihu_top_story.png" alt="top_story"></p>
<p>玩到这，游戏基本就通关了。登陆操作其实还有一个隐含关卡，攻略中写了知乎 OAuth 的验证码策略的6点，不知道作者获悉这6点的思路是什么，其实试错的价值也很大，这里需要自己好好研究一下，暂时还没遇到这种情况，遇到了再 hack 一下。</p>
<p>好了，搞定了这些，写代码模拟这个过程就行了。<a href="https://github.com/7sDream/zhihu-oauth" target="_blank" rel="external">zhihu-oauth</a> 的代码基本上就是模拟这个过程。源代码也很有研究价值。</p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>这份攻略干货十足，它完整地记录了如何破解手机应用 api ，我想不仅仅是知乎，对于其他的应用，比如quora 啊，豆瓣等，都可以借鉴这种思路。这里面大概有这么一些技能点：http 传输协议，逆向工程能力，基本加密方法和应用，都值得更进一步学习。  </p>
<p>说起来，不知道那些快30，快40的老一辈程序员会不会不屑于干这种事情，这种事当然算不上光彩，是破坏商业规则的行为，触碰了商业公司的利益，但我觉得非常有意思，这种探索让我感到兴奋，希望自己在30、40岁的时候仍然可以保持这种钻研精神。  </p>
<p>接下来的计划是：好好读读 <a href="https://github.com/7sDream/zhihu-oauth" target="_blank" rel="external">zhihu-oauth</a> 的源代码，利用 <a href="https://github.com/7sDream/zhihu-oauth" target="_blank" rel="external">zhihu-oauth</a> 的功能实现与<a href="https://github.com/csu/quora-api" target="_blank" rel="external">quora-api</a> 类似的知乎的版本（repo 地址在<a href="https://github.com/knarfeh/zhihu-api" target="_blank" rel="external">这</a>），再接下来，我大概会把 <a href="http://github.com/knarfeh/EE-Book" target="_blank" rel="external">EE-Book</a> 中知乎爬虫的部分去掉，改用已经破解的知乎api，再接下来，还有什么好玩的事情呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间发现了 &lt;a href=&quot;https://github.com/csu/quora-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;quora-api&lt;/a&gt; 这个项目，当时心想我应该写个知乎的版本试试，正好可以用用flask，然后因为毕业论文和答辩的事情就一直拖着，现在终于开始动手了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hacking" scheme="http://knarfeh.github.io/tags/hacking/"/>
    
  </entry>
  
  <entry>
    <title>编码问题小结</title>
    <link href="http://knarfeh.github.io/2016/05/22/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
    <id>http://knarfeh.github.io/2016/05/22/编码问题小结/</id>
    <published>2016-05-22T02:21:26.000Z</published>
    <updated>2017-08-08T02:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><a id="more"></a>
<blockquote>
<p>If you’re like most Python programmers, you’ve done it too: you’ve built a nice application, and everything seemed to be going fine. Then one day an accented character appeared out of nowhere, and your program started belching UnicodeErrors.</p>
<p>You kind of knew what to do with those, so you added an encode or a decode where the error was raised, but the UnicodeError happened somewhere else. You went to the new place, and added a decode, maybe an encode. After playing whack-a-mole like this for a while, the problem seemed to be fixed.</p>
<p>Then a few days later, another accent appeared in another place, and you had to play a little bit more whack-a-mole until the problem finally stopped.</p>
</blockquote>
<p>翻译 →_→</p>
<blockquote>
<p>如果你和其他程序员一样，那你肯定也碰到如下情况了：你写了一个不错的应用，而且程序运行地很不错。然而某一天一个很奇怪的「方言字符」不知道从哪里冒出来了，然后你的程序出现了一堆的UnicodeErrors。  </p>
<p>你好像知道这种问题如何解决，于是你在错误的地方添加了encode，decode，但UnicodeError又出现在了其他地方。你在另一个地方又加上了decode，encode，一番「打地鼠」游戏之后，问题似乎被解决了。  </p>
<p>又过了几天，另一种”方言字符”又在另外一个地方出现了。然后你又玩起了打地鼠的游戏，直到问题不再出现。</p>
</blockquote>
<p>—— 来自Pycon2012，演讲主题：<a href="https://www.youtube.com/watch?v=sgHbC6udIqc&amp;feature=youtu.be" target="_blank" rel="external">Pragmatic Unicode, or, How do I stop the pain?</a> ，演讲人Ned Batchelder</p>
<p>感觉膝盖上中了无数箭。Python2 的这个让人头疼的编码问题，其实已经足够成为换 python3 的理由了，然而 python2 在很长一段时间内还是会继续<a href="http://pythonclock.org/" target="_blank" rel="external">发挥余热</a>。不仅仅是python，我们在 C/C++，Java 中都遇到过编码问题，就算不用 Python2 了，如果不懂得原理，迁移到 python3 或其他语言的时候遇到编码问题还是会抓瞎。我不想遇到编码问题时就玩「打地鼠」的游戏，我也不想避过这个问题不谈，10年后再总结这个问题写一篇「完全攻略」，我要依据仅有的一点经验和资料从原理到策略写一篇关于 python2 编码问题的小结。如有谬误，欢迎指正；如有疑问，欢迎讨论。</p>
<h2 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h2><p>要搞明白这个问题，我们首先得知道编码是什么？我们知道数据在计算机中是以二进制存储的，而我们在现实世界使用的是人类可读的字符，比如「1, 2, 3, … A, B, C, 」, 「一，二，三，四」这些，我们需要把字符集的字符与二进制数对应起来，以便文本在计算机中存储、在交互界面显示、在通信网络中传输，这个就是编码。</p>
<h3 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h3><p>ASCII码是美国制定的一套字符编码。1967年，美国发布了 ASCII 的标准，在1986年进行了最后一次更新，下图是 ASCII 编码表：</p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/asc%C4%B1%C4%B1.png" alt="ASCII"></p>
<p>ASCII 定义了128个字符的编码。利用1个字节，也就是8个二进制位，ASCII 编码只规定了128个字符的编码，最高位始终是0。</p>
<h3 id="非-ASCII-码"><a href="#非-ASCII-码" class="headerlink" title="非 ASCII 码"></a>非 ASCII 码</h3><p>ASCII 显然是有局限性的，除去32个不能显示的控制字符，只能显示26个拉丁字母，10个阿拉伯数字以及一些英文标点符号，不说非英语系国家的感受，就是英语系国家在使用带注音符号的外来词时都得妥协。后来一些欧洲国家陆续采用新的编码方式，基于 ASCII，但把闲置的最高位利用起来，可以多表示一些字符。这些编码方式中，0-127表示的符号一样，与 ASCII 兼容，128-255这一段是不同的。在亚洲国家，比如中文，日文，不用拉丁字母，用128个比特表示字符肯定是不够的，于是使用多个字节表示一个字符，中国广泛使用的编码是GB 2312，每个汉字及符号以两个字节表示，共收录6763个汉字，但对于一些罕用字和繁体字，GB 2312并不能处理，因此后来相继出现GBK及GB 18030汉字字符集。可以想象，在那个阶段，各种编码方式是蓬勃发展的。</p>
<h3 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h3><p>编码方式越来越多，世界的交流越来越频繁，没有统一的编码方式给我们造成了很多麻烦，比如发一份电子邮件，如果写信的客户端和收信的客户端没有采用同样的编码就会产生乱码，一个文本文件，在不同平台上编辑也会产生乱码，Unicode（又称万国码、国际码、统一码、单一码）应运而成，这是一种可以容纳世界上所有文字和符号的方案，通过这个字符集，世界上的所有字符都可以拥有一个唯一的二进制表示方法。需要注意的是，Unicode 只规定了编码方式，并没有规定实现方式，怎么理解呢，要知道 Unicode 能表示那么多字符，要占的字节可比 ASCII 编码方式多多了，这当然就不实际了，毕竟在 ASCII 中英文字母只需要一个字节表示，如果 Unicode 的实现方式规定所有字符所占字节相同，那就太浪费硬盘和流量了。以往大家都是把字符集和编码方案混淆在一起的，从 Unicode 开始，人们意识到这两个东西完全是可以分开的，这个时候慢慢出现了 Unicoode 的各种<strong>实现方式</strong>，其中 utf-8(Unicode/UCS Transformation Format) 是最常用的，它是一种变长的编码方式，一个字符的字节数可能是1至6个字节，现在已经标准化为 <a href="https://tools.ietf.org/html/rfc3629" target="_blank" rel="external">RFC 3629</a>。它有两个特点：  </p>
<ul>
<li><p>对于 ASCII 编码来说，字符用一个字节表示，utf-8 对于在 ASCII 码的范围内的字符，也用一个字节表示，不浪费存储空间，具体表现为，单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码，这与 ASCII 码是一样的。</p>
</li>
<li><p>字符的范围大于 ASCII 码表范围的，由第一个字节的前几位表示该 Unicode 字符的长度，后面字节的前两位是10，其他部分都是用来区分字符的 Unicode 编码。</p>
</li>
</ul>
<p>Unicode 和 utf-8 之间的转换关系表如下（来自<a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">wiki</a>）：</p>
<table>
<thead>
<tr>
<th>码点的位数</th>
<th>码点起值</th>
<th>码点终值</th>
<th>字节序列</th>
<th>Byte 1</th>
<th>Byte 2</th>
<th>Byte 3</th>
<th>Byte 4</th>
<th>Byte 5</th>
<th>Byte 6</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>U+0000</td>
<td>U+007F</td>
<td>1</td>
<td><code>0xxxxxxx</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>U+0080</td>
<td>U+07FF</td>
<td>2</td>
<td><code>110xxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>16</td>
<td>U+0800</td>
<td>U+FFFF</td>
<td>3</td>
<td><code>1110xxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>21</td>
<td>U+10000</td>
<td>U+1FFFFF</td>
<td>4</td>
<td><code>11110xxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>26</td>
<td>U+200000</td>
<td>U+3FFFFFF</td>
<td>5</td>
<td><code>111110xx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td></td>
</tr>
<tr>
<td>31</td>
<td>U+4000000</td>
<td>U+7FFFFFFF</td>
<td>6</td>
<td><code>1111110x</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
<td><code>10xxxxxx</code></td>
</tr>
</tbody>
</table>
<p>各种编码之间的转换可以通过程序实现，windows 平台下的不少大牛喜欢用记事本写代码，有一部分原因就是因为记事本的编码转换简洁明了。基本所有编辑器和 IDE 的都提供这样的功能，这里不再赘述。</p>
<h2 id="0x02-Python2-中的-str-和-unicode"><a href="#0x02-Python2-中的-str-和-unicode" class="headerlink" title="0x02 Python2 中的 str 和 unicode"></a>0x02 Python2 中的 str 和 unicode</h2><p>Python 从1.6版本开始引入了 Unicode 支持。python2 和 python3 关于字符串的存储方式是不同的，这里我们只讨论 python2，首先要清楚的是，在 Python2 中，有两种字符串数据类型，一种是 str（byte string） 类型，存储的是已经编码后的字节序列，如果输出，我们看到的是16进制的字节：  </p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [1]: my_str = 'Hello, 这是中文'</div><div class="line"></div><div class="line">In [2]: my_str</div><div class="line">Out[2]: 'Hello, <span class="symbol">\x</span>e8<span class="symbol">\x</span>bf<span class="symbol">\x</span>99<span class="symbol">\x</span>e6<span class="symbol">\x</span>98<span class="symbol">\x</span>af<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87'</div><div class="line"></div><div class="line">In [3]: type(my_str)</div><div class="line">Out[3]: str</div></pre></td></tr></table></figure>
<p>另一种是 Unicode (unicode string) 类型，存储的是 code points，str 和 Unicode 有什么关系呢？它们都是 basestring 的子类，但我们必须好好区分，这是解决乱码问题的关键，它们是可以相互转换的，如：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">4</span>]: my_unicode = <span class="string">u'Hello, 这是中文'</span></div><div class="line"></div><div class="line">In [<span class="number">5</span>]: my_unicode</div><div class="line">Out[<span class="number">5</span>]: <span class="string">u'Hello, \u8fd9\u662f\u4e2d\u6587'</span></div><div class="line"></div><div class="line">In [<span class="number">6</span>]: my_unicode.encode(<span class="string">'utf-8'</span>)</div><div class="line">Out[<span class="number">6</span>]: <span class="string">'Hello, \xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\xad\xe6\x96\x87'</span></div><div class="line"></div><div class="line">In [<span class="number">7</span>]: my_str.decode(<span class="string">'utf-8'</span>)</div><div class="line">Out[<span class="number">7</span>]: <span class="string">u'Hello, \u8fd9\u662f\u4e2d\u6587'</span></div></pre></td></tr></table></figure>
<p>用一张图可以说明它们的转换方法：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/python-str-unicode.png" alt="str-unicode"></p>
<center>图1</center>  

<p>unicode 转换成 str 类型，用 encode() 方法，用参数指定编码类型，str 转换为 unicode，根据 str 的编码类型指定解码类型，通过 decode() 函数解码。（吐槽一句，有的博客写 python 编码问题，连 encode， decode 的中文翻译都写错，唉）</p>
<p>下面讲解一下常见的错误，通过例子中理解 python2 对于编码的处理方式：  </p>
<p>我们把明显超出 ascii 编码的 unicode 用 encode 函数编码为 ascii 码：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">8</span>]: my_unicode</div><div class="line"><span class="keyword">Out</span>[<span class="number">8</span>]: u<span class="symbol">'Hello</span>, \u8fd9\u662f\u4e2d\u6587'</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">9</span>]: my_unicode.encode(<span class="symbol">'ascii</span>')</div><div class="line"><span class="comment">---------------------------------------------------------------------------</span></div><div class="line">UnicodeEncodeError                        Traceback (most recent call last)</div><div class="line">&lt;ipython-input-<span class="number">9</span>-<span class="number">26</span>dbddc072f5&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line"><span class="comment">----&gt; 1 my_unicode.encode('ascii')</span></div><div class="line"></div><div class="line">UnicodeEncodeError: <span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> encode characters <span class="keyword">in</span> position <span class="number">7</span>-<span class="number">10</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</div></pre></td></tr></table></figure></p>
<p>抛出异常是 UnicodeEncodeError， codec（编码、解码器）表示不能将这段 unicode 编码为 ascii 码，因为有字符超出了 ascii 的范围，这是显然的，根据上一节的背景知识可以知道， ascii 码这么小一张表是不能存放中文字符的。</p>
<p>将 utf-8 编码指定 ascii 编码解码为 unicode：  </p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">10</span>]: my_str</div><div class="line"><span class="keyword">Out</span>[<span class="number">10</span>]: <span class="symbol">'Hello</span>, \xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\xad\xe6\x96\x87'</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">11</span>]: my_str.decode(<span class="symbol">'ascii</span>')</div><div class="line"><span class="comment">---------------------------------------------------------------------------</span></div><div class="line">UnicodeDecodeError                        Traceback (most recent call last)</div><div class="line">&lt;ipython-input-<span class="number">11</span>-<span class="number">9</span>ad191183111&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line"><span class="comment">----&gt; 1 my_str.decode('ascii')</span></div><div class="line"></div><div class="line">UnicodeDecodeError: <span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> decode byte <span class="number">0</span>xe8 <span class="keyword">in</span> position <span class="number">7</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</div></pre></td></tr></table></figure>
<p>抛出异常时 UnicodeDecodeError，因为 ascii 只接受128以内的值。实际上 utf-8 只能通过指定 utf-8 类型解码为 unicode，但 ascii 可以通过指定 utf-8 类型解码为 unicode，因为 utf-8 包含了 ascii，如：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">17</span>]: my_unicode_for_asc = <span class="string">u'test'</span></div><div class="line"></div><div class="line">In [<span class="number">18</span>]: my_asc = my_unicode_for_asc.encode(<span class="string">'ascii'</span>)</div><div class="line"></div><div class="line">In [<span class="number">19</span>]: my_utf8_unicode = my_asc.decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">In [<span class="number">20</span>]: my_utf8_unicode</div><div class="line">Out[<span class="number">20</span>]: <span class="string">u'test'</span></div></pre></td></tr></table></figure>
<p>回到抛出异常的问题，如果我们处理抛出异常，可以指定handler，如：  </p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">24</span>]: my_unicode</div><div class="line"><span class="keyword">Out</span>[<span class="number">24</span>]: u<span class="symbol">'Hello</span>, \u8fd9\u662f\u4e2d\u6587'</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">25</span>]: my_unicode.encode(<span class="symbol">'ascii</span>')</div><div class="line"><span class="comment">---------------------------------------------------------------------------</span></div><div class="line">UnicodeEncodeError                        Traceback (most recent call last)</div><div class="line">&lt;ipython-input-<span class="number">25</span>-<span class="number">26</span>dbddc072f5&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line"><span class="comment">----&gt; 1 my_unicode.encode('ascii')</span></div><div class="line"></div><div class="line">UnicodeEncodeError: <span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> encode characters <span class="keyword">in</span> position <span class="number">7</span>-<span class="number">10</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">26</span>]: my_unicode.encode(<span class="symbol">'ascii</span>', <span class="symbol">'replace</span>')</div><div class="line"><span class="keyword">Out</span>[<span class="number">26</span>]: <span class="symbol">'Hello</span>, ????'</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">27</span>]: my_unicode.encode(<span class="symbol">'ascii</span>', <span class="symbol">'ignore</span>')</div><div class="line"><span class="keyword">Out</span>[<span class="number">27</span>]: <span class="symbol">'Hello</span>, '</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">28</span>]: my_unicode.encode(<span class="symbol">'ascii</span>', <span class="symbol">'xmlcharrefreplace</span>')</div><div class="line"><span class="keyword">Out</span>[<span class="number">28</span>]: <span class="symbol">'Hello</span>, &amp;#<span class="number">36825</span>;&amp;#<span class="number">26159</span>;&amp;#<span class="number">20013</span>;&amp;#<span class="number">25991</span>;'</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">29</span>]: my_unicode.encode(<span class="symbol">'ascii</span>', <span class="symbol">'backslashreplace</span>')</div><div class="line"><span class="keyword">Out</span>[<span class="number">29</span>]: <span class="symbol">'Hello</span>, \\u8fd9\\u662f\\u4e2d\\u6587'</div></pre></td></tr></table></figure>
<p>你可以通过几种方式处理编码时的异常问题，这部分可以查看 python2 的<a href="https://docs.python.org/2.7/library/stdtypes.html?highlight=encode#str.encode" target="_blank" rel="external">文档</a>。同理，你也可以在解码的时候指定异常处理方式，是忽略不能解码的部分还是替换成其他字符，可以根据实际选择，看文档吧，这里不再赘述。</p>
<h2 id="0x03-解决方案"><a href="#0x03-解决方案" class="headerlink" title="0x03 解决方案"></a>0x03 解决方案</h2><p>实际上，清楚上面的图1之后，应该就清楚遇到这类情况应该怎么处理了，比如我要抓取一个网页，从 html 文件的代码中找到：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>嗯，这个 html 页面的代码是 utf-8 编码的，而我要写入数据的文件格式是 gbk 编码，正确的处理方法是：  </p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">unicode_str</span> = html_content.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="attr">file_content</span> = unicode_str.encode(<span class="string">'gbk'</span>)</div></pre></td></tr></table></figure>
<p>同样的，当我们需要从 ascii 编码的文件中读取数据，输出到默认编码为 utf-8 的终端时：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">unicode_str</span> = file_content.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="attr">print_content</span> = unicode_str.encode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>最后总结一下吧，处理 python2 的编码问题，首先你需要清楚的是数据来源和数据去向的编码，再以 unicode 作为中介，搞清楚 decode 和 encode 的作用，就不用再玩「打地鼠」的游戏了。  </p>
<p>最后给出一个具体的实践方案，实际上与 <a href="https://www.youtube.com/watch?v=sgHbC6udIqc&amp;feature=youtu.be" target="_blank" rel="external">Pragmatic Unicode, or, How do I stop the pain?</a> 的思路是一样的，按照视屏中的提法，最重要的是在程序中构造一个 unicode 三明治。</p>
<p>具体步骤：首先在 python 文件头部声明选用字符集： </p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure>
<p>作用是告诉 Python 解释器，按照 utf-8 编码读取源代码，使得该 python 文件支持中文字符串、中文注释（当然也就可以支持其他语言），用某些编辑器中保存该文件时会根据这个头部的编码确定文件的编码。</p>
<p>其次，在程序入口处设置字符串自动转换时的默认编码：  </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line"><span class="function"><span class="title">reload</span><span class="params">(sys)</span></span></div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>这个怎么理解呢？这个要从一个例子说起，在 python2 中，我们要将一个 unicode 和一个 str 串合并起来，python 是会自动帮你将 str 解码的，但默认的编码是 ascii 编码，就像下面的情况：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">11</span>]: test = <span class="string">u'test'</span> + <span class="string">'中文'</span></div><div class="line">---------------------------------------------------------------------------</div><div class="line">UnicodeDecodeError                        Traceback (most recent call last)</div><div class="line">&lt;ipython-input-<span class="number">11</span>-<span class="number">518</span>e0d33fd35&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line">----&gt; <span class="number">1</span> test = <span class="string">u'test'</span> + <span class="string">'中文'</span></div><div class="line"></div><div class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<p><code>test = u&#39;test&#39; + &#39;中文&#39;</code> 这个连接部分就等同于：  </p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">13</span>]: test = <span class="string">u'test'</span> + <span class="string">'中文'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line">---------------------------------------------------------------------------</div><div class="line">UnicodeDecodeError                        Traceback (most recent call last)</div><div class="line">&lt;ipython-input-<span class="number">13</span>-bda4e952bf48&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line">----&gt; <span class="number">1</span> test = <span class="string">u'test'</span> + <span class="string">'中文'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"></div><div class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<p>我们通过上面的三行代码改变了 python 的「智能化」操作，设置utf-8为默认编码后，问题就不会再出现了(关于为什么在 <code>sys.setdefaultencoding(&#39;UTF-8&#39;)</code> 之前要 <code>reload(sys)</code>，可以参考这篇<a href="http://liguangming.com/how-to-use-utf-8-with-python" target="_blank" rel="external">博客</a>，查了一下，在早期的版本中，是没有<code>del sys.setdefaultencoding</code>这一行的，所以不用 <code>reload(sys)</code>，但如果用比较新的 python2 版本就需要加上这行)：   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> sys</div><div class="line"></div><div class="line">In [<span class="number">15</span>]: reload(sys)</div><div class="line">&lt;module <span class="string">'sys'</span> (built-<span class="keyword">in</span>)&gt;</div><div class="line"></div><div class="line">In [<span class="number">16</span>]: sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">In [<span class="number">17</span>]: test = <span class="string">u'test'</span> + <span class="string">'中文'</span></div><div class="line"></div><div class="line">In [<span class="number">18</span>]: <span class="keyword">print</span> test</div><div class="line">test中文</div></pre></td></tr></table></figure>
<p>加上这三行代码是为了之后操作的方便，理解了原理，不加也是可以的，只是遇到字符串连接时稍加注意就是了。  </p>
<p>最后，在写代码的过程中，遵守一个原则，构造 unicode 三明治状态，在程序中处理的所有字符串都以 unicode 存储，如果有外部输入，读文件也好，从数据库中取数据也好，根据输入数据编码 decode 为 unicode 类型，比如从命令行输入，就可以用<code>sys.stdin.encoding</code>获得输入时的编码，输出时，根据输出的内容的编码，encode 为对应编码即可，始终保持程序中处理的的字符串数据为 unicode，这样基本上就不会有问题了。 </p>
<p>看过一些源代码，我发现其实这种方式正在慢慢成为默认的规范，好几个开源项目的源代码中都采用这个做法，比如 BeautifulSoup库用的就是这种方式：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#making-the-soup" target="_blank" rel="external">https://www.crummy.com/software/BeautifulSoup/bs4/doc/#making-the-soup</a>   </p>
<p>我想这个问题可以告一段落了。</p>
<p>参考：</p>
<p>[0]. <a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="external">https://zh.wikipedia.org/wiki/ASCII</a><br>[1]. <a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="external">https://zh.wikipedia.org/wiki/UTF-8</a><br>[2]. <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="external">https://en.wikipedia.org/wiki/Unicode</a><br>[3]. <a href="https://www.youtube.com/watch?v=sgHbC6udIqc&amp;feature=youtu.be" target="_blank" rel="external">https://www.youtube.com/watch?v=sgHbC6udIqc&amp;feature=youtu.be</a><br>[4]. <a href="https://gist.github.com/x7hub/178c87f323fbad57ff91" target="_blank" rel="external">https://gist.github.com/x7hub/178c87f323fbad57ff91</a><br>[5]. <a href="http://blog.csdn.net/hherima/article/details/8655200" target="_blank" rel="external">http://blog.csdn.net/hherima/article/details/8655200</a><br>[6]. <a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br>[7]. <a href="https://www.zhihu.com/question/23374078" target="_blank" rel="external">https://www.zhihu.com/question/23374078</a><br>[8]. <a href="https://www.zhihu.com/question/40870506" target="_blank" rel="external">https://www.zhihu.com/question/40870506</a><br>[9]. <a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000</a><br>[10]. <a href="http://www.cnblogs.com/huxi/articles/1897271.html" target="_blank" rel="external">http://www.cnblogs.com/huxi/articles/1897271.html</a><br>[11]. <a href="http://www.pconline.com.cn/pcedu/empolder/gj/other/0505/616631.html" target="_blank" rel="external">http://www.pconline.com.cn/pcedu/empolder/gj/other/0505/616631.html</a><br>[12]. <a href="https://segmentfault.com/q/1010000002438151" target="_blank" rel="external">https://segmentfault.com/q/1010000002438151</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
      <category term="Reading" scheme="http://knarfeh.github.io/tags/Reading/"/>
    
      <category term="Unicode" scheme="http://knarfeh.github.io/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>Python 修饰器</title>
    <link href="http://knarfeh.github.io/2016/05/11/Python%20%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://knarfeh.github.io/2016/05/11/Python 装饰器/</id>
    <published>2016-05-11T13:40:38.000Z</published>
    <updated>2017-04-29T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>稍稍多接触一些 Python 代码，就避不开修饰器的使用。比如在 <a href="http://flask.pocoo.org/" target="_blank" rel="external">flask</a> 中，不可避免地就会遇到 <code>@login_required</code>, <code>@app.route(&quot;/&quot;)</code> 这样的代码，这个就是 Python 的修饰器。<br><a id="more"></a></p>
<p>在 Python 中，函数是对象，函数对象可以赋值给变量，因此，通过变量可以调用这个函数：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">6</span>]: <span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">   ...:     <span class="keyword">print</span> <span class="string">"12:00"</span></div><div class="line">   ...:</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: f=now</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: f()</div><div class="line"><span class="number">12</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<p>我们知道，函数对象中有一个属性 <code>__name__</code>，我们可以通过它拿到函数的名称：  </p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">9</span>]: now.__name__</div><div class="line"><span class="keyword">Out</span>[<span class="number">9</span>]: <span class="symbol">'now</span>'</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">10</span>]: f.__name__</div><div class="line"><span class="keyword">Out</span>[<span class="number">10</span>]: <span class="symbol">'now</span>'</div></pre></td></tr></table></figure>
<p>现在我们有个 now 函数了。目前我们有一个这样的需求，我想要在代码中得到执行 now 函数的日志，例如输出运行前，运行后打印时间戳等等，但是，now 函数是不能修改的(因为项目中这种类似的代码非常多，如果改动的话引入 bug 的可能性非常大)，我们需要在代码运行期间动态给函数增加功能，这时候修饰器（decorator）就派上用场了。 我们可以用装饰器来装饰原有的函数，以实现不修改原函数却能增强原函数功能。</p>
<p>本质上，修饰器（decorator）是一个返回函数的高阶函数，利用装饰器，我们可以这样实现上面提到的日志函数：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call %s():'</span> % func.__name__</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure>
<p>修饰器函数以修饰的函数作为参数，并且返回一个函数，上面的代码运行结果是：  </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python testdecorator.py</div><div class="line">$ <span class="keyword">call</span> <span class="keyword">now</span>():</div><div class="line">$ this <span class="keyword">is</span> <span class="keyword">now</span></div></pre></td></tr></table></figure>
<p>实际等同于：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call %s():'</span> % func.__name__</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line">new_now = log(now)</div><div class="line">new_now()</div></pre></td></tr></table></figure>
<p>这两段代码输出的结果是一样的。log 函数是一个修饰器，返回的是一个函数，因此，now()函数仍然存在，现在是同名的 now 变量指向了这个函数，用 now() 就能调用这个函数，即 log() 返回的 wrapper() 函数，wrapper 的参数定义是 <code>*args, **kwargs</code>， 因此可以接受任何参数，如果修饰器本身也需要参数，则需要编写一个返回 decorator 的高阶函数，如：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'%s %s():'</span> % (text, func.__name__)</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('run!!!')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure>
<p>输出结果为：  </p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python testdecorator.py</div><div class="line"><span class="keyword">run</span><span class="bash">!!! now():</span></div><div class="line">this is now</div></pre></td></tr></table></figure>
<p>上面的代码就相当于：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ cat testdecorator.py</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'%s %s():'</span> % (text, func.__name__)</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line"></div><div class="line">new_now = log(<span class="string">"run!!!"</span>)(now)</div><div class="line">new_now()</div></pre></td></tr></table></figure>
<p>实际上就相当于，先执行 <code>log(&quot;run!!!&quot;)</code>，返回 <code>decorator</code> 函数，此时参数是 <code>now</code>，输出了 <code>run!!!now()</code>, 返回了 <code>wrapper</code>，即 <code>now</code> 函数，通过 <code>new_now()</code> 的调用，输出了 <code>this is now</code>。  </p>
<p>但是这里还有一个问题，前面讲到，函数有 <code>__name__</code> 属性，但是经过装饰器装饰器之后的函数，<code>__name__</code> 已经从原来的 <code>now</code> 变成了 <code>wrapper</code>:  </p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">1</span>]: <span class="keyword">from</span> testdecorator import now</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">2</span>]: now.__name__</div><div class="line"><span class="keyword">Out</span>[<span class="number">2</span>]: <span class="string">'wrapper'</span></div></pre></td></tr></table></figure>
<p>这是因为返回的那个 <code>decorator</code> 函数名字就是 <code>decorator</code>， 这个问题很有解决的必要，否则有些依赖函数签名的代码就会出错，我们需要把原始代码的 <code>__name__</code> 复制到 <code>wrapper()</code> 函数中，用 Python 内置的 <code>functiontools.wraps</code> 就能解决这个问题。上面的两段代码的装饰器可以分别修改为：   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call %s():'</span> % func.__name__</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'%s %s():'</span> % (text, func.__name__)</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('run!!!')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure>
<p>写到这里，Python 装饰器的套路基本上就很清晰了。</p>
<p>最后，留下两个示例：  </p>
<ul>
<li>编写一个 decorator，能在函数调用的前后打印出 ‘begin call’ 和 ‘end call’ 的日志。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'begin call: '</span> + func.__name__</div><div class="line">            func(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'end call: '</span> + func.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('run!!!')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u"this is now"</span></div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure>
<ul>
<li>编写一个 decorator， 使之支持：  </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>这里的难点在于，当我们用 log 修饰 f() 这个函数式，实际上上面的两种情况就相当于 <code>new_f = log(f), new_f()</code>和 <code>new_f = log(&#39;execute&#39;)(f), new_f()</code>, 因此我们需要判断 log 中的参数是否是一个函数</p>
<p>可以利用 callable 判断参数是否是函数，答案：     </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="keyword">if</span> callable(text):</div><div class="line"><span class="meta">        @functools.wraps(text)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'begin call: '</span> + text.__name__</div><div class="line">            text(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'end call: '</span> + text.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">            @functools.wraps(func)</span></div><div class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">                <span class="keyword">print</span> <span class="string">'begin call: '</span> + text</div><div class="line">                func(*args, **kwargs)</div><div class="line">                <span class="keyword">print</span> <span class="string">'end call: '</span> + text</div><div class="line">            <span class="keyword">return</span> wrapper</div><div class="line">        <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span>  <span class="title">now1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'doing1...'</span></div><div class="line"></div><div class="line"><span class="meta">@log('text')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'doing2...'</span></div><div class="line"></div><div class="line">now1()</div><div class="line">now2()</div></pre></td></tr></table></figure>
<ul>
<li>编写一个 decorator，使之支持自定义被装饰的方法的重试次数</li>
</ul>
<p>这种需求可能比较常见，例如我们可能遇到这样的场景：某个方法是用来发送邮件的，邮件服务器不一定稳定，我们需要实现一个重试该方法的策略，连接不上服务器的时候可以重试几次，为了追求轻量级，不能使用 celery 这样的框架，这时我们就可以通过装饰器来解决：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> system</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_exc_handler</span><span class="params">(tries_remaining, exception, delay)</span>:</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_exc_handler</span><span class="params">(tries_remaining, exception, delay)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        default exception handler</div><div class="line">        """</div><div class="line">        print((<span class="string">"[default_exc_handler] Caught '%s', %d tries remaining, "</span></div><div class="line">                      <span class="string">"sleeping for %s seconds"</span>) % (exception, tries_remaining, delay))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">retries</span><span class="params">(max_tries, delay=<span class="number">1</span>, backoff=<span class="number">2</span>, exceptions=<span class="params">(Exception,)</span>, hook=None)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            mydelay = delay</div><div class="line">            tries = range(max_tries)</div><div class="line">            tries.reverse()</div><div class="line">            <span class="keyword">for</span> tries_remaining <span class="keyword">in</span> tries:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                   <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">                <span class="keyword">except</span> exceptions <span class="keyword">as</span> e:</div><div class="line">                    <span class="keyword">if</span> tries_remaining &gt; <span class="number">0</span>:</div><div class="line">                        <span class="keyword">if</span> hook <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                            hook(tries_remaining, e, mydelay)</div><div class="line">                        sleep(mydelay)</div><div class="line">                        mydelay = mydelay * backoff</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="keyword">raise</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> f2</div><div class="line">    <span class="keyword">return</span> dec</div></pre></td></tr></table></figure>
<p> 一份简单的测试代码是：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">   <span class="comment"># @retries(max_tries=2, delay=1, backoff=2)</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">test_print</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">       print(<span class="string">"test"</span>)</div><div class="line">       <span class="keyword">raise</span> Exception</div><div class="line"></div><div class="line">   test_print()</div></pre></td></tr></table></figure>
<p>参考：<a href="https://gist.github.com/n1ywb/2570004" target="_blank" rel="external">https://gist.github.com/n1ywb/2570004</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;稍稍多接触一些 Python 代码，就避不开修饰器的使用。比如在 &lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flask&lt;/a&gt; 中，不可避免地就会遇到 &lt;code&gt;@login_required&lt;/code&gt;, &lt;code&gt;@app.route(&amp;quot;/&amp;quot;)&lt;/code&gt; 这样的代码，这个就是 Python 的修饰器。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
      <category term="code" scheme="http://knarfeh.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>PyCallGraph一览</title>
    <link href="http://knarfeh.github.io/2016/04/26/PyCallGraph%20%E4%B8%80%E8%A7%88/"/>
    <id>http://knarfeh.github.io/2016/04/26/PyCallGraph 一览/</id>
    <published>2016-04-26T13:40:38.000Z</published>
    <updated>2016-09-16T15:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>premature optimization is the root of all evil   </p>
</blockquote>
<a id="more"></a>
<p>by Donald Knuth</p>
<p>最近在尝试重构<a href="http://www.github.com/knarfeh/EE-Book" target="_blank" rel="external">EE-Book</a>，每过一段时间看以前写的代码是一件很有意思的事情，这是跟愚蠢的自己沟通的过程，显然这也是进步的过程。</p>
<p>扯远了，这一篇是要总结+介绍一款分析源代码的工具。在分析<a href="http://www.github.com/knarfeh/EE-Book" target="_blank" rel="external">EE-Book</a>代码的过程中，我发现了两款工具，一款是<a href="https://www.logilab.org/blogentry/6883" target="_blank" rel="external">Pyreverse</a>，另一款是PyCallGraph。<a href="https://www.logilab.org/blogentry/6883" target="_blank" rel="external">Pyreverse</a>可以生成UML类图，它已集成到<a href="www.pylint.org">pylint</a>中，它的作用是分析项目代码生成像这样的UML图：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/pyreverse_pkgdiagram.png" alt="pyreverse"> <center>来自<a href="www.pylint.org">pylint</a></center></p>
<p>显然，这个工具能够帮助我们很快地理解一个Python项目的结构，有了这样的UML类图再去看源代码就会清晰很多。但目前我想要分析的是自己的代码，虽然Pyreverse很屌，但用不上啊，所以，这个工具暂且放一放，以后需要再学习一个，多说一句，如果想画UML也可以用<a href="http://plantuml.com/" target="_blank" rel="external">plantuml</a>。</p>
<p>今天的主角是强大的<a href="https://github.com/gak/pycallgraph" target="_blank" rel="external">PyCallGraph</a>，一句话简介：PyCallGraph可以动态生成python程序的调用图。它能告诉你各函数调用次数、调用时间。先拿官方的说明举例吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> pycallgraph <span class="keyword">import</span> PyCallGraph</div><div class="line"><span class="keyword">from</span> pycallgraph.output <span class="keyword">import</span> GraphvizOutput</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></div><div class="line">        self.secret_function()</div><div class="line">        self.chew()</div><div class="line">        self.swallow()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">secret_function</span><span class="params">(self)</span>:</span></div><div class="line">        time.sleep(<span class="number">0.2</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chew</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swallow</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line">graphviz = GraphvizOutput(output_file=<span class="string">'filter_none.png'</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> PyCallGraph(output=graphviz):</div><div class="line">    banana = Banana()</div><div class="line">    banana.eat()</div></pre></td></tr></table></figure>
<p>现在有一个Banana类，我想要生成eat方法的调用关系，看看时间都用在哪里。只需要通过GraphvizOutput指定output文件，进行初始化，通过Python的with关键字，将运行的代码放入with代码块即可生成调用关系图：<br><img src="http://7xi5vu.com1.z0.glb.clouddn.com/filter_none.png" alt="filter_none"></p>
<p>可以看到，secret_funcition这部分是红色的，运行时间是最长的，如果是优化实际项目，我们就应该从这入手了。</p>
<p>是不是非常简单，非常优雅？就这么一张图，告诉了我们程序的运行路径，经过的每个函数、每个模块、运行的时间、调用的次数，简简单单就了解了程序的整个调用过程，其实坑还是有的，比如我生成EE-Book爬取简书某博主的文章的调用关系图：  <center><a href="http://7xi5vu.com1.z0.glb.clouddn.com/filter_no_exclude.png" target="_blank" rel="external">图片太大，请点击查看</a></center>    </p>
<p>完全没法分析是不是，对的，我们和PyCallGraph的作者想到一起去了，稍微大点的项目，有的函数是不需要分析的，不然生成的图太复杂了，得有个过滤机制才行，暂时不分析一些函数，对调用的深度也得加个限制，写一个过滤函数的配置：  </p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">config</span> = Config(max_depth=<span class="number">9</span>)</div><div class="line"><span class="built_in">config</span>.trace_filter = GlobbingFilter(exclude=[</div><div class="line">    <span class="string">'bs4.*'</span>,</div><div class="line">    <span class="string">'BeautifulSoup.*'</span>,</div><div class="line">    # <span class="string">'.epub.*'</span>,</div><div class="line">    # <span class="string">'__main__'</span>,</div><div class="line">    <span class="string">'pycallgraph.*'</span>,</div><div class="line">    <span class="string">'*.closeEvent'</span>,</div><div class="line">    <span class="string">'*.&lt;module&gt;'</span>,</div><div class="line">    <span class="string">'src.tools.match.*'</span>,</div><div class="line">    <span class="string">'*.EEBook.__init__'</span>,</div><div class="line">    <span class="string">'src.main.init_database'</span>,</div><div class="line">    <span class="string">'src.tools.config_load'</span>,</div><div class="line">    <span class="string">'src.utils.log.*'</span>,</div><div class="line">    <span class="string">'src.tools.path.*'</span>,</div><div class="line">    <span class="string">'src.tools.db.*'</span>,</div><div class="line">    <span class="string">'src.book.*'</span>,</div><div class="line">    <span class="string">'src.container.*'</span>,</div><div class="line">    <span class="string">'src.url_parser.*'</span>,</div><div class="line">    <span class="string">'src.tools.config.*'</span>,</div><div class="line">    <span class="string">'src.lib.epub.*'</span>,</div><div class="line">    <span class="string">'src.tools.html_creator.*'</span>,</div><div class="line">    <span class="string">'*.JianshuAuthorWorker.__init__'</span>,</div><div class="line">    <span class="string">'*.start_create_work_list'</span>,</div><div class="line">    <span class="string">'*.JianshuAuthorWorker.save'</span>,</div><div class="line">    <span class="string">'*.JianshuAuthorWorker.add_property'</span>,</div><div class="line">    <span class="string">'*.JianshuAuthorWorker.clear_index'</span>,</div><div class="line">    <span class="string">'*.JianshuAuthorWorker.create_save_config'</span>,</div><div class="line">    <span class="string">'*.JianshuAuthorWorker.clear_work_set'</span>,</div><div class="line">    <span class="string">'*.print_in_single_line'</span>,</div><div class="line">    <span class="string">'*.http.set_cookie'</span>,</div><div class="line">    <span class="string">'*.html5lib.constants.*'</span>,</div><div class="line">])</div></pre></td></tr></table></figure>
<p>再看看生成的图：  </p>
<p><img src="http://7xi5vu.com1.z0.glb.clouddn.com/filter_exclude_jianshu.png" alt="filter_exclude_jianshu"></p>
<p>这下就要清晰多了吧，接下来就可以继续修改过滤机制，庖丁解牛般查找问题所在。</p>
<p>利用PyCallGraph我们能够很快找到程序需要优化的地方，接下来选择合适的方案即可。比如如果时间大多花在I/O上，应该试试Python的多线程模块，如果解析字符串花的时间比较多，可能我们得放弃bs4库，改成正则表达式？再或者，计算密集型，尝试用C语言扩展重写？其实说到底还是要有一针见血找到问题所在的能力（体现思考深度），找到问题所在再用对应方案尝试解决（体现思考广度）。要优化代码，有PyCallGraph这样的可视化工具帮助我们剖析代码，难道还不够么？  </p>
<p>还不够么  </p>
<p>不够么  </p>
<p>够么  </p>
<p>么  </p>
<p>欢迎用更好的工具打我脸啊~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;premature optimization is the root of all evil   &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://knarfeh.github.io/tags/Life/"/>
    
      <category term="Python" scheme="http://knarfeh.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
